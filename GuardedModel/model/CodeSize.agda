

{-# OPTIONS --cubical --guarded -v term:50 #-}

-- open import Guarded
open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary
-- open import Cubical.Data.Equality using (_‚â°p_ ; reflp ; cong)
open import DecPEq
open import Cubical.Data.Nat as Nat
import Cubical.Data.Nat.Order as Nat
import Cubical.Induction.WellFounded as Nat
open import Cubical.Data.Vec
open import Cubical.Data.Sum as Sum
open import Cubical.Data.Bool
-- open import Cubical.Data.Equality
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import Inductives
open import GuardedAlgebra
import GuardedModality as G
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import InductiveCodes
-- open import Cubical.Data.Equality using (ptoc)

open import ApproxExact


-- open import InductiveCodes
open import Cubical.Foundations.Transport


-- Brouwer Tree ordinals
-- Based on the presentation by Kraus, Forsburg and Xu
-- https://arxiv.org/abs/2104.02549

-- The main difference is that we allow the limit over the elements of any code type, not just natural numbers

open import InductiveCodes
module CodeSize {{_ : DataTypes}} {{_ : DataGerms}} {{_ : CodesForInductives }} where


open import SizeOrdMultiMax public





open import Code
open import WMuEq
open import Head
open import Util

open import SizeOrd -- ‚ÑÇ El ‚Ñß Cùüô refl

record CodeSizeF (‚Ñì : ‚Ñï) : Set  where
  constructor codeSizeF
  field
    smallerCodeSize : {{inst : 0< ‚Ñì}} ‚Üí ‚ÑÇ-1 (SmallerCodeAt ‚Ñì ) ‚Üí Size
    smallerElSize : {{√¶ : √Ü }} ‚Üí {{inst : 0< ‚Ñì}} ‚Üí (c : ‚ÑÇ-1 (SmallerCodeAt ‚Ñì)) ‚Üí El-1 (SmallerCodeAt ‚Ñì) c ‚Üí Size

  -- germSize {‚Ñì} tyCtor = wInd (Œª _ ‚Üí LargeSize) (germDescFSize tyCtor (GArg (DName tyCtor) (dataGerm ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)))) LO1 LO1

  CFin : ‚àÄ (n : ‚Ñï) ‚Üí ‚ÑÇ 0
  CFin ‚Ñï.zero = C‚Ñß
  CFin (‚Ñï.suc n) = CŒ£ Cùüô (Œª {‚Ñßùüô  ‚Üí C‚Ñß ; Gtt ‚Üí CFin n})


  fromCFin : ‚àÄ {n} ‚Üí El {{√¶ = Approx}} (CFin n) ‚Üí Fin (‚Ñï.suc n)
  fromCFin {‚Ñï.zero} _ = Fin.zero
  fromCFin {‚Ñï.suc n} (‚Ñßùüô , rest) = Fin.zero
  fromCFin {‚Ñï.suc n} (Gtt , rest) = Fin.suc (fromCFin rest)


  toCFin : ‚àÄ {n} ‚Üí Fin (‚Ñï.suc n) ‚Üí El {{√¶ = Approx}} (CFin n)
  toCFin {n = ‚Ñï.zero} x = ‚Ñßùüò
  toCFin {n = ‚Ñï.suc n} Fin.zero = ‚Ñßùüô , ‚Ñßùüò
  toCFin {n = ‚Ñï.suc n} (Fin.suc x) = Gtt , toCFin x

  fromToCFin : ‚àÄ {n} (x : Fin (‚Ñï.suc n)) ‚Üí fromCFin (toCFin x) ‚â°p x
  fromToCFin {‚Ñï.zero} Fin.zero = reflp
  fromToCFin {‚Ñï.suc n} Fin.zero = reflp
  fromToCFin {‚Ñï.suc n} (Fin.suc x) rewrite fromToCFin x = reflp



  -- germFIndSize : ‚àÄ {{√¶ : √Ü}}  {B+ B- sig} (tyCtor : CName) ‚Üí (D : GermCtor B+ B- sig)
  --   ‚Üí (DataGermIsCode ‚Ñì D)
  --   ‚Üí (b+ : B+)
  --   ‚Üí (b- : B- b+)
  --   ‚Üí (cs : DescFunctor ‚Ñì tyCtor D b+ b-)
  --   ‚Üí ‚ñ° _ (Œª _ ‚Üí Size) (just tyCtor , cs)
  --   ‚Üí Size

  -- germUnkFSize : ‚àÄ {{√¶ : √Ü}} ‚Üí (x : GermUnkFunctor ‚Ñì) ‚Üí ‚ñ° _ (Œª _ ‚Üí Size) (nothing , x) ‚Üí Size


  -- germUnkFSize (FC (HŒ† , arg) f) œÜ = S‚Üë (SLim C‚Åá helper)
  --   where
  --     helper : ApproxEl {‚Ñì = ‚Ñì} C‚Åá ‚Üí Size
  --     helper x = œÜ (transportPath (symPath ‚ÅáWrap‚â°) (next fx))
  --       where
  --         fx = apply‚ÅáFun (Œª x ‚Üí ‚ÅáFromW (f x)) (exact {‚Ñì = ‚Ñì} {c = C‚Åá} x)
  -- germUnkFSize (FC (HŒ£ , arg) resp) œÜ = S‚Üë (smax (œÜ true ) (œÜ false))
  -- germUnkFSize (FC (H‚âÖ , arg) resp) œÜ = S‚Üë (œÜ tt)
  -- germUnkFSize (FC (Hùüô , arg) resp) œÜ = S1
  -- germUnkFSize (FC (HType , arg) resp) œÜ  = S‚Üë (smallerCodeSize ‚¶É ‚ÑÇ-1>0 arg ‚¶Ñ arg) -- S‚Üë (smallerCodeSize ‚¶É ? ‚¶Ñ arg)
  -- germUnkFSize (FC (HCumul , (c , x)) resp) œÜ =  S‚Üë (smallerElSize {{inst = ‚ÑÇ-1>0 c}} c x)
  -- germUnkFSize (FC (HCtor x , arg) resp) œÜ = {!!}

  -- allDataSize : ‚àÄ {{ √¶ : √Ü }}  {mc : Maybe CName} ‚Üí  AllDataTypes ‚Ñì mc ‚Üí Size
  -- allDataSize = DataGerm Size germUnkFSize (Œª d x ‚Üí germFIndSize _ (germForCtor ‚Ñì _ d) (dataGermIsCode ‚Ñì _ d) tt tt x) (Œª _ ‚Üí S1 , S1)




  -- germFIndSize tyCtor GEnd GEndCode b+ b- (FC com k) œÜ = S1
  -- germFIndSize tyCtor (GArg (A+ , A-) D) (GArgCode c+ c- iso+ iso- isCode) b+ b- (FC ((a+ , a-) , com) k) œÜ
  --   = S‚Üë (germFIndSize tyCtor D isCode (b+ , a+) (b- , a-) (FC com (Sum.elim (Œª r ‚Üí k (inl r)) Œª r ‚Üí k (inr r)))  œÜ)
  -- germFIndSize tyCtor (GHRec (A+ , A-) D) (GHRecCode c+ c- iso+ iso- isCode) b+ b- (FC com k) œÜ
  --   = S‚Üë (SLim (c+ b+) helper)
  --     where
  --     helper : (a+ : El (c+ b+))  ‚Üí Size
  --     helper a+  = smax*
  --       -- We only do sizes on the part that isn't hidden behind guardedness
  --       -- For the guarded part, we take the size at ‚Ñß, for the approx case this is the only argument
  --       -- (œÜ (Rec (inl ac+)))
  --       (œÜ (inl (Rec (inl ac+)))
  --       -- In approx case, only one value to give
  --       -- In exact case, we use ‚Ñß trivially (but we don't actually need this, we just use fix to recur in these cases)
  --       ‚à∑ œÜ (inl (Rec (inr (ac+ , Iso.inv (iso- b+ ac+ b-) (case√Ü (Œª {reflp ‚Üí tt*}) (Œª {reflp ‚Üí G.next (‚Ñß ‚¶É √¶ = Exact ‚¶Ñ (c- b+ ac+ b-))}))))))
  --       ‚à∑ (germFIndSize tyCtor D isCode b+ b-
  --         (FC com (Sum.elim (Œª r ‚Üí k (inl (Rest r))) Œª r ‚Üí k (inr r)))
  --         (Sum.elim (Œª r ‚Üí œÜ (inl (Rest r))) (Œª r ‚Üí œÜ (inr r))))
  --       ‚à∑ [])
  --       where
  --         ac+ : A+ b+
  --         ac+ = Iso.inv (iso+ b+) a+
  -- germFIndSize tyCtor (GRec D) (GRecCode isCode) b+ b- (FC com k) œÜ
  --   = S‚Üë (smax
  --     (œÜ (inl (Rec tt)))
  --     (germFIndSize tyCtor D isCode b+ b-
  --       (FC com (Sum.elim (Œª r ‚Üí k (inl (Rest r))) (Œª r ‚Üí k (inr r))) )
  --       (Sum.elim (Œª r ‚Üí œÜ (inl (Rest r))) (Œª r ‚Üí œÜ (inr r)))))
  -- germFIndSize tyCtor (GUnk (A+ , A-) D) (GUnkCode c+ c- iso+ iso- isCode) b+ b- (FC com k) œÜ
  --   = S‚Üë (SLim (c+ b+) helper)
  --     where
  --     helper : (a+ : El (c+ b+))  ‚Üí Size
  --     helper a+  = smax*
  --       -- We only do sizes on the part that isn't hidden behind guardedness
  --       -- For the guarded part, we take the size at ‚Ñß, for the approx case this is the only argument
  --       -- (œÜ (Rec (inl ac+)))
  --       (œÜ (inr (Rec (inl ac+)))
  --       -- In approx case, only one value to give
  --       -- In exact case, we use ‚Ñß trivially (but we don't actually need this, we just use fix to recur in these cases)
  --       ‚à∑ œÜ (inr (Rec (inr (ac+ , Iso.inv (iso- b+ ac+ b-) (case√Ü (Œª {reflp ‚Üí tt*}) (Œª {reflp ‚Üí G.next (‚Ñß ‚¶É √¶ = Exact ‚¶Ñ (c- b+ ac+ b-))}))))))
  --       ‚à∑  (germFIndSize tyCtor D isCode b+ b-
  --            (FC com (Sum.elim (Œª r ‚Üí k (inl r)) (Œª r ‚Üí k (inr (Rest r)))) )
  --            (Sum.elim (Œª r ‚Üí œÜ (inl r)) (Œª r ‚Üí œÜ (inr (Rest r)))))
  --       ‚à∑ [])
  --       where
  --         ac+ : A+ b+
  --         ac+ = Iso.inv (iso+ b+) a+







  DLim : ‚àÄ (tyCtor : CName) ‚Üí ((d : DName tyCtor) ‚Üí Size) ‚Üí Size
  DLim tyCtor f with numCtors tyCtor
  ... | ‚Ñï.zero = SZ
  ... | ‚Ñï.suc n = SLim  (CFin n) (Œª x ‚Üí f (fromCFin x))

  DLim-cocone : ‚àÄ (tyCtor : CName) ‚Üí (f : ( DName tyCtor) ‚Üí Size) ‚Üí (d : DName tyCtor) ‚Üí f d ‚â§‚Çõ DLim tyCtor f
  DLim-cocone tyCtor f d with numCtors tyCtor
  DLim-cocone tyCtor f () | ‚Ñï.zero
  ... | ‚Ñï.suc n  = pSubst (Œª x ‚Üí f d ‚â§‚Çõ f x) (pSym (fromToCFin d)) ‚â§‚Çõ-refl ‚â§‚®ü ‚â§‚Çõ-cocone (toCFin d)

  extDLim : ‚àÄ (tyCtor : CName) ‚Üí (f1 f2 : (d : DName tyCtor) ‚Üí Size) ‚Üí (‚àÄ d ‚Üí f1 d ‚â§‚Çõ f2 d) ‚Üí (DLim tyCtor f1) ‚â§‚Çõ (DLim tyCtor f2)
  extDLim tyCtor f1 f2 lt with numCtors tyCtor
  ... | ‚Ñï.zero = ‚â§‚Çõ-Z
  ... | ‚Ñï.suc n = ‚â§‚Çõ-extLim ‚¶É √¶ = Approx ‚¶Ñ (Œª k ‚Üí lt (fromCFin k))

  smax-DLim2 : ‚àÄ (tyCtor : CName) ‚Üí (f1 f2 : (d : DName tyCtor) ‚Üí Size) ‚Üí  DLim tyCtor (Œª d1 ‚Üí DLim tyCtor (Œª d2 ‚Üí smax (f1 d1) (f2 d2))) ‚â§‚Çõ smax (DLim tyCtor f1) (DLim tyCtor f2)
  smax-DLim2 tyCtor f1 f2 with numCtors tyCtor
  ... | ‚Ñï.zero = ‚â§‚Çõ-Z
  ... | ‚Ñï.suc n = smax-lim2L (Œª z ‚Üí f1 (fromCFin z)) (Œª z ‚Üí f2 (fromCFin z))


  -- dataGermSize : ‚àÄ {{√¶ : √Ü}} (tyCtor : CName) ‚Üí DataGerm ‚Ñì tyCtor ‚Üí Size
  -- dataGermSize tyCtor x = allDataSize x
  -- dataGermSize tyCtor (Wsup (FC (d , com) resp)) =
  --   germIndSize tyCtor (germForCtor ‚Ñì tyCtor d) (dataGermIsCode ‚Ñì tyCtor d) tt tt
  --     (FC com (Sum.elim (Œª r ‚Üí resp (inl r)) (Œª r ‚Üí resp (inr r))))
  -- dataGermSize tyCtor W‚Åá = S1
  -- dataGermSize tyCtor W‚Ñß = S1

  codeSize : ‚ÑÇ ‚Ñì ‚Üí Size
  descSize : ‚àÄ  { sig} ‚Üí  {cB : ‚ÑÇ ‚Ñì} ‚Üí ‚ÑÇDesc cB sig ‚Üí Size


  codeSize C‚Åá = S1
  codeSize C‚Ñß = S1
  codeSize Cùüò = S1
  codeSize Cùüô = S1
  codeSize CType = S1
  codeSize (CŒ† dom cod) =
    S‚Üë (smax
      ( (codeSize dom))
      ( (SLim dom Œª x ‚Üí  (codeSize (cod x)))))
  codeSize (CŒ£ dom cod) =
    S‚Üë (smax
      ( (codeSize dom))
      (  (SLim dom Œª x ‚Üí  (codeSize (cod x)))))
  codeSize  (C‚â° c x y) = S‚Üë ( (codeSize c))
  codeSize (CŒº tyCtor c D x) =
    S‚Üë (smax
      ( (codeSize c))
      ( (DLim tyCtor Œª d ‚Üí descSize (D d))))
  codeSize (CCumul {{inst = inst}} c) = S‚Üë (smallerCodeSize c)

  --TODO: need ElSizes here?
  descSize (CEnd) = S1 -- S‚Üë (elSize {{Approx}} c i )
  descSize {cB = cB} (CArg c D cB' _) = S‚Üë
    (smax* (
      (codeSize cB')
      ‚à∑ (SLim cB Œª b ‚Üí  (codeSize (c b)))
      ‚à∑ (descSize D) ‚à∑ [])
      )
  descSize  (CRec D) = S‚Üë  (descSize D)
  descSize  {cB = cB} (CHRec c D cB' _) =
    S‚Üë (smax* (
      (codeSize cB')
      ‚à∑ (SLim cB Œª b ‚Üí  (codeSize (c b)))
      ‚à∑  (descSize D) ‚à∑ [] ))





  private
    instance
      approx√Ü : √Ü
      approx√Ü = Approx

  -- germUnkSize : (x : WUnk {{√¶ = Approx}} ‚Ñì) ‚Üí Size
  ‚ÅáSize : ‚àÄ {{ √¶ : √Ü}} ‚Üí ‚ÅáTy ‚Ñì ‚Üí Size
  elSize : ‚àÄ {{√¶ : √Ü}} (c : ‚ÑÇ ‚Ñì) ‚Üí El c ‚Üí Size
  -- ‚ñπelSize : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí ‚ñπEl c ‚Üí Size
  CŒºSize : ‚àÄ   {tyCtor : CName} (D : DCtors {‚Ñì = ‚Ñì} tyCtor)  ‚Üí ‚ÑÇŒº tyCtor D ‚Üí Size
  CElSize : ‚àÄ {sig} {cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cB sig) (E : DCtors {‚Ñì = ‚Ñì} tyCtor) {b} ‚Üí ‚ÑÇDescEl D (‚ÑÇŒº tyCtor E) b ‚Üí Size

  open import WMuGerm

  -- germUnkSize (Wsup (FC (HŒ† , args) f)) = S‚Üë (germUnkSize (f tt*))
  -- germUnkSize (Wsup (FC (HŒ£ , args) resp)) = S‚Üë (smax (germUnkSize (resp true)) (germUnkSize (resp false)))
  -- germUnkSize (Wsup (FC (H‚âÖ , args) resp)) = S‚Üë (germUnkSize (resp tt))
  -- germUnkSize (Wsup (FC (Hùüô , args) resp)) = S1
  -- germUnkSize (Wsup (FC (HType , args) resp)) =  S‚Üë (smallerCodeSize ‚¶É ‚ÑÇ-1>0 args ‚¶Ñ args) -- S‚Üë (smallerCodeSize ‚¶É ? ‚¶Ñ arg)
  -- germUnkSize (Wsup (FC (HCumul , (c , x)) resp)) = S‚Üë (smallerElSize {{√¶ = Approx}} {{inst = ‚ÑÇ-1>0 c}} c x)
  -- --TODO fix this one
  -- germUnkSize (Wsup (FC (HCtor tyCtor , args) resp)) = S1 --S‚Üë (CŒºSize _ (posDataGermVal ‚Ñì tyCtor (resp tt)))
  -- germUnkSize W‚Åá = S1
  -- germUnkSize W‚Ñß = S1

  --TODO
  ‚ÅáSize CodeModule.‚Åá‚Ñß = S1
  ‚ÅáSize CodeModule.‚Åá‚Åá = S1
  ‚ÅáSize CodeModule.‚Åáùüô = S1
  ‚ÅáSize (CodeModule.‚ÅáType x) = S1
  ‚ÅáSize (CodeModule.‚ÅáCumul c x) = S1
  ‚ÅáSize (CodeModule.‚ÅáŒ† x) = S1
  ‚ÅáSize (CodeModule.‚ÅáŒ£ x) = S1
  ‚ÅáSize (CodeModule.‚Åá‚â° x) = S1
  ‚ÅáSize (CodeModule.‚ÅáŒº tyCtor x) = S‚Üë (CŒºSize _ (posDataGermVal ‚Ñì tyCtor x))

  elSize {{√¶ = √¶}} C‚Åá x = ‚ÅáSize {{√¶ = √¶}} x --germUnkSize (‚ÅáToW {{√¶ = Approx}} (approx {c = C‚Åá {‚Ñì = ‚Ñì}} x))
  elSize C‚Ñß x = S1
  elSize Cùüò x = S1
  elSize Cùüô x = S1
  elSize (CType {{inst = inst}}) x = S‚Üë (smallerCodeSize x)
  elSize {{√¶ = √¶}} (CŒ† dom cod) f = S‚Üë (SLim dom (Œª x ‚Üí elSize {{√¶ = √¶}} (cod x) (substPath (Œª x ‚Üí El (cod x)) (approxExact‚â° x) (f (exact x))) ))
  elSize {{√¶ = √¶}} (CŒ£ dom cod) (x , y) = S‚Üë (smax (elSize {{√¶ = √¶}} dom x) (elSize {{√¶ = √¶}} (cod (approx x)) y)) -- S‚Üë (smax (elSize dom (exact x)) (elSize (cod (approx x)) y))
  elSize (C‚â° c x‚ÇÅ y) (x ‚ä¢ .x‚ÇÅ ‚âÖ .y) = S‚Üë (elSize {{Approx}} c x)
  elSize (CŒº tyCtor cI D i) x = S‚Üë (CŒºSize D ( Iso.inv CŒºWiso (approx {‚Ñì = ‚Ñì} {c = CŒº tyCtor cI D i} x) ))
  elSize (CCumul {{inst = inst}} c) x = smallerElSize c x --elSize c x

  CŒºSize D (Cinit d x) = S‚Üë (CElSize (D d) D x)
  CŒºSize D CŒº‚Åá = S1
  CŒºSize D CŒº‚Ñß = S1

  CElSize  .CEnd E  (ElEnd) = S1
  CElSize (CArg c D _ _) E {b = b} (ElArg a x) = S‚Üë (smax (elSize {{√¶ = Approx}} (c b) a) (CElSize D E x))
  CElSize (CRec D) E (ElRec x x‚ÇÅ) = S‚Üë (smax (CŒºSize E x) (CElSize D E x‚ÇÅ))
  CElSize (CHRec c D _ _) E {b = b} (ElHRec f x) = S‚Üë (SLim (c b) Œª a ‚Üí smax (CŒºSize E (f a)) (CElSize D E x))


--TODO uncomment after here

-- SizeMod : ‚àÄ {‚Ñì} ‚Üí CodeSizeF ‚Ñì
-- SizeMod {‚Ñï.zero} = codeSizeF (Œª { {{inst = ()}} }) (Œª { {{inst = ()}} })
-- SizeMod {‚Ñï.suc ‚Ñì} = codeSizeF
--       (Œª {{inst = suc<}} ‚Üí CodeSizeF.codeSize (SizeMod {‚Ñì}))
--       (Œª { {{inst = suc<}}  ‚Üí CodeSizeF.elSize (SizeMod {‚Ñì})})

-- module SM {‚Ñì} where
--   open CodeSizeF (SizeMod {‚Ñì}) public

-- open SM public

-- codeSuc : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí SZ <‚Çõ codeSize c
-- codeSuc C‚Åá = ‚â§‚Çõ-refl
-- codeSuc C‚Ñß = ‚â§‚Çõ-refl
-- codeSuc Cùüò = ‚â§‚Çõ-refl
-- codeSuc Cùüô = ‚â§‚Çõ-refl
-- codeSuc CType = ‚â§‚Çõ-refl
-- codeSuc (CŒ† c cod) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- codeSuc (CŒ£ c cod) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- codeSuc (C‚â° c x y) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- codeSuc (CŒº tyCtor c D x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- codeSuc {‚Ñì = suc ‚Ñì} (CCumul c) = (codeSuc c) ‚â§‚®ü (‚â§‚Üë (codeSize c))

-- codeMaxL : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí smax S1 (codeSize c) ‚â§‚Çõ codeSize c
-- codeMaxL CodeModule.C‚Åá = smax-oneL
-- codeMaxL CodeModule.C‚Ñß = smax-oneL
-- codeMaxL CodeModule.Cùüò = smax-oneL
-- codeMaxL CodeModule.Cùüô = smax-oneL
-- codeMaxL CodeModule.CType = smax-oneL
-- codeMaxL (CodeModule.CŒ† c cod) = smax-oneL
-- codeMaxL (CodeModule.CŒ£ c cod) = smax-oneL
-- codeMaxL (CodeModule.C‚â° c x y) = smax-oneL
-- codeMaxL (CodeModule.CŒº tyCtor c D x) = smax-oneL
-- codeMaxL {‚Ñì = suc ‚Ñì} (CCumul c) = smax-oneL


-- codeMaxR : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí smax (codeSize c) S1 ‚â§‚Çõ codeSize c
-- codeMaxR CodeModule.C‚Åá = smax-oneR
-- codeMaxR CodeModule.C‚Ñß = smax-oneR
-- codeMaxR CodeModule.Cùüò = smax-oneR
-- codeMaxR CodeModule.Cùüô = smax-oneR
-- codeMaxR CodeModule.CType = smax-oneR
-- codeMaxR (CodeModule.CŒ† c cod) = smax-oneR
-- codeMaxR (CodeModule.CŒ£ c cod) = smax-oneR
-- codeMaxR (CodeModule.C‚â° c x y) = smax-oneR
-- codeMaxR (CodeModule.CŒº tyCtor c D x) = smax-oneR
-- codeMaxR {‚Ñì = suc ‚Ñì} (CCumul c) = smax-oneR

-- codeMaxSuc : ‚àÄ {‚Ñì1 ‚Ñì2} {c1 : ‚ÑÇ ‚Ñì1 } {c2 : ‚ÑÇ ‚Ñì2} ‚Üí S1 ‚â§‚Çõ smax (codeSize c1) (codeSize c2)
-- codeMaxSuc {c1 = c1} {c2 = c2} = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z ‚â§‚®ü smax-strictMono (codeSuc c1) (codeSuc c2)


-- ‚Åásuc : ‚àÄ {{_ : √Ü}} {‚Ñì} (x : ‚ÅáTy ‚Ñì) ‚Üí S1 ‚â§‚Çõ ‚ÅáSize x
-- ‚Åásuc ‚Åá‚Åá = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc ‚Åá‚Ñß = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc ‚Åáùüô = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc {suc ‚Ñì} (‚ÅáType x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc (‚ÅáŒ† x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc (‚ÅáŒ£ x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc (‚Åá‚â° (x ‚ä¢ .‚Åá‚Åá ‚âÖ .‚Åá‚Åá)) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc (‚ÅáŒº tyCtor x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc {‚Ñì = suc ‚Ñì} (‚ÅáCumul c x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z

-- open import Cubical.Data.Maybe


-- -- dataGermDescSize : {{_ : √Ü}} ‚Üí ‚Ñï ‚Üí CName ‚Üí Size
-- -- dataGermDescSize ‚Ñì tyCtor with numCtors tyCtor in deq
-- -- ... | ‚Ñï.zero = S1
-- -- ... | ‚Ñï.suc n = SLim (CFin n) Œª x ‚Üí
-- --     let
-- --       d : DName tyCtor
-- --       d = pSubst Fin (pSym deq) (fromCFin x)
-- --     in germDescSize (germForCtor ‚Ñì tyCtor d) (dataGermIsCode ‚Ñì tyCtor d) tt tt

-- -- germFCSize :  ‚àÄ {{√¶ : √Ü}} {‚Ñì} {B+ B- sig} {tyCtor : CName}
-- --       ‚Üí {D : GermCtor B+ B- sig}
-- --       ‚Üí {b+ : B+}
-- --       ‚Üí {b- : B- b+}
-- --       ‚Üí (isCode : DataGermIsCode ‚Ñì D)
-- --       ‚Üí FCGerm ‚Ñì tyCtor D b+ b-
-- --       ‚Üí Size
-- -- germFCSize {tyCtor = tyCtor} {D} {b+} {b- } isCode x = germFIndSize tyCtor D isCode b+ b- x Œª r ‚Üí germIndSize tyCtor (FContainer.responseNow x r)


--   -- Match on the constructor of an element of the data germ
--   -- and get back a proof that the match gives something smaller
-- -- germMatch : {{ _ : √Ü }} ‚Üí {‚Ñì : ‚Ñï} ‚Üí {tyCtor : CName}
-- --       ‚Üí (dg : FContainer (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì))
-- --         (W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì)) (‚ÅáTy ‚Ñì) tt)
-- --       ‚Üí Œ£[ d ‚àà DName tyCtor ]
-- --         Œ£[ x ‚àà FCGerm ‚Ñì tyCtor (germForCtor ‚Ñì tyCtor d) tt tt ]
-- --         germFCSize (dataGermIsCode ‚Ñì tyCtor d) x <‚Çõ germIndSize {‚Ñì = ‚Ñì} tyCtor (Wsup dg)
-- -- germMatch (FC (d , com) rn ru) =
-- --     d
-- --     , FC com rn ru
-- --     , ‚â§‚Çõ-refl

-- -- dataGermInj : {{ _ : √Ü }} ‚Üí {‚Ñì : ‚Ñï} ‚Üí {tyCtor : CName} {d : DName tyCtor}
-- --       ‚Üí FCGerm ‚Ñì tyCtor (germForCtor ‚Ñì tyCtor d) tt tt
-- --       ‚Üí DataGerm ‚Ñì tyCtor
-- -- dataGermInj {d = d} (FC com now unk) = Wsup (FC (d , com) now unk)


--   -- Used for well-founded 2-argument induction
--   -- descPairSize : ‚àÄ {{_ : √Ü}} {‚Ñì sig} ‚Üí  {cI cB cI' cB' : ‚ÑÇ ‚Ñì} ‚Üí (D1 : ‚ÑÇDesc cI cB sig) (D2 : ‚ÑÇDesc cI' cB' sig) ‚Üí Size

--   -- codePairSize c1 c2 with codeHead c1 in eq1 | codeHead c2 in eq2 | headMatchView (codeHead c1) (codeHead c2)
--   -- ... | h1 |  h2 |  H‚ÑßL x = codeSize c2
--   -- ... | h1 |  h2 |  H‚ÑßR x = codeSize c1
--   -- ... | h1 |  h2 |  H‚ÅáL x x‚ÇÅ = codeSize c2
--   -- ... | .(HStatic _) |  h2 |  H‚ÅáR x = codeSize c1
--   -- ... | .(HStatic _) |  .(HStatic _) |  HNeq x = smax (codeSize c1) (codeSize c2)
--   -- codePairSize (CŒ† dom1 cod1) (CŒ† dom2 cod2) | HStatic HŒ† |  HStatic _ |  HEq reflp
--   --   = S‚Üë (smax (codePairSize dom1 dom2) (SLim dom1 Œª x1 ‚Üí SLim dom2 Œª x2 ‚Üí codePairSize (cod1 (approx x1)) (cod2 (approx x2))))
--   -- codePairSize (CŒ£ dom1 cod1) (CŒ£ dom2 cod2) | HStatic HŒ£ |  HStatic _ |  HEq reflp
--   --    = S‚Üë (smax (codePairSize dom1 dom2) (SLim dom1 Œª x1 ‚Üí SLim dom2 Œª x2 ‚Üí codePairSize (cod1 (approx x1)) (cod2 (approx x2))))
--   -- codePairSize (C‚â° c1 x y) (C‚â° c2 x‚ÇÅ y‚ÇÅ) | HStatic H‚âÖ |  HStatic _ |  HEq reflp
--   --   = S‚Üë (codePairSize c1 c2)
--   -- codePairSize Cùüô Cùüô | HStatic Hùüô |  HStatic _ |  HEq reflp = S1
--   -- codePairSize Cùüò Cùüò | HStatic Hùüò |  HStatic _ |  HEq reflp = S1
--   -- codePairSize CType CType | HStatic HType |  HStatic _ |  HEq reflp = S1
--   -- codePairSize (CŒº tyCtor c1 D x) (CŒº tyCtor‚ÇÅ c2 D‚ÇÅ x‚ÇÅ) | HStatic (HCtor x‚ÇÇ) |  HStatic _ |  HEq reflp with reflp ‚Üê eq1 with reflp ‚Üê eq2
--   --   = S‚Üë (DLim tyCtor Œª d ‚Üí descPairSize (D d) (D‚ÇÅ d))


--   -- descPairSize (CEnd i) (CEnd i‚ÇÅ) = S1
--   -- descPairSize {cB = cB} {cB' = cB'} (CArg c D1) (CArg c' D2)
--   --   = S‚Üë (smax (SLim cB Œª x1 ‚Üí SLim cB' Œª x2 ‚Üí codePairSize (c (approx x1)) (c' (approx x2)) ) (descPairSize D1 D2))
--   -- descPairSize (CRec j D1) (CRec j' D2)
--   --   = S‚Üë (descPairSize  D1 D2)
--   -- descPairSize {cB = cB} {cB' = cB'} (CHRec c j D1) (CHRec c' j' D2)
--   --   = S‚Üë (smax (SLim cB Œª x1 ‚Üí SLim cB' Œª x2 ‚Üí codePairSize (c (approx x1)) (c' (approx x2)) ) (descPairSize D1 D2))


--   -- Sizes for well-formed codes
--   -- wfSize : ‚àÄ {‚Ñì} ‚Üí ‚ÑÇwf ‚Ñì ‚Üí Size
--   -- wfSize c = codeSize (code c)

--   -- wfElSize : ‚àÄ {{_ : √Ü}} {‚Ñì} ‚Üí (c : ‚ÑÇwf ‚Ñì) ‚Üí wfEl c ‚Üí Size
--   -- wfElSize c x = elSize (code c) x




--   -- wfPairSize : ‚àÄ {‚Ñì} (c1 c2 : ‚ÑÇwf ‚Ñì) ‚Üí Size
--   -- wfPairSize c1 c2 = csize (codePairSize (code c1) (code c2))



--   -- -- elSizeLowerBound : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí (x : El c) ‚Üí S1 ‚â§‚Çõ elSize c x
--   -- -- ‚ÅáSizeLowerBound : ‚àÄ {‚Ñì} (x : ‚ÅáTy ‚Ñì) ‚Üí S1 ‚â§‚Çõ ‚ÅáSize x
--   -- -- codeSizeLowerBound : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí S1 ‚â§‚Çõ codeSize c

--   -- -- codeSizeLowerBound C‚Åá = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound C‚Ñß = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound Cùüò = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound Cùüô = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound CType = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound (CŒ† c cod) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- codeSizeLowerBound (CŒ£ c cod) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- codeSizeLowerBound (C‚â° c x y) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- codeSizeLowerBound (CŒº tyCtor c D x) with numCtors tyCtor
--   -- -- ... | ‚Ñï.zero = ‚â§‚Çõ-refl
--   -- -- ... | ‚Ñï.suc n = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z

--   -- -- elSizeLowerBound C‚Åá x = ‚ÅáSizeLowerBound x
--   -- -- elSizeLowerBound C‚Ñß x = ‚â§‚Çõ-refl
--   -- -- elSizeLowerBound Cùüò x = ‚â§‚Çõ-refl
--   -- -- elSizeLowerBound Cùüô x = ‚â§‚Çõ-refl
--   -- -- elSizeLowerBound {suc ‚Ñì} CType x = codeSizeLowerBound x
--   -- -- elSizeLowerBound (CŒ† dom cod) f = underLim S1 (Œª x ‚Üí elSize (cod (approx x)) (f x)) (Œª k ‚Üí elSizeLowerBound (cod k) (f k))
--   -- -- elSizeLowerBound (CŒ£ c cod) (x , y) = ‚â§‚Çõ-trans (elSizeLowerBound c x) smax-‚â§L
--   -- -- elSizeLowerBound (C‚â° c x‚ÇÅ y) (x ‚ä¢ _ ‚âÖ _) = elSizeLowerBound c x
--   -- -- elSizeLowerBound (CŒº tyCtor c D x‚ÇÅ) (Wsup x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- elSizeLowerBound (CŒº tyCtor c D x‚ÇÅ) W‚Åá = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z

--   -- -- ‚ÅáSizeLowerBound ‚Åá‚Åá = ‚â§‚Çõ-refl
--   -- -- ‚ÅáSizeLowerBound ‚Åá‚Ñß = ‚â§‚Çõ-refl
--   -- -- ‚ÅáSizeLowerBound ‚Åáùüô = ‚â§‚Çõ-refl
--   -- -- ‚ÅáSizeLowerBound {suc ‚Ñì} (‚ÅáType x) = codeSizeLowerBound x
--   -- -- ‚ÅáSizeLowerBound (‚ÅáŒ† x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- ‚ÅáSizeLowerBound (‚ÅáŒ£ x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- ‚ÅáSizeLowerBound (‚Åá‚â° (x ‚ä¢ _ ‚âÖ _)) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- ‚ÅáSizeLowerBound (‚ÅáŒº tyCtor x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z

--   -- -- onePlusCode-L : ‚àÄ {‚Ñì} {c1 c2 : ‚ÑÇ ‚Ñì} ‚Üí codeSize c1 <o ((codeSize c1) +o (codeSize c2))
--   -- -- onePlusCode-L {c1 = c1} {c2} with (o1 , pf1) ‚Üê codeSuc c1 | (o2 , pf2) ‚Üê codeSuc c2 rewrite pf1 rewrite pf2 = ‚â§‚Çõ-sucMono (‚â§‚Çõ-trans (‚â§‚Çõ-sucMono (+o-‚â§-L o1 o2)) (oplus-suc-swap o1 o2))

--   -- -- onePlusCode-R : ‚àÄ {‚Ñì} {c1 c2 : ‚ÑÇ ‚Ñì} ‚Üí codeSize c2 <o ((codeSize c1) +o (codeSize c2))
--   -- -- onePlusCode-R {c1 = c1} {c2} with (o1 , pf1) ‚Üê codeSuc c1 | (o2 , pf2) ‚Üê codeSuc c2 rewrite pf1 rewrite pf2 = ‚â§‚Çõ-sucMono (‚â§‚Çõ-trans (‚â§‚Çõ-sucMono (+o-‚â§-R o1 o2)) (oplus-suc-swap o1 o2))
