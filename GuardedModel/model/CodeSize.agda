
{-# OPTIONS --cubical --guarded #-}

-- open import Guarded
open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary
open import Cubical.Data.Equality using (_‚â°p_ ; reflp ; cong)
open import DecPEq
open import Cubical.Data.Nat
open import Cubical.Data.Sum
open import Cubical.Data.Bool
open import Cubical.Data.Equality
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import Inductives
open import GuardedAlgebra
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import Cubical.Data.Equality using (ptoc)

open import ApproxExact

-- open import InductiveCodes
open import Cubical.Foundations.Transport


-- Brouwer Tree ordinals
-- Based on the presentation by Kraus, Forsburg and Xu
-- https://arxiv.org/abs/2104.02549

-- The main difference is that we allow the limit over the elements of any code type, not just natural numbers

open import InductiveCodes
module CodeSize {{_ : DataTypes}} {{_ : DataGerms}} {{_ : InductiveCodes }} where







open import Code
open import WMuEq
-- open import Head
open import Util

open import Ord -- ‚ÑÇ El ‚Ñß Cùüô refl



-- germSize {‚Ñì} tyCtor = wInd (Œª _ ‚Üí LargeOrd) (germDescFSize tyCtor (GArg (DName tyCtor) (dataGerm ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)))) LO1 LO1

CFin : ‚àÄ (n : ‚Ñï) ‚Üí ‚ÑÇ 0
CFin ‚Ñï.zero = C‚Ñß
CFin (‚Ñï.suc n) = CŒ£ Cùüô (Œª { false ‚Üí C‚Ñß ; true ‚Üí CFin n})


fromCFin : ‚àÄ {n} ‚Üí El {{√¶ = Approx}} (CFin n) ‚Üí Fin (‚Ñï.suc n)
fromCFin {‚Ñï.zero} _ = Fin.zero
fromCFin {‚Ñï.suc n} (false , rest) = Fin.zero
fromCFin {‚Ñï.suc n} (true , rest) = Fin.suc (fromCFin rest)





germFIndSize : ‚àÄ {{√¶ : √Ü}} {‚Ñì} {B} (tyCtor : CName) ‚Üí (D : GermCtor B)
  ‚Üí (DataGermIsCode ‚Ñì D)
  ‚Üí (b : B)
  ‚Üí (cs : FContainer (interpGermCtor D b) (W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì)) (‚ÅáTy ‚Ñì) tt)
  ‚Üí ‚ñ° _ (Œª _ ‚Üí Ord) (tt , cs)
  ‚Üí Ord
germIndSize : ‚àÄ {{ _ : √Ü }} {‚Ñì} (tyCtor : CName) ‚Üí  W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì) tt ‚Üí Ord


germFIndSize tyCtor GEnd GEndCode b (FC com k unk) œÜ = O1
germFIndSize tyCtor (GRec D) (GRecCode c pf) b (FC com k unk) œÜ =
  O‚Üë (omax (œÜ (Rec tt)) (germFIndSize tyCtor D pf b (FC com (Œª r ‚Üí k (Rest r)) unk) (Œª r ‚Üí œÜ (Rest r))))
germFIndSize tyCtor (GArg A D) (GArgCode c isom pf) b (FC (a , com) k unk) œÜ = O‚Üë (germFIndSize tyCtor D pf (b , a) (FC com k unk) œÜ)
germFIndSize tyCtor (GArg A D) (GGuardedArgCode c x pf) b (FC com k unk) œÜ = O1
germFIndSize {{√¶}} tyCtor (GHRec A D) (GHRecCode c isom pf) b (FC com k unk) œÜ = O‚Üë (OLim (c b) helper)
  where
    helper : Approxed (Œª {{√¶}} ‚Üí El {{√¶ = √¶}} (c b))  ‚Üí Ord
    helper a = omax (œÜ (Rec ac)) (germFIndSize tyCtor D pf b (FC com (Œª r ‚Üí k (Rest (ac , r))) unk) Œª r ‚Üí œÜ (Rest (ac , r)))
      where
        ac : A b
        ac = Iso.inv (isom b) (exact a)
germFIndSize tyCtor (GHRec A D) (GGuardedHRecCode c x pf) b (FC com k unk) œÜ = O1
germFIndSize tyCtor (GUnk A D) (GUnkCode c isom pf) b (FC com k unk) œÜ = O‚Üë (OLim (c b) helper)
  where
    helper : Approxed (Œª {{√¶}} ‚Üí El {{√¶ = √¶}} (c b))  ‚Üí Ord
    helper a =  germFIndSize tyCtor D pf b (FC com k Œª r ‚Üí unk (Rest ((ac , r)))) œÜ
      where
        ac : A b
        ac = Iso.inv (isom b) (exact a)
germFIndSize tyCtor (GUnk A D) (GGuardedUnkCode c x pf) b (FC com k unk) œÜ = O1


germIndSize {‚Ñì} tyCtor = wRecArg tyCtor Ord (Œª d ‚Üí germFIndSize tyCtor (dataGerm ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì) d) (dataGermIsCode ‚Ñì tyCtor d) tt) O1 O1





codeSize : ‚àÄ {‚Ñì} ‚Üí ‚ÑÇ ‚Ñì ‚Üí Ord
descSize : ‚àÄ  {‚Ñì} ‚Üí  {cI cB : ‚ÑÇ ‚Ñì} ‚Üí ‚ÑÇDesc cI cB ‚Üí Ord
elSize : ‚àÄ {{_ : √Ü}} {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí El c ‚Üí Ord
-- ‚ñπelSize : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí ‚ñπEl c ‚Üí Ord
‚ÅáSize : ‚àÄ {{ _ : √Ü}} {‚Ñì} ‚Üí ‚ÅáTy ‚Ñì ‚Üí Ord
CŒºSize : ‚àÄ {{_ : √Ü}} {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DName tyCtor ‚Üí ‚ÑÇDesc cI Cùüô) {i} ‚Üí ‚ÑÇŒº tyCtor D i ‚Üí Ord
CElSize : ‚àÄ {{ _ : √Ü }} {‚Ñì} {cI cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI cB) (E : DName tyCtor ‚Üí ‚ÑÇDesc cI Cùüô) {i b} ‚Üí ‚ÑÇDescEl D (‚ÑÇŒº tyCtor E) i b ‚Üí Ord
-- germFArgSize : ‚àÄ {‚Ñì} (tyCtor : CName) ‚Üí (D : GermDesc) ‚Üí (DataGermIsCode ‚Ñì D)
--   ‚Üí (cs : FContainer (interpGerm D) (W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì)) (‚ÅáTy ‚Ñì) tt)
--   ‚Üí ‚ñ° _ (Œª _ ‚Üí Ord) (tt , cs)
--   ‚Üí Ord

-- Marks each Unk thing as having size 1, so we'll have to always handle them with normal recursion
-- germArgSize : ‚àÄ {‚Ñì} (tyCtor : CName) ‚Üí  W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì) tt ‚Üí Ord
germDescSize : ‚àÄ {{_ : √Ü}} {‚Ñì} {B} ‚Üí  (D : GermCtor B)
  ‚Üí (DataGermIsCode ‚Ñì D)
  ‚Üí B
  ‚Üí Ord


germDescSize  GEnd GEndCode b = O1
germDescSize  (GArg A D) (GArgCode c isom pf) b = O‚Üë (omax (codeSize (c b)) (OLim (c b) (Œª a ‚Üí germDescSize D pf (b , Iso.inv (isom b) (exact a) ))))
germDescSize  (GArg A D) (GGuardedArgCode c x‚ÇÅ x‚ÇÇ) b = O1
germDescSize  (GRec D) (GRecCode isom pf) b = O‚Üë (germDescSize D pf b)
germDescSize  (GHRec A D) (GHRecCode c isom pf) b = O‚Üë (OLim (c b) (Œª a ‚Üí omax (codeSize (c b))( germDescSize  D pf b)))
germDescSize  (GHRec A D) (GGuardedHRecCode c x‚ÇÅ x‚ÇÇ) b = O1
germDescSize  (GUnk A D) (GUnkCode c x pf) b =  O‚Üë (OLim (c b) Œª a ‚Üí omax (codeSize (c b)) (germDescSize D pf b))
germDescSize  (GUnk A D) (GGuardedUnkCode c x pf) b = O1


-- germFArgSize tyCtor GEnd GEndCode (FC com k unk) œÜ = O1
-- germFArgSize tyCtor (GArg A D) (GArgCode c x‚ÇÅ x‚ÇÇ) (FC (a , com) k unk) œÜ = (codeSize c)
-- germFArgSize tyCtor (GArg A D) (GGuardedArgCode c x‚ÇÇ x‚ÇÉ) x œÜ = O1
-- germFArgSize tyCtor (GHRec A D) (GHRecCode c x‚ÇÇ x‚ÇÉ) x œÜ = O1 -- OLim c (Œª a ‚Üí germFArgSize tyCtor {!!} {!!} {!!} {!!})
-- germFArgSize tyCtor (GHRec A D) (GGuardedHRecCode c x‚ÇÇ x‚ÇÉ) x œÜ = O1
-- germFArgSize tyCtor (GUnk A D) (GUnkCode c x‚ÇÅ pf) x œÜ = {!!}
-- germFArgSize tyCtor (GUnk A D) (GGuardedUnkCode c x‚ÇÅ pf) x œÜ = O1

-- germArgSize {‚Ñì} tyCtor = wRecArg tyCtor Ord (Œª d ‚Üí germFArgSize tyCtor (dataGerm ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì) d) (dataGermIsCode ‚Ñì tyCtor d)) O1 O1

codeSize C‚Åá = O1
codeSize C‚Ñß = O1
codeSize Cùüò = O1
codeSize Cùüô = O1
codeSize CType = O1
codeSize (CŒ† dom cod) = O‚Üë (omax (codeSize dom) (OLim {{√¶ = Approx}} dom Œª x ‚Üí codeSize (cod x)))
codeSize (CŒ£ dom cod) = O‚Üë (omax (codeSize dom) ( OLim  {{√¶ = Approx}} dom Œª x ‚Üí codeSize (cod x)))
codeSize  (C‚â° c x y) = O‚Üë (omax (codeSize c) (omax (elSize {{Approx}} c x) (elSize {{Approx}}  c y)) )
codeSize (CŒº tyCtor c D x) with numCtors tyCtor
... | ‚Ñï.zero = O‚Üë OZ
... | ‚Ñï.suc n = O‚Üë (OLim {{√¶ = Approx}} (CFin n) Œª x ‚Üí descSize (D (fromCFin x)))

descSize {cI = c} (CEnd i) = O‚Üë (elSize {{Approx}} c i )
descSize {cB = cB} (CArg c D) = O‚Üë (OLim {{√¶ = Approx}} cB Œª b ‚Üí omax (codeSize (c b)) (descSize D))
descSize {cI = c} (CRec j D) = O‚Üë (omax (descSize D) (elSize {{Approx}} c j))
descSize {cI = cI} {cB = cB} (CHRec c j D) = O‚Üë (OLim {{√¶ = Approx}} cB Œª b ‚Üí OLim {{√¶ = Approx}} (c b) Œª a ‚Üí omax (descSize D) (elSize {{Approx}} cI (j b a)))


-- There are no codes of size zero
noCodeZero : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí ¬¨ (codeSize c ‚â°p OZ)
noCodeZero (CŒº tyCtor c D x) eq with numCtors tyCtor
noCodeZero (CŒº tyCtor c D x) () | ‚Ñï.zero
noCodeZero (CŒº tyCtor c D x) () | ‚Ñï.suc n


-- argLessLeft : ‚àÄ o1 o2 ‚Üí o1 <o O‚Üë (omax o1 o2)
-- argLessLeft o1 o2 = ‚â§o-sucMono omax-‚â§L

-- argLessRight : ‚àÄ o1 o2 ‚Üí o2 <o O‚Üë (omax o1 o2)
-- argLessRight o1 o2 = ‚â§o-sucMono omax-‚â§R







‚ÅáSize ‚Åá‚Åá = O1
‚ÅáSize ‚Åá‚Ñß = O1
‚ÅáSize ‚Åáùüô = O1
‚ÅáSize {‚Ñì = ‚Ñï.suc ‚Ñì} (‚ÅáType x) = O‚Üë  (codeSize x)
‚ÅáSize (‚ÅáŒ† f) = O‚Üë (OLim C‚Åá (Œª x ‚Üí ‚ÅáSize (f (transport (sym hollowEq) (next (exact x)))))) -- O‚Üë (OLim C‚Åá (Œª x ‚Üí LUnk √¶ ))
‚ÅáSize (‚ÅáŒ£ (x , y)) = O‚Üë (omax (‚ÅáSize x) (‚ÅáSize y))
‚ÅáSize (‚Åá‚â° (x ‚ä¢ .‚Åá‚Åá ‚âÖ .‚Åá‚Åá)) = O‚Üë (‚ÅáSize x)
‚ÅáSize {‚Ñì = ‚Ñì} (‚ÅáŒº tyCtor x) = O‚Üë ((germIndSize tyCtor x))
-- O1 --TODO does this cause problems?
-- CŒºSize (dataGermCode ‚Ñì tyCtor) (transport‚Åª (dataGermCodeEq ‚Ñì tyCtor) x)
  -- where
  --   cx : ‚ÑÇŒº1 tyCtor (dataGermCode ‚Ñì tyCtor) true
  --   cx =  transport‚Åª (dataGermCodeEq ‚Ñì tyCtor) x


elSize C‚Åá x = O‚Üë (‚ÅáSize x)
elSize C‚Ñß x = O1
elSize Cùüò x = O1
elSize Cùüô x = O1
elSize {suc ‚Ñì} CType x = O‚Üë (codeSize x)
elSize (CŒ† dom cod) f = O‚Üë (OLim dom (Œª x ‚Üí elSize (cod (approx x)) (f x))) -- (OLim dom Œª x ‚Üí elSize (cod (approx x)) (f ?))
elSize (CŒ£ dom cod) (x , y) = O‚Üë (omax (elSize dom (exact x)) (elSize (cod (approx x)) y))
elSize (C‚â° c x‚ÇÅ y) (x ‚ä¢ .x‚ÇÅ ‚âÖ .y) = O‚Üë (elSize {{Approx}} c x)
elSize (CŒº tyCtor cI D i) x = O‚Üë  (CŒºSize D (Iso.inv CŒºWiso x))

CŒºSize D (Cinit d x) = O‚Üë (CElSize (D d) D x)
CŒºSize D CŒº‚Åá = O1
CŒºSize D CŒº‚Ñß = O1

CElSize {cI = cI} .(CEnd j) E {i} (ElEnd j (w ‚ä¢ _ ‚âÖ _)) = elSize {{Approx}} cI w
CElSize {{√¶}} (CArg c D) E {b = b} (ElArg a x) = O‚Üë (omax (elSize {{√¶}} (c b) (exact a)) (CElSize D E x))
CElSize (CRec j D) E (ElRec x x‚ÇÅ) = O‚Üë (omax (CŒºSize E x) (CElSize D E x‚ÇÅ))
CElSize (CHRec c j D) E {b = b} (ElHRec f x) = O‚Üë (OLim (c b) Œª a ‚Üí omax (CŒºSize E (f a)) (CElSize D E x))

-- CElSize {cI = cI} .(CEnd j) E {i} (ElEnd j (w ‚ä¢ _ ‚âÖ _)) = elSize {{Approx}} cI w
-- CElSize {{√¶}} (CArg c D) E (ElArg a x) = O‚Üë (omax (elSize {{√¶}} c (exact a)) (CElSize (D (approx a)) E x))
-- CElSize (CRec j D) E (ElRec x x‚ÇÅ) = O‚Üë (omax (CŒºSize E x) (CElSize D E x‚ÇÅ))
-- CElSize (CHRec c j D) E (ElHRec f x) = O‚Üë (OLim c Œª a ‚Üí omax (CŒºSize E (f a)) (CElSize (D (approx a)) E (x a)))
-- We can't use guarded arguments in size calcs, that's why they're guarded
-- So we use the size at the error value
-- CElSize (CHGuard c D1 D2) E (ElHGuard x x‚ÇÅ) = O‚Üë (omax (CElSize D1 E (x (next (‚Ñß c)))) (CElSize D2 E x‚ÇÅ))







-- ‚Ñßsize : ‚àÄ {{_ : √Ü}} {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí elSize c (‚Ñß c) ‚â§o O1
-- ‚Ñßsize CodeModule.C‚Åá = {!!}
-- ‚Ñßsize CodeModule.C‚Ñß = {!!}
-- ‚Ñßsize CodeModule.Cùüò = {!!}
-- ‚Ñßsize CodeModule.Cùüô = {!!}
-- ‚Ñßsize CodeModule.CType = {!!}
-- ‚Ñßsize (CodeModule.CŒ† c cod) = {!!}
-- ‚Ñßsize (CodeModule.CŒ£ c cod) = {!!}
-- ‚Ñßsize (CodeModule.C‚â° c x y) = {!!}
-- ‚Ñßsize (CodeModule.CŒº tyCtor c D x) = {!!}
-- ‚Ñßsize C‚Åá = ‚â§o-sucMono (‚â§o-Z)
-- ‚Ñßsize C‚Ñß = ‚â§o-sucMono (‚â§o-Z)
-- ‚Ñßsize Cùüò = ‚â§o-sucMono (‚â§o-Z)
-- ‚Ñßsize Cùüô = ‚â§o-sucMono (‚â§o-Z)
-- ‚Ñßsize {suc ‚Ñì} CType = ‚â§o-sucMono (‚â§o-Z)
-- ‚Ñßsize (CŒ† c cod) = ‚â§o-sucMono (‚â§o-Z)
-- ‚Ñßsize ‚¶É Approx ‚¶Ñ (CodeModule.CŒ£ c cod) = ‚â§o-sucMono (‚â§o-Z)
-- ‚Ñßsize ‚¶É Exact ‚¶Ñ (CodeModule.CŒ£ c cod) =  ‚â§o-limiting (Œª x ‚Üí elSize (cod (approx x)) (‚Ñß (CŒ† c cod) x)) Œª k ‚Üí ‚Ñßsize (cod (approx k))
-- ‚Ñßsize (C‚â° c x y) = ‚Ñßsize {{Approx}} c
-- ‚Ñßsize (CŒº tyCtor c D x) = ‚â§o-refl _

codeSuc : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí OZ <o codeSize c
codeSuc C‚Åá = ‚â§o-refl _
codeSuc C‚Ñß = ‚â§o-refl _
codeSuc Cùüò = ‚â§o-refl _
codeSuc Cùüô = ‚â§o-refl _
codeSuc CType = ‚â§o-refl _
codeSuc (CŒ† c cod) = ‚â§o-sucMono ‚â§o-Z
codeSuc (CŒ£ c cod) = ‚â§o-sucMono ‚â§o-Z
codeSuc (C‚â° c x y) = ‚â§o-sucMono ‚â§o-Z
codeSuc (CŒº tyCtor c D x) with numCtors tyCtor
... | ‚Ñï.zero = ‚â§o-refl _
... | ‚Ñï.suc n = ‚â§o-sucMono ‚â§o-Z

codeMaxL : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí omax O1 (codeSize c) ‚â§o codeSize c
codeMaxL c = omax-LUB (codeSuc c) (‚â§o-refl _)

codeMaxR : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí omax (codeSize c) O1 ‚â§o codeSize c
codeMaxR c = omax-LUB (‚â§o-refl _) (codeSuc c)


‚Åásuc : ‚àÄ {{_ : √Ü}} {‚Ñì} (x : ‚ÅáTy ‚Ñì) ‚Üí O1 ‚â§o ‚ÅáSize x
‚Åásuc CodeModule.‚Åá‚Åá = ‚â§o-sucMono ‚â§o-Z
‚Åásuc CodeModule.‚Åá‚Ñß = ‚â§o-sucMono ‚â§o-Z
‚Åásuc CodeModule.‚Åáùüô = ‚â§o-sucMono ‚â§o-Z
‚Åásuc {suc ‚Ñì} (CodeModule.‚ÅáType x) = ‚â§o-sucMono ‚â§o-Z
‚Åásuc (CodeModule.‚ÅáŒ† x) = ‚â§o-sucMono ‚â§o-Z
‚Åásuc (CodeModule.‚ÅáŒ£ x) = ‚â§o-sucMono ‚â§o-Z
‚Åásuc (CodeModule.‚Åá‚â° (x ‚ä¢ .‚Åá‚Åá ‚âÖ .‚Åá‚Åá)) = ‚â§o-sucMono ‚â§o-Z
‚Åásuc (CodeModule.‚ÅáŒº tyCtor x) = ‚â§o-sucMono ‚â§o-Z

open import Cubical.Data.Maybe


dataGermDescSize : {{_ : √Ü}} ‚Üí ‚Ñï ‚Üí CName ‚Üí Ord
dataGermDescSize ‚Ñì tyCtor with numCtors tyCtor in deq
... | ‚Ñï.zero = O1
... | ‚Ñï.suc n = OLim {{√¶ = Approx}} (CFin n) Œª x ‚Üí
  let
    d : DName tyCtor
    d = pSubst Fin (pSym deq) (fromCFin x)
  in germDescSize (dataGerm ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì) d) (dataGermIsCode ‚Ñì tyCtor d) tt


record DataGermsSmaller : Set2 where
  field
    dataGermSmaller : ‚àÄ {{_ : √Ü}} (‚Ñì) tyCtor {pars : ApproxEl (Params ‚Ñì tyCtor)} {indices} ‚Üí dataGermDescSize ‚Ñì tyCtor ‚â§o descSize (descFor ‚Ñì tyCtor pars indices)

open DataGermsSmaller {{...}} public

-- elSizeLowerBound : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí (x : El c) ‚Üí O1 ‚â§o elSize c x
-- ‚ÅáSizeLowerBound : ‚àÄ {‚Ñì} (x : ‚ÅáTy ‚Ñì) ‚Üí O1 ‚â§o ‚ÅáSize x
-- codeSizeLowerBound : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí O1 ‚â§o codeSize c

-- codeSizeLowerBound C‚Åá = ‚â§o-refl _
-- codeSizeLowerBound C‚Ñß = ‚â§o-refl _
-- codeSizeLowerBound Cùüò = ‚â§o-refl _
-- codeSizeLowerBound Cùüô = ‚â§o-refl _
-- codeSizeLowerBound CType = ‚â§o-refl _
-- codeSizeLowerBound (CŒ† c cod) = ‚â§o-sucMono ‚â§o-Z
-- codeSizeLowerBound (CŒ£ c cod) = ‚â§o-sucMono ‚â§o-Z
-- codeSizeLowerBound (C‚â° c x y) = ‚â§o-sucMono ‚â§o-Z
-- codeSizeLowerBound (CŒº tyCtor c D x) with numCtors tyCtor
-- ... | ‚Ñï.zero = ‚â§o-refl _
-- ... | ‚Ñï.suc n = ‚â§o-sucMono ‚â§o-Z

-- elSizeLowerBound C‚Åá x = ‚ÅáSizeLowerBound x
-- elSizeLowerBound C‚Ñß x = ‚â§o-refl _
-- elSizeLowerBound Cùüò x = ‚â§o-refl _
-- elSizeLowerBound Cùüô x = ‚â§o-refl _
-- elSizeLowerBound {suc ‚Ñì} CType x = codeSizeLowerBound x
-- elSizeLowerBound (CŒ† dom cod) f = underLim O1 (Œª x ‚Üí elSize (cod (approx x)) (f x)) (Œª k ‚Üí elSizeLowerBound (cod k) (f k))
-- elSizeLowerBound (CŒ£ c cod) (x , y) = ‚â§o-trans (elSizeLowerBound c x) omax-‚â§L
-- elSizeLowerBound (C‚â° c x‚ÇÅ y) (x ‚ä¢ _ ‚âÖ _) = elSizeLowerBound c x
-- elSizeLowerBound (CŒº tyCtor c D x‚ÇÅ) (Wsup x) = ‚â§o-sucMono ‚â§o-Z
-- elSizeLowerBound (CŒº tyCtor c D x‚ÇÅ) W‚Ñß = ‚â§o-sucMono ‚â§o-Z
-- elSizeLowerBound (CŒº tyCtor c D x‚ÇÅ) W‚Åá = ‚â§o-sucMono ‚â§o-Z

-- ‚ÅáSizeLowerBound ‚Åá‚Åá = ‚â§o-refl _
-- ‚ÅáSizeLowerBound ‚Åá‚Ñß = ‚â§o-refl _
-- ‚ÅáSizeLowerBound ‚Åáùüô = ‚â§o-refl _
-- ‚ÅáSizeLowerBound {suc ‚Ñì} (‚ÅáType x) = codeSizeLowerBound x
-- ‚ÅáSizeLowerBound (‚ÅáŒ† x) = ‚â§o-sucMono ‚â§o-Z
-- ‚ÅáSizeLowerBound (‚ÅáŒ£ x) = ‚â§o-sucMono ‚â§o-Z
-- ‚ÅáSizeLowerBound (‚Åá‚â° (x ‚ä¢ _ ‚âÖ _)) = ‚â§o-sucMono ‚â§o-Z
-- ‚ÅáSizeLowerBound (‚ÅáŒº tyCtor x) = ‚â§o-sucMono ‚â§o-Z

-- onePlusCode-L : ‚àÄ {‚Ñì} {c1 c2 : ‚ÑÇ ‚Ñì} ‚Üí codeSize c1 <o ((codeSize c1) +o (codeSize c2))
-- onePlusCode-L {c1 = c1} {c2} with (o1 , pf1) ‚Üê codeSuc c1 | (o2 , pf2) ‚Üê codeSuc c2 rewrite pf1 rewrite pf2 = ‚â§o-sucMono (‚â§o-trans (‚â§o-sucMono (+o-‚â§-L o1 o2)) (oplus-suc-swap o1 o2))

-- onePlusCode-R : ‚àÄ {‚Ñì} {c1 c2 : ‚ÑÇ ‚Ñì} ‚Üí codeSize c2 <o ((codeSize c1) +o (codeSize c2))
-- onePlusCode-R {c1 = c1} {c2} with (o1 , pf1) ‚Üê codeSuc c1 | (o2 , pf2) ‚Üê codeSuc c2 rewrite pf1 rewrite pf2 = ‚â§o-sucMono (‚â§o-trans (‚â§o-sucMono (+o-‚â§-R o1 o2)) (oplus-suc-swap o1 o2))
