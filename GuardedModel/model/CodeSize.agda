
{-# OPTIONS --cubical --guarded #-}

-- open import Guarded
open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary
open import Cubical.Data.Equality using (_‚â°p_ ; reflp ; cong)
open import DecPEq
open import Cubical.Data.Nat
open import Cubical.Data.Sum
open import Cubical.Data.Bool
open import Cubical.Data.Equality
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import Inductives
open import GuardedAlgebra
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Data.Equality using (ptoc)

open import ApproxExact

open import InductiveCodes
open import Cubical.Foundations.Transport

open import DataGerm

-- Brouwer Tree ordinals
-- Based on the presentation by Kraus, Forsburg and Xu
-- https://arxiv.org/abs/2104.02549

-- The main difference is that we allow the limit over the elements of any code type, not just natural numbers

--TODO: don't make ‚Ñì module param
module CodeSize {{√¶ : √Ü}} {{_ : Datatypes}} {{_ : DataGermCodes}} where







open import Code
-- open import Head
open import Util

open import Ord -- ‚ÑÇ El ‚Ñß Cùüô refl



-- germSize {‚Ñì} tyCtor = wInd (Œª _ ‚Üí LargeOrd) (germDescFSize tyCtor (GArg (DName tyCtor) (dataGerm ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)))) LO1 LO1

CFin : ‚àÄ (n : ‚Ñï) ‚Üí ‚ÑÇ 0
CFin ‚Ñï.zero = C‚Ñß
CFin (‚Ñï.suc n) = CŒ£ Cùüô (Œª { (inl false) ‚Üí C‚Ñß ; (inl true) ‚Üí CFin n ; _ ‚Üí C‚Ñß})


fromCFin : ‚àÄ {n} ‚Üí El (CFin n) ‚Üí Fin (‚Ñï.suc n)
fromCFin {‚Ñï.zero} x = Fin.zero
fromCFin {‚Ñï.suc n} (false , rest) = Fin.zero
fromCFin {‚Ñï.suc n} (true , rest) = Fin.suc (fromCFin rest)




-- GermSize : ‚àÄ {‚Ñì} (tyCtor : CName) {i} ‚Üí ‚ÑÇŒº tyCtor (dataGermCode ‚Ñì tyCtor) i ‚Üí Ord
-- TreeSize : ‚àÄ {‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc {‚Ñì} Cùüô) {i} ‚Üí ‚ÑÇDescEl D (‚ÑÇŒº tyCtor (dataGermCode ‚Ñì tyCtor)) i ‚Üí Ord
-- GermSize {‚Ñì} tyCtor (Cinit d x) = O‚Üë (TreeSize (dataGermCode ‚Ñì tyCtor d) x)
-- GermSize tyCtor CŒº‚Åá = O1
-- GermSize tyCtor CŒº‚Ñß = O1

-- TreeSize .(CEnd j) {i} (ElEnd j (w ‚ä¢ _ ‚âÖ _)) = O1
-- TreeSize (CArg c D) (ElArg a x) = O‚Üë ( (TreeSize (D a) x))
-- TreeSize (CRec j D) (ElRec x x‚ÇÅ) = O‚Üë (omax (GermSize _ x) (TreeSize D x‚ÇÅ))
-- TreeSize (CHRec c j D) (ElHRec f x) = O‚Üë (OLim c Œª a ‚Üí omax (GermSize _ (f a)) (TreeSize (D a) (x a)))
-- -- We can't use guarded arguments in size calcs, that's why they're guarded
-- -- So we use the size at the error value
-- TreeSize (CHGuard c D1 D2) (ElHGuard x x‚ÇÅ) = O‚Üë (omax (TreeSize D1 (x (next (‚Ñß c)))) (TreeSize D2 x‚ÇÅ))



germFIndSize : ‚àÄ {‚Ñì} (tyCtor : CName) ‚Üí (D : GermDesc)
  ‚Üí (DataGermIsCode ‚Ñì D)
  ‚Üí (cs : FContainer (interpGerm D) (W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì)) (‚ÅáTy ‚Ñì) tt)
  ‚Üí ‚ñ° _ (Œª _ ‚Üí Ord) (tt , cs)
  ‚Üí Ord
germIndSize : ‚àÄ {‚Ñì} (tyCtor : CName) ‚Üí  W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì) tt ‚Üí Ord


germFIndSize tyCtor GEnd GEndCode (FC com k unk) œÜ = O1
germFIndSize tyCtor (GArg A D) (GArgCode c x‚ÇÅ x‚ÇÇ) (FC (a , com) k unk) œÜ = omax O1 (germFIndSize tyCtor (D a) (x‚ÇÇ a) (FC com k unk) œÜ )
-- germFIndSize tyCtor (GArg A D) (GArgCode c x‚ÇÅ x‚ÇÇ) (FC (a , com) k unk)  = omax (elSize c (transport x‚ÇÅ a)) (germFIndSize tyCtor (D a) (x‚ÇÇ a) (FC com k unk) )
germFIndSize tyCtor (GArg A D) (GGuardedArgCode c x‚ÇÅ x‚ÇÇ) (FC (a , com) k unk) œÜ =  (germFIndSize tyCtor (D a) (x‚ÇÇ a) (FC com k unk) œÜ )
germFIndSize tyCtor (GHRec A D) (GHRecCode c x‚ÇÅ x‚ÇÇ) (FC com k unk) œÜ  = O‚Üë (OLim c helper)
  where
   helper : El c ‚Üí Ord
   helper a = omax (œÜ (Rec b)) (germFIndSize tyCtor (D b) (x‚ÇÇ b) (FC (com b) (Œª r ‚Üí k (Rest (b , r))) (Œª r ‚Üí unk (b , r))) Œª r ‚Üí œÜ (Rest (b , r)) )
     where
       b = transport‚Åª x‚ÇÅ a
germFIndSize tyCtor (GHRec A D) (GGuardedHRecCode c x‚ÇÅ x‚ÇÇ) (FC com k unk) œÜ = O1
germFIndSize tyCtor (GUnk A D) (GUnkCode c x pf) (FC com k unk) œÜ = O‚Üë (OLim c helper)
  where
   helper : El c ‚Üí Ord
   helper a = omax O1 (germFIndSize tyCtor D pf (FC com k Œª r ‚Üí  unk (Rest (b , r))) œÜ)
     where
       b = transport‚Åª x a
germFIndSize tyCtor (GUnk A D) (GGuardedUnkCode c x pf) (FC com k unk) œÜ = O1


--Take a tree


germIndSize {‚Ñì} tyCtor = wRecArg tyCtor Ord (Œª d ‚Üí germFIndSize tyCtor (dataGerm ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì) d) (dataGermIsCode ‚Ñì tyCtor d)) O1 O1

codeSize : ‚àÄ {‚Ñì} ‚Üí ‚ÑÇ ‚Ñì ‚Üí Ord
descSize : ‚àÄ {‚Ñì} ‚Üí  {c : ‚ÑÇ ‚Ñì} ‚Üí ‚ÑÇDesc c ‚Üí Ord
elSize : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí El c ‚Üí Ord
-- ‚ñπelSize : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí ‚ñπEl c ‚Üí Ord
‚ÅáSize : ‚àÄ {‚Ñì} ‚Üí ‚ÅáTy ‚Ñì ‚Üí Ord
LUnk : ‚àÄ {‚Ñì} (√¶ : √Ü) ‚Üí L√Ü {{√¶}} (‚ÅáTy ‚Ñì) ‚Üí Ord
CŒºSize : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DName tyCtor ‚Üí ‚ÑÇDesc cI) {i} ‚Üí ‚ÑÇŒº tyCtor D i ‚Üí Ord
CElSize : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI) (E : DName tyCtor ‚Üí ‚ÑÇDesc cI) {i} ‚Üí ‚ÑÇDescEl D (‚ÑÇŒº tyCtor E) i ‚Üí Ord
-- germFArgSize : ‚àÄ {‚Ñì} (tyCtor : CName) ‚Üí (D : GermDesc) ‚Üí (DataGermIsCode ‚Ñì D)
--   ‚Üí (cs : FContainer (interpGerm D) (W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì)) (‚ÅáTy ‚Ñì) tt)
--   ‚Üí ‚ñ° _ (Œª _ ‚Üí Ord) (tt , cs)
--   ‚Üí Ord

-- Marks each Unk thing as having size 1, so we'll have to always handle them with normal recursion
-- germArgSize : ‚àÄ {‚Ñì} (tyCtor : CName) ‚Üí  W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì) tt ‚Üí Ord
germDescSize : ‚àÄ {‚Ñì} ‚Üí (D : GermDesc)
  ‚Üí (DataGermIsCode ‚Ñì D)
  ‚Üí Ord


germDescSize  GEnd GEndCode = O1
germDescSize  (GArg A D) (GArgCode c x‚ÇÅ x‚ÇÇ) = O‚Üë (omax (codeSize c) (OLim c (Œª a ‚Üí germDescSize  (D (transport‚Åª x‚ÇÅ a)) (x‚ÇÇ (transport‚Åª x‚ÇÅ a)))))
germDescSize  (GArg A D) (GGuardedArgCode c x‚ÇÅ x‚ÇÇ) = O1
germDescSize  (GHRec A D) (GHRecCode c x‚ÇÅ x‚ÇÇ) = O‚Üë (OLim c (Œª a ‚Üí omax (codeSize c)( germDescSize  (D (transport‚Åª x‚ÇÅ a)) (x‚ÇÇ (transport‚Åª x‚ÇÅ a)))))
germDescSize  (GHRec A D) (GGuardedHRecCode c x‚ÇÅ x‚ÇÇ) = O1
germDescSize  (GUnk A D) (GUnkCode c x pf) =  O‚Üë (OLim c Œª a ‚Üí omax (codeSize c) (germDescSize D pf))
germDescSize  (GUnk A D) (GGuardedUnkCode c x pf) = O1


-- germFArgSize tyCtor GEnd GEndCode (FC com k unk) œÜ = O1
-- germFArgSize tyCtor (GArg A D) (GArgCode c x‚ÇÅ x‚ÇÇ) (FC (a , com) k unk) œÜ = (codeSize c)
-- germFArgSize tyCtor (GArg A D) (GGuardedArgCode c x‚ÇÇ x‚ÇÉ) x œÜ = O1
-- germFArgSize tyCtor (GHRec A D) (GHRecCode c x‚ÇÇ x‚ÇÉ) x œÜ = O1 -- OLim c (Œª a ‚Üí germFArgSize tyCtor {!!} {!!} {!!} {!!})
-- germFArgSize tyCtor (GHRec A D) (GGuardedHRecCode c x‚ÇÇ x‚ÇÉ) x œÜ = O1
-- germFArgSize tyCtor (GUnk A D) (GUnkCode c x‚ÇÅ pf) x œÜ = {!!}
-- germFArgSize tyCtor (GUnk A D) (GGuardedUnkCode c x‚ÇÅ pf) x œÜ = O1

-- germArgSize {‚Ñì} tyCtor = wRecArg tyCtor Ord (Œª d ‚Üí germFArgSize tyCtor (dataGerm ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì) d) (dataGermIsCode ‚Ñì tyCtor d)) O1 O1

codeSize CodeModule.C‚Åá = O1
codeSize CodeModule.C‚Ñß = O1
codeSize CodeModule.Cùüò = O1
codeSize CodeModule.Cùüô = O1
codeSize CodeModule.CType = O1
codeSize (CodeModule.CŒ† dom cod) = O‚Üë (omax (codeSize dom) (OLim dom Œª x ‚Üí codeSize (cod (inl x))))
codeSize (CodeModule.CŒ£ dom cod) = O‚Üë (omax (codeSize dom) ( OLim dom Œª x ‚Üí codeSize (cod (inl x))))
codeSize (CodeModule.C‚â° c x y) = O‚Üë (omax (codeSize c) (omax (elSize c x) (elSize c y)) )
codeSize (CodeModule.CŒº tyCtor c D x) with numCtors tyCtor
... | ‚Ñï.zero = O‚Üë OZ
... | ‚Ñï.suc n = O‚Üë (OLim (CFin n) Œª x ‚Üí descSize (D (fromCFin x)))

descSize {c = c} (CodeModule.CEnd i) = O‚Üë (elSize c i )
descSize (CodeModule.CArg c D) = O‚Üë (OLim c (Œª a ‚Üí descSize (D (inl a))))
descSize {c = c} (CodeModule.CRec j D) = O‚Üë (omax (descSize D) (elSize c j))
descSize {c = cI} (CodeModule.CHRec c j D) = O‚Üë (OLim c Œª a ‚Üí omax (descSize (D (inl a))) (elSize cI (j a)))
-- descSize (CodeModule.CHGuard c D D‚ÇÅ) = O‚Üë (omax (descSize D) (descSize D‚ÇÅ))


-- There are no codes of size zero
noCodeZero : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí ¬¨ (codeSize c ‚â°p OZ)
noCodeZero (CodeModule.CŒº tyCtor c D x) eq with numCtors tyCtor
noCodeZero (CodeModule.CŒº tyCtor c D x) () | ‚Ñï.zero
noCodeZero (CodeModule.CŒº tyCtor c D x) () | ‚Ñï.suc n


-- argLessLeft : ‚àÄ o1 o2 ‚Üí o1 <o O‚Üë (omax o1 o2)
-- argLessLeft o1 o2 = ‚â§o-sucMono omax-‚â§L

-- argLessRight : ‚àÄ o1 o2 ‚Üí o2 <o O‚Üë (omax o1 o2)
-- argLessRight o1 o2 = ‚â§o-sucMono omax-‚â§R







‚ÅáSize CodeModule.‚Åá‚Åá = O1
‚ÅáSize CodeModule.‚Åá‚Ñß = O1
‚ÅáSize CodeModule.‚Åáùüô = O1
‚ÅáSize {‚Ñì = ‚Ñï.suc ‚Ñì} (CodeModule.‚ÅáType x) = O‚Üë  (codeSize x)
‚ÅáSize (CodeModule.‚ÅáŒ† f) = O‚Üë (OLim C‚Åá (Œª x ‚Üí ‚ÅáSize (f (transport (sym hollowEq) (next x))))) -- O‚Üë (OLim C‚Åá (Œª x ‚Üí LUnk √¶ ))
‚ÅáSize (CodeModule.‚ÅáŒ£ (x , y)) = O‚Üë (omax (‚ÅáSize x) (‚ÅáSize y))
‚ÅáSize (CodeModule.‚Åá‚â° (x ‚ä¢ .‚Åá‚Åá ‚âÖ .‚Åá‚Åá)) = O‚Üë (‚ÅáSize x)
‚ÅáSize {‚Ñì = ‚Ñì} (CodeModule.‚ÅáŒº tyCtor x) = ((germIndSize tyCtor x))
-- O1 --TODO does this cause problems?
-- CŒºSize (dataGermCode ‚Ñì tyCtor) (transport‚Åª (dataGermCodeEq ‚Ñì tyCtor) x)
  -- where
  --   cx : ‚ÑÇŒº1 tyCtor (dataGermCode ‚Ñì tyCtor) true
  --   cx =  transport‚Åª (dataGermCodeEq ‚Ñì tyCtor) x
LUnk Approx (Now x) = O‚Üë (‚ÅáSize x)
LUnk Exact x = O1


elSize CodeModule.C‚Åá x = ‚ÅáSize x
elSize CodeModule.C‚Ñß x = O1
elSize CodeModule.Cùüò x = O1
elSize CodeModule.Cùüô x = O1
elSize {suc ‚Ñì} CodeModule.CType x = (codeSize x)
elSize (CodeModule.CŒ† dom cod) f = (OLim dom Œª x ‚Üí elSize (cod (inl x)) (f x))
elSize (CodeModule.CŒ£ dom cod) (x , y) = (omax (elSize dom x) (elSize (cod (inl x)) y))
elSize (CodeModule.C‚â° c x‚ÇÅ y) (x ‚ä¢ .x‚ÇÅ ‚âÖ .y) =  (elSize c x)
elSize (CodeModule.CŒº tyCtor cI D i) x = CŒºSize D (transport‚Åª ‚ÑÇŒºW x)



CŒºSize D (Cinit d x) = O‚Üë (CElSize (D d) D x)
CŒºSize D CŒº‚Åá = O1
CŒºSize D CŒº‚Ñß = O1

CElSize {cI = cI} .(CEnd j) E {i} (ElEnd j (w ‚ä¢ _ ‚âÖ _)) = elSize cI w
CElSize (CArg c D) E (ElArg a x) = O‚Üë (omax (elSize c a) (CElSize (D (inl a)) E x))
CElSize (CRec j D) E (ElRec x x‚ÇÅ) = O‚Üë (omax (CŒºSize E x) (CElSize D E x‚ÇÅ))
CElSize (CHRec c j D) E (ElHRec f x) = O‚Üë (OLim c Œª a ‚Üí omax (CŒºSize E (f a)) (CElSize (D (inl a)) E (x a)))
-- We can't use guarded arguments in size calcs, that's why they're guarded
-- So we use the size at the error value
-- CElSize (CHGuard c D1 D2) E (ElHGuard x x‚ÇÅ) = O‚Üë (omax (CElSize D1 E (x (next (‚Ñß c)))) (CElSize D2 E x‚ÇÅ))







‚Ñßsize : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí elSize c (‚Ñß c) ‚â§o O1
‚Ñßsize CodeModule.C‚Åá = ‚â§o-refl _
‚Ñßsize CodeModule.C‚Ñß = ‚â§o-refl _
‚Ñßsize CodeModule.Cùüò = ‚â§o-refl _
‚Ñßsize CodeModule.Cùüô = ‚â§o-refl _
‚Ñßsize {suc ‚Ñì} CodeModule.CType = ‚â§o-refl _
‚Ñßsize (CodeModule.CŒ† c cod) = ‚â§o-limiting (Œª x ‚Üí elSize (cod (inl x)) (‚Ñß (CŒ† c cod) x)) Œª k ‚Üí ‚Ñßsize (cod (inl k))
‚Ñßsize (CodeModule.CŒ£ c cod) = omax-LUB (‚Ñßsize c) (‚Ñßsize (cod _))
‚Ñßsize (CodeModule.C‚â° c x y) = ‚Ñßsize c
‚Ñßsize (CodeModule.CŒº tyCtor c D x) = ‚â§o-refl _

codeSuc : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí OZ <o codeSize c
codeSuc CodeModule.C‚Åá = ‚â§o-refl _
codeSuc CodeModule.C‚Ñß = ‚â§o-refl _
codeSuc CodeModule.Cùüò = ‚â§o-refl _
codeSuc CodeModule.Cùüô = ‚â§o-refl _
codeSuc CodeModule.CType = ‚â§o-refl _
codeSuc (CodeModule.CŒ† c cod) = ‚â§o-sucMono ‚â§o-Z
codeSuc (CodeModule.CŒ£ c cod) = ‚â§o-sucMono ‚â§o-Z
codeSuc (CodeModule.C‚â° c x y) = ‚â§o-sucMono ‚â§o-Z
codeSuc (CodeModule.CŒº tyCtor c D x) with numCtors tyCtor
... | ‚Ñï.zero = ‚â§o-refl _
... | ‚Ñï.suc n = ‚â§o-sucMono ‚â§o-Z

codeMaxL : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí omax O1 (codeSize c) ‚â§o codeSize c
codeMaxL c = omax-LUB (codeSuc c) (‚â§o-refl _)

codeMaxR : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí omax (codeSize c) O1 ‚â§o codeSize c
codeMaxR c = omax-LUB (‚â§o-refl _) (codeSuc c)

-- codeSuc : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí Œ£[ o ‚àà Ord ](codeSize c ‚â°p O‚Üë o)
-- codeSuc CodeModule.C‚Åá = _ , reflp
-- codeSuc CodeModule.C‚Ñß = _ , reflp
-- codeSuc CodeModule.Cùüò = _ , reflp
-- codeSuc CodeModule.Cùüô = _ , reflp
-- codeSuc CodeModule.CType = _ , reflp
-- codeSuc (CodeModule.CŒ† c cod) = _ , reflp
-- codeSuc (CodeModule.CŒ£ c cod) = _ , reflp
-- codeSuc (CodeModule.C‚â° c x y) = _ , reflp
-- codeSuc (CodeModule.CŒº tyCtor c D x) with numCtors tyCtor
-- ... | ‚Ñï.zero = _ , reflp
-- ... | ‚Ñï.suc n = _ , reflp

-- -- elSizeLowerBound : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí (x : El c) ‚Üí O1 ‚â§o elSize c x
-- -- ‚ÅáSizeLowerBound : ‚àÄ {‚Ñì} (x : ‚ÅáTy ‚Ñì) ‚Üí O1 ‚â§o ‚ÅáSize x
-- -- codeSizeLowerBound : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí O1 ‚â§o codeSize c

-- -- codeSizeLowerBound C‚Åá = ‚â§o-refl _
-- -- codeSizeLowerBound C‚Ñß = ‚â§o-refl _
-- -- codeSizeLowerBound Cùüò = ‚â§o-refl _
-- -- codeSizeLowerBound Cùüô = ‚â§o-refl _
-- -- codeSizeLowerBound CType = ‚â§o-refl _
-- -- codeSizeLowerBound (CŒ† c cod) = ‚â§o-sucMono ‚â§o-Z
-- -- codeSizeLowerBound (CŒ£ c cod) = ‚â§o-sucMono ‚â§o-Z
-- -- codeSizeLowerBound (C‚â° c x y) = ‚â§o-sucMono ‚â§o-Z
-- -- codeSizeLowerBound (CŒº tyCtor c D x) with numCtors tyCtor
-- -- ... | ‚Ñï.zero = ‚â§o-refl _
-- -- ... | ‚Ñï.suc n = ‚â§o-sucMono ‚â§o-Z

-- -- elSizeLowerBound C‚Åá x = ‚ÅáSizeLowerBound x
-- -- elSizeLowerBound C‚Ñß x = ‚â§o-refl _
-- -- elSizeLowerBound Cùüò x = ‚â§o-refl _
-- -- elSizeLowerBound Cùüô x = ‚â§o-refl _
-- -- elSizeLowerBound {suc ‚Ñì} CType x = codeSizeLowerBound x
-- -- elSizeLowerBound (CŒ† dom cod) f = underLim O1 (Œª x ‚Üí elSize (cod x) (f x)) (Œª k ‚Üí elSizeLowerBound (cod k) (f k))
-- -- elSizeLowerBound (CŒ£ c cod) (x , y) = ‚â§o-trans (elSizeLowerBound c x) omax-‚â§L
-- -- elSizeLowerBound (C‚â° c x‚ÇÅ y) (x ‚ä¢ _ ‚âÖ _) = elSizeLowerBound c x
-- -- elSizeLowerBound (CodeModule.CŒº tyCtor c D x‚ÇÅ) (Wsup x) = ‚â§o-sucMono ‚â§o-Z
-- -- elSizeLowerBound (CodeModule.CŒº tyCtor c D x‚ÇÅ) W‚Ñß = ‚â§o-sucMono ‚â§o-Z
-- -- elSizeLowerBound (CodeModule.CŒº tyCtor c D x‚ÇÅ) W‚Åá = ‚â§o-sucMono ‚â§o-Z

-- -- ‚ÅáSizeLowerBound CodeModule.‚Åá‚Åá = ‚â§o-refl _
-- -- ‚ÅáSizeLowerBound CodeModule.‚Åá‚Ñß = ‚â§o-refl _
-- -- ‚ÅáSizeLowerBound CodeModule.‚Åáùüô = ‚â§o-refl _
-- -- ‚ÅáSizeLowerBound {suc ‚Ñì} (CodeModule.‚ÅáType x) = codeSizeLowerBound x
-- -- ‚ÅáSizeLowerBound (CodeModule.‚ÅáŒ† x) = ‚â§o-sucMono ‚â§o-Z
-- -- ‚ÅáSizeLowerBound (CodeModule.‚ÅáŒ£ x) = ‚â§o-sucMono ‚â§o-Z
-- -- ‚ÅáSizeLowerBound (CodeModule.‚Åá‚â° (x ‚ä¢ _ ‚âÖ _)) = ‚â§o-sucMono ‚â§o-Z
-- -- ‚ÅáSizeLowerBound (CodeModule.‚ÅáŒº tyCtor x) = ‚â§o-sucMono ‚â§o-Z

-- onePlusCode-L : ‚àÄ {‚Ñì} {c1 c2 : ‚ÑÇ ‚Ñì} ‚Üí codeSize c1 <o ((codeSize c1) +o (codeSize c2))
-- onePlusCode-L {c1 = c1} {c2} with (o1 , pf1) ‚Üê codeSuc c1 | (o2 , pf2) ‚Üê codeSuc c2 rewrite pf1 rewrite pf2 = ‚â§o-sucMono (‚â§o-trans (‚â§o-sucMono (+o-‚â§-L o1 o2)) (oplus-suc-swap o1 o2))

-- onePlusCode-R : ‚àÄ {‚Ñì} {c1 c2 : ‚ÑÇ ‚Ñì} ‚Üí codeSize c2 <o ((codeSize c1) +o (codeSize c2))
-- onePlusCode-R {c1 = c1} {c2} with (o1 , pf1) ‚Üê codeSuc c1 | (o2 , pf2) ‚Üê codeSuc c2 rewrite pf1 rewrite pf2 = ‚â§o-sucMono (‚â§o-trans (‚â§o-sucMono (+o-‚â§-R o1 o2)) (oplus-suc-swap o1 o2))
