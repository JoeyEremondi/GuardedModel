

{-# OPTIONS --cubical --guarded #-}



-- open import Guarded
open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary

open import Cubical.Data.Equality using (_‚â°p_ ; reflp ; cong)
open import DecPEq hiding (_‚àé)
open import Cubical.Data.Nat
open import Cubical.Data.Bool
open import Cubical.Data.Empty renaming (‚ä• to ùüò)
-- open import Cubical.Data.Prod
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import Inductives
open import GuardedAlgebra
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Data.Equality using (ptoc ; ctop)
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Transport
open import Cubical.Data.Sum
open import GuardedModality using (later-ext)

open import ApproxExact


--TODO: don't make ‚Ñì module param
module InductiveCodes {{√¶ : √Ü}} {{_ : Datatypes}} where

open import Code
-- open import Head
open import Util


-- More direct interpretation of inductive descriptions
-- Works because we ensure the paramter types are always codes, not types
-- So we can stay in Set
-- Also, Cubical Agda recognizes these as strictly decreasing, which is nice
data ‚ÑÇDescEl' {‚Ñì} (cI : ‚ÑÇ ‚Ñì) (X : El cI ‚Üí Set) :  ‚ÑÇDesc cI ‚Üí El cI ‚Üí Set where
  ElEnd : ‚àÄ { i} j ‚Üí i ‚âÖ j ‚Üí  ‚ÑÇDescEl' cI X (CEnd j) i
  ElArg : ‚àÄ {cA D i} ‚Üí (a : El cA) ‚Üí  ‚ÑÇDescEl' cI X  (D (inl a)) i ‚Üí ‚ÑÇDescEl' cI X  (CArg cA D) i
  ElRec : ‚àÄ {i} {j : El cI} {D : ‚ÑÇDesc cI} ‚Üí
    X j ‚Üí ‚ÑÇDescEl' cI X  D i ‚Üí ‚ÑÇDescEl' cI X  (CRec j D) i
  ElHRec : ‚àÄ {i} {cA : ‚ÑÇ ‚Ñì} {j : El cA ‚Üí El cI} {D : (El cA ‚äé ‚ñπEl cA) ‚Üí ‚ÑÇDesc cI}
    ‚Üí ((a : El cA) ‚Üí (X (j a)))
    ‚Üí ((a : El cA) ‚Üí (‚ÑÇDescEl' cI X  (D (inl a)) i))
    ‚Üí ‚ÑÇDescEl' cI X  (CHRec cA j D) i
  -- ElHGuard : ‚àÄ {i} {cA : ‚ÑÇ ‚Ñì} {D E : ‚ÑÇDesc cI}
  --   ‚Üí ((a : ‚ñπ (El cA)) ‚Üí (‚ÑÇDescEl' cI X D i) )
  --   ‚Üí ‚ÑÇDescEl' cI X E i
  --   ‚Üí ‚ÑÇDescEl' cI X (CHGuard cA D E) i



‚ÑÇDescEl : ‚àÄ  {‚Ñì} {cI : ‚ÑÇ ‚Ñì} ‚Üí ‚ÑÇDesc cI ‚Üí (El cI ‚Üí Set) ‚Üí El cI ‚Üí Set
‚ÑÇDescEl {cI = cI} D X i = ‚ÑÇDescEl' cI X D i

-- Fixed Points of inductive descriptions from codes
-- We always ensure the first layer of descriptions is data-constructors
-- Since we use these for comparing things for consistency

data ‚ÑÇŒº {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (tyCtor : CName) (D : DName tyCtor ‚Üí ‚ÑÇDesc cI) (i : El cI)  : Set where
  Cinit : (d : DName tyCtor) ‚Üí ‚ÑÇDescEl (D d) (‚ÑÇŒº tyCtor D) i ‚Üí ‚ÑÇŒº  tyCtor D i
  CŒº‚Åá CŒº‚Ñß :  ‚ÑÇŒº tyCtor D  i


‚ÑÇŒº1 : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (tyCtor : CName) (D : DName tyCtor ‚Üí ‚ÑÇDesc cI) (i : El cI)  ‚Üí Set
‚ÑÇŒº1 tyCtor D i = Œ£[ d ‚àà DName tyCtor ] ‚ÑÇDescEl (D d) (‚ÑÇŒº tyCtor D) i

WArg : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DName tyCtor ‚Üí ‚ÑÇDesc cI) ‚Üí El cI ‚Üí Set
WArg D = W (Arg Œª a ‚Üí interpDesc (D a)) Unit

‚ÑÇElFContainer : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {i : El cI} {X : El cI ‚Üí Set} ‚Üí {D : ‚ÑÇDesc cI} ‚Üí ‚ÑÇDescEl D X i ‚â° FContainer (interpDesc D) X Unit i
‚ÑÇElFContainerExt : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {i : El cI} {X : El cI ‚Üí Set} ‚Üí {D : ‚ÑÇDesc cI} ‚Üí ‚ÑÇDescEl D ‚â° Œª X i ‚Üí FContainer (interpDesc D) X Unit i

-- Univalence gives us that this version of codes
-- is identical to the version given by W-types
-- I don't know if we'll actually use this, but it was an important sanity check
-- Proof is at the bottom of this file
‚ÑÇŒºWext : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì}  {tyCtor : CName} {D : DName tyCtor ‚Üí ‚ÑÇDesc cI}  ‚Üí
  ‚ÑÇŒº tyCtor D ‚â° WArg D


‚ÑÇŒºW : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì}  {tyCtor : CName} {D : DName tyCtor ‚Üí ‚ÑÇDesc cI} {i : El cI}  ‚Üí
  ‚ÑÇŒº tyCtor D i ‚â° WArg D i




------------------------------------------
-- Machinery for the isomorphism between W types and descriptions


fromCElCommand : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI) {i : El cI} {X : El cI ‚Üí Set}
  ‚Üí ‚ÑÇDescEl  D X i
  ‚Üí CommandD D i
fromCElCommand .(CEnd j) (ElEnd j x) = x
fromCElCommand (CArg _ D) (ElArg a x) = a , fromCElCommand (D (inl a)) x
fromCElCommand (CRec _ D) (ElRec x x‚ÇÅ) = fromCElCommand D x‚ÇÅ
fromCElCommand (CHRec c j D) (ElHRec x f) a = fromCElCommand (D (inl a)) (f a)
-- fromCElCommand (CHGuard c D1 D2) (ElHGuard f x) = (Œª a ‚Üí fromCElCommand D1 (f a)) , (fromCElCommand D2 x)



fromCElF : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI) {X : El cI ‚Üí Set} {i : El cI}
  ‚Üí (x : ‚ÑÇDescEl  D X i)
  ‚Üí (r : ResponseD D (fromCElCommand D x))
      ‚Üí X (inextD D (fromCElCommand D x) r)
fromCElF (CArg c D) (ElArg a x) r = fromCElF (D (inl a)) x r
fromCElF (CRec j D) (ElRec x x‚ÇÅ) (Rec _) = x
fromCElF (CRec i D) (ElRec x x‚ÇÅ) (Rest x‚ÇÇ) = fromCElF D x‚ÇÅ x‚ÇÇ
fromCElF (CHRec c i D) (ElHRec f1 f2) (Rec a) = f1 a
fromCElF (CHRec c i D) (ElHRec f1 f2) (Rest (a , r)) = fromCElF (D (inl a)) (f2 a) r
-- fromCElF (CHGuard c D D2) (ElHGuard x x‚ÇÅ) (GuardedArg (a , r)) = fromCElF D (x a) r
-- fromCElF (CHGuard c D D2) (ElHGuard x x‚ÇÅ) (GRest r) = fromCElF D2 x‚ÇÅ r



fromCŒº : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} {D : DName tyCtor ‚Üí ‚ÑÇDesc cI} {i : El cI}
  ‚Üí ‚ÑÇŒº tyCtor D i
  ‚Üí WArg D i
fromCEl : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI) (E : DName tyCtor ‚Üí ‚ÑÇDesc cI) {i : El cI}
  ‚Üí (x : ‚ÑÇDescEl  D (‚ÑÇŒº tyCtor E) i)
  ‚Üí (r : ResponseD D (fromCElCommand D x))
      ‚Üí W (Arg Œª d ‚Üí interpDesc (E d)) Unit (inextD D (fromCElCommand D x) r )


fromCŒº {D = D} (Cinit d x) = Wsup (FC (d , fromCElCommand (D d) x) (fromCEl (D d) D x) (Œª ()))
fromCŒº CŒº‚Åá = W‚Åá
fromCŒº CŒº‚Ñß = W‚Ñß

fromCEl (CArg c D) E (ElArg a x) r = fromCEl (D (inl a)) E x r
fromCEl (CRec i D) E (ElRec x x‚ÇÅ) (Rec _) = fromCŒº x
fromCEl (CRec i D) E (ElRec x x‚ÇÅ) (Rest x‚ÇÇ) = fromCEl D E x‚ÇÅ x‚ÇÇ
fromCEl (CHRec c i D) E (ElHRec f1 f2) (Rec a) = fromCŒº (f1 a)
fromCEl (CHRec c i D) E (ElHRec f1 f2) (Rest (a , r)) = fromCEl (D (inl a)) E (f2 a) r
-- fromCEl (CHGuard c D D2) E (ElHGuard x x‚ÇÅ) (GuardedArg (a , r)) = fromCEl D E (x a) r
-- fromCEl (CHGuard c D D2) E (ElHGuard x x‚ÇÅ) (GRest r) = fromCEl D2 E x‚ÇÅ r



toCEl :
  ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI) (E : DName tyCtor ‚Üí ‚ÑÇDesc cI) {ix : El cI} ‚Üí
  (com : CommandD D ix) ‚Üí
  (k : (r : ResponseD D com ) ‚Üí
                  WArg E (inextD D com r))
  ‚Üí ‚ñ° {X = WArg E} (interpDesc D )
      (Œª (i , x) ‚Üí ‚ÑÇŒº tyCtor E i)
      (ix , FC com k (Œª _ ‚Üí tt))
  -- FContainer (interpDesc D) (Œª i ‚Üí W (interpDesc E) Unit i √ó ‚ÑÇŒº E i) Unit ix
  ‚Üí (‚ÑÇDescEl  D (‚ÑÇŒº tyCtor E) ix)


toCŒº : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DName tyCtor ‚Üí ‚ÑÇDesc cI) {ix : El cI}
  ‚Üí (x : WArg D ix)
  ‚Üí ‚ÑÇŒº tyCtor D ix
toCŒº D = wInd (Œª (i , _) ‚Üí ‚ÑÇŒº _ D i) (Œª {i} (FC (d , com) k _) œÜ ‚Üí Cinit d (toCEl (D d) D com k œÜ)) CŒº‚Ñß CŒº‚Åá


toCEl (CEnd i) E wit k œÜ = ElEnd i wit
toCEl (CArg c D) E (a , com) k œÜ = ElArg a (toCEl (D (inl a)) E com k œÜ)
toCEl (CRec j D) E com k œÜ = ElRec (œÜ (Rec tt)) (toCEl D E com (Œª r ‚Üí k (Rest r)) Œª r ‚Üí œÜ (Rest r))
toCEl (CHRec c j D) E com k œÜ = ElHRec (Œª a ‚Üí œÜ (Rec a)) (Œª a ‚Üí toCEl (D (inl a)) E (com a) (Œª r ‚Üí k (Rest (a , r))) Œª r ‚Üí œÜ (Rest (a , r)))
-- toCEl (CHGuard c D D‚ÇÅ) E (com1 , com2) k œÜ = ElHGuard (Œª a ‚Üí toCEl D E (com1 a) (Œª r ‚Üí k (GuardedArg (a , r))) Œª r ‚Üí œÜ (GuardedArg (a , r))) (toCEl D‚ÇÅ E com2 (Œª r ‚Üí k (GRest r)) Œª r ‚Üí œÜ (GRest r))


toCElF :
  ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {X : El cI ‚Üí Set} (D : ‚ÑÇDesc cI)  {ix : El cI} ‚Üí
  (com : CommandD D ix) ‚Üí
  (k : (r : ResponseD D com ) ‚Üí X (inextD D com r))
  ‚Üí (‚ÑÇDescEl  D X ix)
toCElF (CEnd i) wit k = ElEnd i wit
toCElF (CArg c D) (a , com) k = ElArg a (toCElF (D (inl a)) com k)
toCElF (CRec j D) com k = ElRec (k (Rec tt)) (toCElF D com (Œª r ‚Üí k (Rest r)))
toCElF (CHRec c j D) com k = ElHRec (Œª a ‚Üí k (Rec a)) (Œª a ‚Üí toCElF (D (inl a)) (com a) (Œª r ‚Üí k (Rest (a , r))))
-- toCElF (CHGuard c D D‚ÇÅ) (com1 , com2) k = ElHGuard (Œª a ‚Üí toCElF D (com1 a) (Œª r ‚Üí k (GuardedArg (a , r))) ) (toCElF D‚ÇÅ com2 (Œª r ‚Üí k (GRest r)) )


fromToCElCommand :
  ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI) (E : DName tyCtor ‚Üí ‚ÑÇDesc cI ) {ix : El cI}
  ‚Üí (com : CommandD D ix)
  ‚Üí (k : (r : ResponseD D com ) ‚Üí
                  WArg E (inextD D com r))
  ‚Üí fromCElCommand D (toCEl D E com k Œª r ‚Üí toCŒº E (k r)) ‚â° com
fromToCElCommand (CEnd i) E com k   = refl
fromToCElCommand (CArg c D) E (a , com) k   = Œ£PathP (refl , fromToCElCommand (D (inl a)) E com k  )
fromToCElCommand (CRec j D) E com k   = fromToCElCommand D E com (Œª r ‚Üí k (Rest r))
fromToCElCommand (CHRec c j D) E com k   = funExt Œª a ‚Üí fromToCElCommand (D (inl a)) E (com a) (Œª r ‚Üí k (Rest (a , r)))
-- fromToCElCommand (CHGuard c D D‚ÇÅ) E (com1 , com2) k   =
  -- ‚â°-√ó
  --   (funExt (Œª a ‚Üí fromToCElCommand D E (com1 a) (Œª r ‚Üí k (GuardedArg (a , r)))  ))
  --   (fromToCElCommand D‚ÇÅ E com2 (Œª r ‚Üí k (GRest r))  )


fromToCElCommandF :
  ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI) {X : El cI ‚Üí Set}  {ix : El cI}
  ‚Üí (com : CommandD D ix)
  ‚Üí (k : (r : ResponseD D com ) ‚Üí
                  X (inextD D com r))
  ‚Üí fromCElCommand D (toCElF {X = X} D com k) ‚â° com
fromToCElCommandF (CEnd i) com k   = refl
fromToCElCommandF (CArg c D) (a , com) k   = Œ£PathP (refl , fromToCElCommandF (D (inl a)) com k  )
fromToCElCommandF (CRec j D) com k   = fromToCElCommandF D com (Œª r ‚Üí k (Rest r))
fromToCElCommandF (CHRec c j D) com k   = funExt Œª a ‚Üí fromToCElCommandF (D (inl a)) (com a) (Œª r ‚Üí k (Rest (a , r)))
-- fromToCElCommandF (CHGuard c D D‚ÇÅ) (com1 , com2) k   =
  -- ‚â°-√ó
  --   (funExt (Œª a ‚Üí fromToCElCommandF D (com1 a) (Œª r ‚Üí k (GuardedArg (a , r)))  ))
  --   (fromToCElCommandF D‚ÇÅ com2 (Œª r ‚Üí k (GRest r))  )

fromToCEl :
  ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI) (E : DName tyCtor ‚Üí ‚ÑÇDesc cI) {ix : El cI}
  ‚Üí (com : CommandD D ix)
  ‚Üí (k : (r : ResponseD D com ) ‚Üí
                  WArg E (inextD D com r))
  ‚Üí (œÜ‚ÇÇ : ‚ñ° {X = WArg E} (interpDesc D)
      (Œª (i , x) ‚Üí
         fromCŒº (toCŒº E x) ‚â° x)
      (ix , FC com k (Œª _ ‚Üí tt)))
  ‚Üí PathP (Œª ùïö ‚Üí let com = fromToCElCommand D E com k  ùïö in (r : ResponseD D com) ‚Üí WArg E (inextD D com r))
  (fromCEl D E (toCEl D E com k Œª r ‚Üí toCŒº E (k r))) k
fromToCEl (CodeModule.CEnd i) E com k  œÜ = funExt (Œª ())
fromToCEl (CodeModule.CArg c D) E (a , com) k  œÜ  = fromToCEl (D (inl a)) E com k œÜ
fromToCEl (CodeModule.CRec j D) E com k  œÜ ùïö (Rec tt) = œÜ (Rec tt) ùïö
fromToCEl (CodeModule.CRec j D) E com k  œÜ ùïö (Rest r) = fromToCEl D E com (Œª r ‚Üí k (Rest r)) (Œª r ‚Üí œÜ (Rest r)) ùïö r
fromToCEl (CodeModule.CHRec c j D) E com k œÜ ùïö (Rec a) = œÜ (Rec a) ùïö
fromToCEl (CodeModule.CHRec c j D) E com k œÜ ùïö (Rest (a , r)) = fromToCEl (D (inl a)) E (com a) (Œª r ‚Üí k (Rest (a , r))) (Œª r ‚Üí œÜ (Rest (a , r))) ùïö r
-- fromToCEl (CodeModule.CHGuard c D D‚ÇÅ) E (com1 , com2) k œÜ ùïö (GuardedArg (a , r)) = fromToCEl D E (com1 a) (Œª r ‚Üí k (GuardedArg (a , r))) (Œª r ‚Üí œÜ (GuardedArg (a , r))) ùïö r
-- fromToCEl (CodeModule.CHGuard c D D‚ÇÅ) E (com1 , com2) k œÜ ùïö (GRest r) = fromToCEl D‚ÇÅ E com2 (Œª r ‚Üí k (GRest r)) (Œª r ‚Üí œÜ (GRest r)) ùïö r


fromToCŒº :  ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DName tyCtor ‚Üí ‚ÑÇDesc cI) {ix : El cI}
  ‚Üí (x : WArg D ix)
  ‚Üí fromCŒº (toCŒº D x) ‚â° x
fromToCŒº {cI = cI} D = wInd
  (Œª(ix , x) ‚Üí fromCŒº (toCŒº D x) ‚â° x) helper refl refl
  where
    helper : ‚àÄ {i : El cI} (cs : FContainer (Arg (Œª d ‚Üí interpDesc (D d))) (WArg D) Unit i)  ‚Üí  (œÜ : _) ‚Üí fromCŒº (toCŒº D (Wsup cs)) ‚â° Wsup cs
    helper {i} (FC (d , com) k _) œÜ ùïö =
      Wsup (FC
        (d , fromToCElCommand (D d) D com k ùïö)
        (fromToCEl (D d) D com k œÜ ùïö)
        Œª _ ‚Üí tt)


toFromCŒº : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} {D : DName tyCtor ‚Üí ‚ÑÇDesc cI} {i : El cI}
  ‚Üí (x : ‚ÑÇŒº tyCtor D i)
  ‚Üí toCŒº D (fromCŒº x) ‚â° x
toFromCEl : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI) (E : DName tyCtor ‚Üí ‚ÑÇDesc cI) {i : El cI}
  ‚Üí (x : ‚ÑÇDescEl  D (‚ÑÇŒº tyCtor E) i)
  ‚Üí toCEl D E (fromCElCommand D x) (fromCEl D E x) (Œª r ‚Üí toCŒº E (fromCEl D E x r)) ‚â° x
  -- ‚Üí toCEl D E (fromCElCommand D x) (Œª r ‚Üí fromCEl D E x r , toCŒº E (fromCEl D E x r)) ‚â° x

toFromCŒº (Cinit d x) = cong (Cinit d) (toFromCEl _ _ x)
toFromCŒº CŒº‚Åá = refl
toFromCŒº CŒº‚Ñß = refl

toFromCEl .(CEnd j) E (ElEnd j x) = refl
toFromCEl (CArg c D) E (ElArg a x) = cong (ElArg a) (toFromCEl (D (inl a)) E x)
toFromCEl (CRec j D) E (ElRec x x‚ÇÅ) = cong‚ÇÇ ElRec (toFromCŒº x) (toFromCEl D E x‚ÇÅ)
toFromCEl (CHRec c j D) E (ElHRec x x‚ÇÅ) = cong‚ÇÇ ElHRec (funExt (Œª a ‚Üí toFromCŒº (x a))) (funExt Œª a ‚Üí toFromCEl (D (inl a)) E (x‚ÇÅ a))
-- toFromCEl (CHGuard c D1 D2) E (ElHGuard x x‚ÇÅ) = cong‚ÇÇ ElHGuard (funExt Œª a ‚Üí toFromCEl D1 E (x a)) (toFromCEl D2 E x‚ÇÅ)



fromToCElF :
  ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI) {X : El cI ‚Üí Set} {ix : El cI}
  ‚Üí (com : CommandD D ix)
  ‚Üí (k : (r : ResponseD D com ) ‚Üí
                  X (inextD D com r))
  ‚Üí PathP (Œª ùïö ‚Üí let com = fromToCElCommandF D com k  ùïö in (r : ResponseD D com) ‚Üí X (inextD D com r))
    (fromCElF D {X = X} (toCElF {X = X} D com k)) k
fromToCElF (CodeModule.CEnd i) com k  = funExt (Œª ())
fromToCElF (CodeModule.CArg c D) (a , com) k   = fromToCElF (D (inl a)) com k
fromToCElF (CodeModule.CRec j D) com k  ùïö (Rec tt) = k (Rec tt)
fromToCElF (CodeModule.CRec j D) com k  ùïö (Rest r) = fromToCElF D com (Œª r ‚Üí k (Rest r))  ùïö r
fromToCElF (CodeModule.CHRec c j D) com k ùïö (Rec a) = k (Rec a)
fromToCElF (CodeModule.CHRec c j D) com k ùïö (Rest (a , r)) = fromToCElF (D (inl a)) (com a) (Œª r ‚Üí k (Rest (a , r)))  ùïö r
-- fromToCElF (CodeModule.CHGuard c D D‚ÇÅ) (com1 , com2) k ùïö (GuardedArg (a , r)) = fromToCElF D (com1 a) (Œª r ‚Üí k (GuardedArg (a , r)))  ùïö r
-- fromToCElF (CodeModule.CHGuard c D D‚ÇÅ) (com1 , com2) k ùïö (GRest r) = fromToCElF D‚ÇÅ com2 (Œª r ‚Üí k (GRest r))  ùïö r


toFromCElF : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI) {X : El cI ‚Üí Set} {i : El cI}
  ‚Üí (x : ‚ÑÇDescEl  D X i)
  ‚Üí toCElF D (fromCElCommand D x) (fromCElF D x) ‚â° x
toFromCElF .(CEnd j) (ElEnd j x) = refl
toFromCElF (CArg c D) (ElArg a x) = cong (ElArg a) (toFromCElF (D (inl a)) x)
toFromCElF (CRec j D) (ElRec x x‚ÇÅ) = cong (ElRec x) (toFromCElF D x‚ÇÅ)
toFromCElF (CHRec c j D) (ElHRec x x‚ÇÅ) = cong (ElHRec x) (funExt Œª a ‚Üí toFromCElF (D (inl a)) (x‚ÇÅ a))
-- toFromCElF (CHGuard c D1 D2) (ElHGuard x x‚ÇÅ) = cong‚ÇÇ ElHGuard (funExt Œª a ‚Üí toFromCElF D1 (x a)) (toFromCElF D2 x‚ÇÅ)


‚ÑÇŒºW = isoToPath (iso fromCŒº (toCŒº _) (fromToCŒº _) toFromCŒº)

‚ÑÇŒºWext = funExt Œª i ‚Üí ‚ÑÇŒºW {i = i}

‚ÑÇElFContainer {D = D} = isoToPath (iso
  (Œª x ‚Üí FC (fromCElCommand D x) (fromCElF D x) (Œª _ ‚Üí tt))
  (Œª (FC com k _) ‚Üí toCElF D com k)
  (Œª (FC com k unk) ùïö ‚Üí FC (fromToCElCommandF D com k ùïö) (fromToCElF D com k ùïö) unk)
  (toFromCElF D))

‚ÑÇElFContainerExt = funExt Œª X ‚Üí funExt (Œª i ‚Üí ‚ÑÇElFContainer)


-- ‚ÑÇŒºWProp : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì}  {tyCtor : CName} {D : DName tyCtor ‚Üí ‚ÑÇDesc cI}  ‚Üí
--    W (Arg (Œª a ‚Üí interpDesc (D (inl a)))) Unit ‚â°p ‚ÑÇŒº tyCtor D
-- ‚ÑÇŒºWProp = ctop (sym ‚ÑÇŒºWext)


-- open import Agda.Builtin.Equality
-- open import Agda.Builtin.Equality.Rewrite
-- {-# REWRITE ‚ÑÇŒºWProp #-}
