

{-# OPTIONS --cubical --guarded --rewriting #-}



-- open import Guarded
open import Cubical.Data.Maybe as Maybe
open import Level
open import Cubical.Relation.Nullary

open import DecPEq
open import Cubical.Data.Nat
open import Cubical.Data.Bool
open import Cubical.Data.Empty renaming (‚ä• to ùüò)
-- open import Cubical.Data.Prod
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import Inductives
open import GuardedAlgebra
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Transport
open import Cubical.Data.Sum as Sum
open import GuardedModality using (later-ext)

open import ApproxExact
open import Code


--TODO: don't make ‚Ñì module param
module WMuConversion {{_ : DataTypes}} {{_ : DataGerms}}  where

-- We only ever attach a size to the approximate part of a computation
-- and we only need this conversion for making a size
private
  instance
    approx√Ü : √Ü
    approx√Ü = Approx



-- More direct interpretation of inductive descriptions
-- Works because we ensure the paramter types are always codes, not types
-- So we can stay in Set
-- Also, Cubical Agda recognizes these as strictly decreasing, which is nice
data ‚ÑÇDescEl' {‚Ñì} (cI : ‚ÑÇ ‚Ñì) (X : ApproxEl cI ‚Üí Set) : {sig : IndSig} (cB : ‚ÑÇ ‚Ñì) ‚Üí  ‚ÑÇDesc cI cB sig ‚Üí ApproxEl cI ‚Üí ApproxEl cB ‚Üí Set where
  ElEnd : ‚àÄ {cB b i} j ‚Üí i ‚âÖ j ‚Üí  ‚ÑÇDescEl' cI X cB (CEnd j) i b
  ElArg : ‚àÄ {cB cA sig i b} {D : ‚ÑÇDesc cI _ sig} ‚Üí (a : El (cA b) ) ‚Üí  ‚ÑÇDescEl' cI X (CŒ£ cB cA)  D i (b , approx a) ‚Üí ‚ÑÇDescEl' cI X cB (CArg cA D _ reflp) i b
  ElRec : ‚àÄ {cB b i sig} {j : ApproxEl cI} {D : ‚ÑÇDesc cI cB sig} ‚Üí
        X j ‚Üí ‚ÑÇDescEl' cI X cB D i b ‚Üí ‚ÑÇDescEl' cI X cB  (CRec j D) i b
  ElHRec : ‚àÄ {cB b i sig} {c : ApproxEl cB ‚Üí ‚ÑÇ ‚Ñì} {j : (b : ApproxEl cB) ‚Üí ApproxEl (c b) ‚Üí ApproxEl cI} {D : ‚ÑÇDesc cI cB sig} ‚Üí
    ((x : El (c b)) ‚Üí X (j b (approx x))) ‚Üí ‚ÑÇDescEl' cI X cB D i b ‚Üí ‚ÑÇDescEl' cI X cB  (CHRec c j D _ reflp) i b



‚ÑÇDescEl : ‚àÄ  {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} ‚Üí ‚ÑÇDesc cI cB sig ‚Üí (X : ApproxEl cI ‚Üí Set) ‚Üí ApproxEl cI ‚Üí ApproxEl cB ‚Üí Set
‚ÑÇDescEl {cI = cI} {cB} D X i b = ‚ÑÇDescEl' cI X cB D i b

  -- Fixed Points of inductive descriptions from codes
  -- We always ensure the first layer of descriptions is data-constructors
  -- Since we use these for comparing things for consistency

data ‚ÑÇŒº {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (tyCtor : CName) (D : DCtors tyCtor cI) (i : ApproxEl cI)  : Set where
    Cinit : (d : DName tyCtor) ‚Üí ‚ÑÇDescEl (D d) (‚ÑÇŒº tyCtor D) i tt ‚Üí ‚ÑÇŒº  tyCtor D i
    CŒº‚Åá CŒº‚Ñß :  ‚ÑÇŒº tyCtor D  i


  -- ‚ÑÇŒº1 : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (tyCtor : CName) (D : DName tyCtor ‚Üí ‚ÑÇDesc cI) (i : ApproxEl cI)  ‚Üí Set
  -- ‚ÑÇŒº1 tyCtor D i = Œ£[ d ‚àà DName tyCtor ] ‚ÑÇDescEl (D d) (‚ÑÇŒº tyCtor D) i

WArg : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DCtors tyCtor cI) ‚Üí ApproxEl cI ‚Üí  Set
WArg D  = WÃÉ (Arg Œª d ‚Üí interpDesc (D d) tt)


  -- ‚ÑÇElFContainer : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {i : ApproxEl cI} {X : ApproxEl cI ‚Üí Set} ‚Üí {D : ‚ÑÇDesc cI} ‚Üí ‚ÑÇDescEl D X i ‚â° FContainer (interpDesc D) X Unit i
  -- ‚ÑÇElFContainerExt : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {i : ApproxEl cI} {X : ApproxEl cI ‚Üí Set} ‚Üí {D : ‚ÑÇDesc cI} ‚Üí ‚ÑÇDescEl D ‚â° Œª X i ‚Üí FContainer (interpDesc D) X Unit i

  -- Univalence gives us that this version of codes
  -- is identical to the version given by W-types
  -- I don't know if we'll actually use this, but it was an important sanity check
  -- Proof is at the bottom of this file
  -- ‚ÑÇŒºWext : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì}  {tyCtor : CName} {D : DCtors tyCtor cI }  ‚Üí
  --   ‚ÑÇŒº tyCtor D ‚â° WArg D


  -- ‚ÑÇŒºW : ‚àÄ {‚Ñì} {cI  : ‚ÑÇ ‚Ñì}  {tyCtor : CName} {D : DCtors tyCtor cI} {i : ApproxEl cI}  ‚Üí
  --   ‚ÑÇŒº tyCtor D i ‚â° WArg D i




  ------------------------------------------
  -- Machinery for the isomorphism between W types and descriptions


fromCElCommand : ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI cB sig) {i : ApproxEl cI} {X : ApproxEl cI ‚Üí Set} {b : ApproxEl cB}
    ‚Üí ‚ÑÇDescEl  D X i b
    ‚Üí CommandD D i b
fromCElCommand .(CEnd j) (ElEnd j x) = x
fromCElCommand (CArg _ D _ _) (ElArg a x) = a , fromCElCommand D x
fromCElCommand (CRec _ D) (ElRec x x‚ÇÅ) = fromCElCommand D x‚ÇÅ
fromCElCommand (CHRec c j D _ _) (ElHRec f x) = fromCElCommand D x



fromCElF : ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI cB sig) {X : ApproxEl cI ‚Üí Set} {i : ApproxEl cI} {b : ApproxEl cB}
    ‚Üí (x : ‚ÑÇDescEl  D X i b)
    ‚Üí (r : ResponseD D b (fromCElCommand D x) )
        ‚Üí X (inextD D b  _ r)
fromCElF (CArg c D _ _) (ElArg a x) r =  fromCElF D x r
fromCElF (CRec j D) (ElRec x x‚ÇÅ) (Rec _) =  x
fromCElF (CRec i D) (ElRec x x‚ÇÅ) (Rest x‚ÇÇ) = fromCElF D x‚ÇÅ x‚ÇÇ
fromCElF (CHRec c i D _ _) (ElHRec f1 f2) (Rec a) =  f1 a
fromCElF (CHRec c i D _ _) (ElHRec f1 f2) (Rest r) =  fromCElF D f2 r --fromCElF (D (approx a)) (f2 a) r



fromCŒº : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} {D : DCtors tyCtor cI} {i : ApproxEl cI}
    ‚Üí ‚ÑÇŒº tyCtor D i
    ‚Üí WArg D i
fromCEl : ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI cB sig) (E : DCtors tyCtor cI) {i : ApproxEl cI} {b : ApproxEl cB}
    ‚Üí (x : ‚ÑÇDescEl  D (‚ÑÇŒº tyCtor E) i b)
    ‚Üí (r : ResponseD D b (fromCElCommand D x))
        ‚Üí WArg E (inextD D b (fromCElCommand D x) r)


fromCŒº {D = D} (Cinit d x) = Wsup (FC (d , fromCElCommand (D d) x) (fromCEl (D d) D x))
fromCŒº CŒº‚Åá = W‚Åá
fromCŒº CŒº‚Ñß = W‚Ñß

fromCEl (CArg c D _ _) E (ElArg a x) r = fromCEl D E x r
fromCEl (CRec i D) E (ElRec x x‚ÇÅ) (Rec _) = fromCŒº x
fromCEl (CRec i D) E (ElRec x x‚ÇÅ) (Rest x‚ÇÇ) = fromCEl D E x‚ÇÅ x‚ÇÇ
fromCEl (CHRec c i D _ _) E (ElHRec f1 f2) (Rec a) = fromCŒº (f1 a)
fromCEl (CHRec c i D _ _) E (ElHRec f1 f2) (Rest r) = fromCEl D E f2 r



toCEl :
  ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI cB sig) (E : DCtors tyCtor cI ) {ix : ApproxEl cI} {b : ApproxEl cB} ‚Üí
  (com : CommandD D ix b) ‚Üí
  (k : (r : ResponseD D b com ) ‚Üí
                WArg E (inextD D b com r))
  ‚Üí ‚ñ° {X = WArg E} (interpDesc D b)
    (Œª (i , x) ‚Üí ‚ÑÇŒº tyCtor E i)
    (ix , FC com k)
-- FContainer (interpDesc D) (Œª i ‚Üí W (interpDesc E) Unit i √ó ‚ÑÇŒº E i) Unit ix
  ‚Üí (‚ÑÇDescEl  D (‚ÑÇŒº tyCtor E) ix b)


toCŒº : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DCtors tyCtor cI) {ix : ApproxEl cI}
  ‚Üí (x : WArg D ix)
  ‚Üí ‚ÑÇŒº tyCtor D ix
toCŒº D = wInd (Œª (i , _) ‚Üí ‚ÑÇŒº _ D i) (Œª {i} (FC (d , com) k) œÜ ‚Üí Cinit d (toCEl (D d) D com k œÜ)) CŒº‚Ñß CŒº‚Åá


toCEl (CEnd i) E wit k œÜ = ElEnd i wit
toCEl (CArg c D _ reflp) E (a , com) k œÜ = ElArg a (toCEl D E com k œÜ)
toCEl (CRec j D) E com k œÜ = ElRec (œÜ (Rec tt)) (toCEl D E com (Œª r ‚Üí k (Rest r)) Œª r ‚Üí œÜ (Rest r))
toCEl (CHRec c j D _ reflp) E com k œÜ = ElHRec (Œª a ‚Üí œÜ (Rec a)) (toCEl D E com (Œª r ‚Üí k (Rest r)) Œª r ‚Üí œÜ (Rest r))


toCElF :
  ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {X : ApproxEl cI ‚Üí Set} (D : ‚ÑÇDesc cI cB sig)  {ix : ApproxEl cI} {b : ApproxEl cB} ‚Üí
  (com : CommandD D ix b) ‚Üí
  (k : (r : ResponseD D b com ) ‚Üí X (inextD D b com r))
  ‚Üí (‚ÑÇDescEl D X ix b)
toCElF (CEnd i) wit k = ElEnd i wit
toCElF (CArg c D _ reflp) (a , com) k = ElArg a (toCElF D com k)
toCElF (CRec j D) com k = ElRec (k (Rec tt)) (toCElF D com (Œª r ‚Üí k (Rest r)))
toCElF (CHRec c j D _ reflp) com k = ElHRec (Œª a ‚Üí k (Rec a)) (toCElF D com (Œª r ‚Üí k (Rest r)))
-- toCElF (CHGuard c D D‚ÇÅ) (com1 , com2) k = ElHGuard (Œª a ‚Üí toCElF D (com1 a) (Œª r ‚Üí k (GuardedArg (a , r))) ) (toCElF D‚ÇÅ com2 (Œª r ‚Üí k (GRest r)) )


fromToCElCommand :
  ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI cB sig) (E : DCtors tyCtor cI) {ix : ApproxEl cI} {b : ApproxEl cB}
  ‚Üí (com : CommandD D ix b)
  ‚Üí (k : (r : ResponseD D b com ) ‚Üí
                WArg E (inextD D b com r))
  ‚Üí fromCElCommand D (toCEl D E com k Œª r ‚Üí toCŒº E (k r)) ‚â° com
fromToCElCommand (CEnd i) E com k   = refl
fromToCElCommand (CArg c D _ reflp) E (a , com) k   = Œ£PathP (refl , fromToCElCommand D E com k  )
fromToCElCommand (CRec j D) E com k   = fromToCElCommand D E com (Œª r ‚Üí k (Rest r))
fromToCElCommand (CHRec c j D _ reflp) E com k   = fromToCElCommand D E com (Œª r ‚Üí k (Rest r))


-- fromToCElCommandF :
--   ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI) {X : ApproxEl cI ‚Üí Set}  {ix : ApproxEl cI}
--   ‚Üí (com : CommandD D ix)
--   ‚Üí (k : (r : ResponseD D com ) ‚Üí
--                   X (inextD D com r))
--   ‚Üí fromCElCommand D (toCElF {X = X} D com k) ‚â° com
-- fromToCElCommandF (CEnd i) com k   = refl
-- fromToCElCommandF (CArg c D) (a , com) k   = Œ£PathP (refl , fromToCElCommandF (D (approx a)) com k  )
-- fromToCElCommandF (CRec j D) com k   = fromToCElCommandF D com (Œª r ‚Üí k (Rest r))
-- fromToCElCommandF (CHRec c j D) com k   = funExt Œª a ‚Üí fromToCElCommandF (D (approx a)) (com a) (Œª r ‚Üí k (Rest (a , r)))
-- -- fromToCElCommandF (CHGuard c D D‚ÇÅ) (com1 , com2) k   =
--   -- ‚â°-√ó
--   --   (funExt (Œª a ‚Üí fromToCElCommandF D (com1 a) (Œª r ‚Üí k (GuardedArg (a , r)))  ))
--   --   (fromToCElCommandF D‚ÇÅ com2 (Œª r ‚Üí k (GRest r))  )
