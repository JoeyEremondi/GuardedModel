

{-# OPTIONS --cubical --guarded #-}



-- open import Guarded
open import Cubical.Data.Maybe as Maybe
open import Level
open import Cubical.Relation.Nullary

open import Cubical.Data.Equality using (_‚â°p_ ; reflp ; cong)
open import DecPEq hiding (_‚àé)
open import Cubical.Data.Nat
open import Cubical.Data.Bool
open import Cubical.Data.Empty renaming (‚ä• to ùüò)
-- open import Cubical.Data.Prod
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import Inductives
open import GuardedAlgebra
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Data.Equality using (ptoc ; ctop)
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Transport
open import Cubical.Data.Sum as Sum
open import GuardedModality using (later-ext)

open import ApproxExact


--TODO: don't make ‚Ñì module param
module WMuEq {{_ : DataTypes}} {{_ : DataGerms}} where

open import Code
-- open import Head
open import Util

module _ {{√¶ : √Ü}} where

  -- More direct interpretation of inductive descriptions
  -- Works because we ensure the paramter types are always codes, not types
  -- So we can stay in Set
  -- Also, Cubical Agda recognizes these as strictly decreasing, which is nice
  data ‚ÑÇDescEl' {‚Ñì} (cI : ‚ÑÇ ‚Ñì) (X : ApproxEl cI ‚Üí Set) : {sig : IndSig} (cB : ‚ÑÇ ‚Ñì) ‚Üí  ‚ÑÇDesc cI cB sig ‚Üí ApproxEl cI ‚Üí ApproxEl cB ‚Üí Set where
    ElEnd : ‚àÄ {cB b i} j ‚Üí i ‚âÖ j ‚Üí  ‚ÑÇDescEl' cI X cB (CEnd j) i b
    ElArg : ‚àÄ {cB cA sig i b} {D : ‚ÑÇDesc cI _ sig} ‚Üí (a : ApproxedEl (cA b) ) ‚Üí  ‚ÑÇDescEl' cI X (CŒ£ cB cA)  D i (b , approx a) ‚Üí ‚ÑÇDescEl' cI X cB (CArg cA D _ reflp) i b
    ElRec : ‚àÄ {cB b i sig} {j : ApproxEl cI} {D : ‚ÑÇDesc cI cB sig} ‚Üí
      X j ‚Üí ‚ÑÇDescEl' cI X cB D i b ‚Üí ‚ÑÇDescEl' cI X cB  (CRec j D) i b
    ElHRec : ‚àÄ {cB b i sig} {c : ApproxEl cB ‚Üí ‚ÑÇ ‚Ñì} {j : (b : ApproxEl cB) ‚Üí ApproxEl (c b) ‚Üí ApproxEl cI} {D : ‚ÑÇDesc cI cB sig} ‚Üí
      ((x : ApproxedEl (c b)) ‚Üí X (j b (approx x))) ‚Üí ‚ÑÇDescEl' cI X cB D i b ‚Üí ‚ÑÇDescEl' cI X cB  (CHRec c j D _ reflp) i b



  ‚ÑÇDescEl : ‚àÄ  {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} ‚Üí ‚ÑÇDesc cI cB sig ‚Üí (ApproxEl cI ‚Üí Set) ‚Üí ApproxEl cI ‚Üí ApproxEl cB ‚Üí Set
  ‚ÑÇDescEl {cI = cI} {cB} D X i b = ‚ÑÇDescEl' cI X cB D i b

  -- Fixed Points of inductive descriptions from codes
  -- We always ensure the first layer of descriptions is data-constructors
  -- Since we use these for comparing things for consistency

  data ‚ÑÇŒº {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (tyCtor : CName) (D : DCtors tyCtor cI) (i : ApproxEl cI)  : Set where
    Cinit : (d : DName tyCtor) ‚Üí ‚ÑÇDescEl (D d) (‚ÑÇŒº tyCtor D) i tt ‚Üí ‚ÑÇŒº  tyCtor D i
    CŒº‚Åá CŒº‚Ñß :  ‚ÑÇŒº tyCtor D  i


  -- ‚ÑÇŒº1 : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (tyCtor : CName) (D : DName tyCtor ‚Üí ‚ÑÇDesc cI) (i : ApproxEl cI)  ‚Üí Set
  -- ‚ÑÇŒº1 tyCtor D i = Œ£[ d ‚àà DName tyCtor ] ‚ÑÇDescEl (D d) (‚ÑÇŒº tyCtor D) i

  WArg : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DCtors tyCtor cI) ‚Üí ApproxEl cI ‚Üí  Set
  WArg D  = WÃÉ (Arg Œª d ‚Üí interpDesc (D d) tt)


  -- ‚ÑÇElFContainer : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {i : ApproxEl cI} {X : ApproxEl cI ‚Üí Set} ‚Üí {D : ‚ÑÇDesc cI} ‚Üí ‚ÑÇDescEl D X i ‚â° FContainer (interpDesc D) X Unit i
  -- ‚ÑÇElFContainerExt : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {i : ApproxEl cI} {X : ApproxEl cI ‚Üí Set} ‚Üí {D : ‚ÑÇDesc cI} ‚Üí ‚ÑÇDescEl D ‚â° Œª X i ‚Üí FContainer (interpDesc D) X Unit i

  -- Univalence gives us that this version of codes
  -- is identical to the version given by W-types
  -- I don't know if we'll actually use this, but it was an important sanity check
  -- Proof is at the bottom of this file
  -- ‚ÑÇŒºWext : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì}  {tyCtor : CName} {D : DCtors tyCtor cI }  ‚Üí
  --   ‚ÑÇŒº tyCtor D ‚â° WArg D


  -- ‚ÑÇŒºW : ‚àÄ {‚Ñì} {cI  : ‚ÑÇ ‚Ñì}  {tyCtor : CName} {D : DCtors tyCtor cI} {i : ApproxEl cI}  ‚Üí
  --   ‚ÑÇŒº tyCtor D i ‚â° WArg D i




  ------------------------------------------
  -- Machinery for the isomorphism between W types and descriptions


  fromCElCommand : ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI cB sig) {i : ApproxEl cI} {X : ApproxEl cI ‚Üí Set} {b : ApproxEl cB}
    ‚Üí ‚ÑÇDescEl  D X i b
    ‚Üí CommandD D i b
  fromCElCommand .(CEnd j) (ElEnd j x) = x
  fromCElCommand (CArg _ D _ _) (ElArg a x) = a , fromCElCommand D x
  fromCElCommand (CRec _ D) (ElRec x x‚ÇÅ) = fromCElCommand D x‚ÇÅ
  fromCElCommand (CHRec c j D _ _) (ElHRec f x) = fromCElCommand D x



  fromCElF : ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI cB sig) {X : ApproxEl cI ‚Üí Set} {i : ApproxEl cI} {b : ApproxEl cB}
    ‚Üí (x : ‚ÑÇDescEl  D X i b)
    ‚Üí (r : ResponseD D b (fromCElCommand D x ) )
        ‚Üí X (inextD D b (fromCElCommand D x ) r)
  fromCElF (CArg c D _ _) (ElArg a x) r = fromCElF D x r
  fromCElF (CRec j D) (ElRec x x‚ÇÅ) (Rec _) = x
  fromCElF (CRec i D) (ElRec x x‚ÇÅ) (Rest x‚ÇÇ) = fromCElF D x‚ÇÅ x‚ÇÇ
  fromCElF (CHRec c i D _ _) (ElHRec f1 f2) (Rec a) = f1 a
  fromCElF (CHRec c i D _ _) (ElHRec f1 f2) (Rest r) = fromCElF D f2 r --fromCElF (D (approx a)) (f2 a) r



  fromCŒº : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} {D : DCtors tyCtor cI} {i : ApproxEl cI}
    ‚Üí ‚ÑÇŒº tyCtor D i
    ‚Üí WArg D i
  fromCEl : ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI cB sig) (E : DCtors tyCtor cI) {i : ApproxEl cI} {b : ApproxEl cB}
    ‚Üí (x : ‚ÑÇDescEl  D (‚ÑÇŒº tyCtor E) i b)
    ‚Üí (r : ResponseD D b (fromCElCommand D x))
        ‚Üí WArg E (inextD D b (fromCElCommand D x ) r )


  fromCŒº {D = D} (Cinit d x) = Wsup (FC (d , fromCElCommand (D d) x) (fromCEl (D d) D x))
  fromCŒº CŒº‚Åá = W‚Åá
  fromCŒº CŒº‚Ñß = W‚Ñß

  fromCEl (CArg c D _ _) E (ElArg a x) r = fromCEl D E x r
  fromCEl (CRec i D) E (ElRec x x‚ÇÅ) (Rec _) = fromCŒº x
  fromCEl (CRec i D) E (ElRec x x‚ÇÅ) (Rest x‚ÇÇ) = fromCEl D E x‚ÇÅ x‚ÇÇ
  fromCEl (CHRec c i D _ _) E (ElHRec f1 f2) (Rec a) = fromCŒº (f1 a)
  fromCEl (CHRec c i D _ _) E (ElHRec f1 f2) (Rest r) = fromCEl D E f2 r



  toCEl :
    ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI cB sig) (E : DCtors tyCtor cI ) {ix : ApproxEl cI} {b : ApproxEl cB} ‚Üí
    (com : CommandD D ix b) ‚Üí
    (k : (r : ResponseD D b com ) ‚Üí
                    WArg E (inextD D b com r))
    ‚Üí ‚ñ° {X = WArg E} (interpDesc D b)
        (Œª (i , x) ‚Üí ‚ÑÇŒº tyCtor E i)
        (ix , FC com k)
    -- FContainer (interpDesc D) (Œª i ‚Üí W (interpDesc E) Unit i √ó ‚ÑÇŒº E i) Unit ix
    ‚Üí (‚ÑÇDescEl  D (‚ÑÇŒº tyCtor E) ix b)


  toCŒº : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DCtors tyCtor cI) {ix : ApproxEl cI}
    ‚Üí (x : WArg D ix)
    ‚Üí ‚ÑÇŒº tyCtor D ix
  toCŒº D = wInd (Œª (i , _) ‚Üí ‚ÑÇŒº _ D i) (Œª {i} (FC (d , com) k) œÜ ‚Üí Cinit d (toCEl (D d) D com k œÜ)) CŒº‚Ñß CŒº‚Åá


  toCEl (CEnd i) E wit k œÜ = ElEnd i wit
  toCEl (CArg c D _ reflp) E (a , com) k œÜ = ElArg a (toCEl D E com k œÜ)
  toCEl (CRec j D) E com k œÜ = ElRec (œÜ (Rec tt)) (toCEl D E com (Œª r ‚Üí k (Rest r)) Œª r ‚Üí œÜ (Rest r))
  toCEl (CHRec c j D _ reflp) E com k œÜ = ElHRec (Œª a ‚Üí œÜ (Rec a)) (toCEl D E com (Œª r ‚Üí k (Rest r)) Œª r ‚Üí œÜ (Rest r))


  toCElF :
    ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {X : ApproxEl cI ‚Üí Set} (D : ‚ÑÇDesc cI cB sig)  {ix : ApproxEl cI} {b : ApproxEl cB} ‚Üí
    (com : CommandD D ix b) ‚Üí
    (k : (r : ResponseD D b com ) ‚Üí X (inextD D b com r))
    ‚Üí (‚ÑÇDescEl D X ix b)
  toCElF (CEnd i) wit k = ElEnd i wit
  toCElF (CArg c D _ reflp) (a , com) k = ElArg a (toCElF D com k)
  toCElF (CRec j D) com k = ElRec (k (Rec tt)) (toCElF D com (Œª r ‚Üí k (Rest r)))
  toCElF (CHRec c j D _ reflp) com k = ElHRec (Œª a ‚Üí k (Rec a)) (toCElF D com (Œª r ‚Üí k (Rest r)))
  -- toCElF (CHGuard c D D‚ÇÅ) (com1 , com2) k = ElHGuard (Œª a ‚Üí toCElF D (com1 a) (Œª r ‚Üí k (GuardedArg (a , r))) ) (toCElF D‚ÇÅ com2 (Œª r ‚Üí k (GRest r)) )


  fromToCElCommand :
    ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI cB sig) (E : DCtors tyCtor cI) {ix : ApproxEl cI} {b : ApproxEl cB}
    ‚Üí (com : CommandD D ix b)
    ‚Üí (k : (r : ResponseD D b com ) ‚Üí
                    WArg E (inextD D b com r))
    ‚Üí fromCElCommand D (toCEl D E com k Œª r ‚Üí toCŒº E (k r)) ‚â° com
  fromToCElCommand (CEnd i) E com k   = refl
  fromToCElCommand (CArg c D _ reflp) E (a , com) k   = Œ£PathP (refl , fromToCElCommand D E com k  )
  fromToCElCommand (CRec j D) E com k   = fromToCElCommand D E com (Œª r ‚Üí k (Rest r))
  fromToCElCommand (CHRec c j D _ reflp) E com k   = fromToCElCommand D E com (Œª r ‚Üí k (Rest r))


  -- fromToCElCommandF :
  --   ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI) {X : ApproxEl cI ‚Üí Set}  {ix : ApproxEl cI}
  --   ‚Üí (com : CommandD D ix)
  --   ‚Üí (k : (r : ResponseD D com ) ‚Üí
  --                   X (inextD D com r))
  --   ‚Üí fromCElCommand D (toCElF {X = X} D com k) ‚â° com
  -- fromToCElCommandF (CEnd i) com k   = refl
  -- fromToCElCommandF (CArg c D) (a , com) k   = Œ£PathP (refl , fromToCElCommandF (D (approx a)) com k  )
  -- fromToCElCommandF (CRec j D) com k   = fromToCElCommandF D com (Œª r ‚Üí k (Rest r))
  -- fromToCElCommandF (CHRec c j D) com k   = funExt Œª a ‚Üí fromToCElCommandF (D (approx a)) (com a) (Œª r ‚Üí k (Rest (a , r)))
  -- -- fromToCElCommandF (CHGuard c D D‚ÇÅ) (com1 , com2) k   =
  --   -- ‚â°-√ó
  --   --   (funExt (Œª a ‚Üí fromToCElCommandF D (com1 a) (Œª r ‚Üí k (GuardedArg (a , r)))  ))
  --   --   (fromToCElCommandF D‚ÇÅ com2 (Œª r ‚Üí k (GRest r))  )

  fromToCEl :
    ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI cB sig) (E : DCtors tyCtor cI) {ix : ApproxEl cI} {b : ApproxEl cB}
    ‚Üí (com : CommandD D ix b)
    ‚Üí (k : (r : ResponseD D b com ) ‚Üí
                    WArg E (inextD D b com r))
    ‚Üí (œÜ‚ÇÇ : ‚ñ° {X = WArg E} (interpDesc D b)
        (Œª (i , x) ‚Üí
           fromCŒº (toCŒº E x) ‚â° x)
        (ix , FC com k))
    ‚Üí PathP (Œª ùïö ‚Üí let com = fromToCElCommand D E com k  ùïö in (r : ResponseD D b com) ‚Üí WArg E (inextD D b com r))
    (fromCEl D E (toCEl D E com k Œª r ‚Üí toCŒº E (k r))) k
  fromToCEl (CodeModule.CEnd i) E com k  œÜ = funExt (Œª ())
  fromToCEl (CodeModule.CArg c D _ reflp) E (a , com) k  œÜ  = fromToCEl D E com k œÜ
  fromToCEl (CodeModule.CRec j D) E com k  œÜ ùïö (Rec tt) = œÜ (Rec tt) ùïö
  fromToCEl (CodeModule.CRec j D) E com k  œÜ ùïö (Rest r) = fromToCEl D E com (Œª r ‚Üí k (Rest r)) (Œª r ‚Üí œÜ (Rest r)) ùïö r
  fromToCEl (CodeModule.CHRec c j D _ reflp) E com k œÜ ùïö (Rec a) = œÜ (Rec a) ùïö
  fromToCEl (CodeModule.CHRec c j D _ reflp) E com k œÜ ùïö (Rest r) = fromToCEl D E com (Œª r ‚Üí k (Rest r)) (Œª r ‚Üí œÜ (Rest r)) ùïö r


  fromToCŒº :  ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : DCtors tyCtor cI) {ix : ApproxEl cI}
    ‚Üí (x : WArg D ix)
    ‚Üí fromCŒº (toCŒº D x) ‚â° x
  fromToCŒº {cI = cI} D = wInd
    (Œª(ix , x) ‚Üí fromCŒº (toCŒº D x) ‚â° x) helper refl refl
    where
      helper : ‚àÄ {i : ApproxEl cI} (cs : FContainer (Arg (Œª d ‚Üí interpDesc (D d) tt)) (WArg D) i)  ‚Üí  (œÜ : _) ‚Üí fromCŒº (toCŒº D (Wsup cs)) ‚â° Wsup cs
      helper {i} (FC (d , com) k) œÜ ùïö =
        Wsup (FC
          (d , fromToCElCommand (D d) D com k ùïö)
          (fromToCEl (D d) D com k œÜ ùïö) )


  toFromCŒº : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {tyCtor : CName} {D : DCtors tyCtor cI} {i : ApproxEl cI}
    ‚Üí (x : ‚ÑÇŒº tyCtor D i)
    ‚Üí toCŒº D (fromCŒº x) ‚â° x
  toFromCEl : ‚àÄ {‚Ñì sig} {cI cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} (D : ‚ÑÇDesc cI cB sig) (E : DCtors tyCtor cI) {i : ApproxEl cI} {b : ApproxEl cB}
    ‚Üí (x : ‚ÑÇDescEl  D (‚ÑÇŒº tyCtor E) i b)
    ‚Üí toCEl D E (fromCElCommand D x) (fromCEl D E x) (Œª r ‚Üí toCŒº E (fromCEl D E x r)) ‚â° x

  toFromCŒº (Cinit d x) = cong (Cinit d) (toFromCEl _ _ x)
  toFromCŒº CŒº‚Åá = refl
  toFromCŒº CŒº‚Ñß = refl

  toFromCEl .(CEnd j) E (ElEnd j x) = refl
  toFromCEl (CArg c D _ reflp) E (ElArg a x) = cong (ElArg a) (toFromCEl D E x)
  toFromCEl (CRec j D) E (ElRec x x‚ÇÅ) = cong‚ÇÇ ElRec (toFromCŒº x) (toFromCEl D E x‚ÇÅ)
  toFromCEl (CHRec c j D _ reflp) E (ElHRec x x‚ÇÅ) = cong‚ÇÇ ElHRec (funExt (Œª a ‚Üí toFromCŒº (x a))) (toFromCEl D E x‚ÇÅ)
  -- toFromCEl (CHGuard c D1 D2) E (ElHGuard x x‚ÇÅ) = cong‚ÇÇ ElHGuard (funExt Œª a ‚Üí toFromCEl D1 E (x a)) (toFromCEl D2 E x‚ÇÅ)



  -- fromToCElF :
  --   ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI) {X : ApproxEl cI ‚Üí Set} {ix : ApproxEl cI}
  --   ‚Üí (com : CommandD D ix)
  --   ‚Üí (k : (r : ResponseD D com ) ‚Üí
  --                   X (inextD D com r))
  --   ‚Üí PathP (Œª ùïö ‚Üí let com = fromToCElCommandF D com k  ùïö in (r : ResponseD D com) ‚Üí X (inextD D com r))
  --     (fromCElF D {X = X} (toCElF {X = X} D com k)) k
  -- fromToCElF (CodeModule.CEnd i) com k  = funExt (Œª ())
  -- fromToCElF (CodeModule.CArg c D) (a , com) k   = fromToCElF (D (approx a)) com k
  -- fromToCElF (CodeModule.CRec j D) com k  ùïö (Rec tt) = k (Rec tt)
  -- fromToCElF (CodeModule.CRec j D) com k  ùïö (Rest r) = fromToCElF D com (Œª r ‚Üí k (Rest r))  ùïö r
  -- fromToCElF (CodeModule.CHRec c j D) com k ùïö (Rec a) = k (Rec a)
  -- fromToCElF (CodeModule.CHRec c j D) com k ùïö (Rest (a , r)) = fromToCElF (D (approx a)) (com a) (Œª r ‚Üí k (Rest (a , r)))  ùïö r
  -- -- fromToCElF (CodeModule.CHGuard c D D‚ÇÅ) (com1 , com2) k ùïö (GuardedArg (a , r)) = fromToCElF D (com1 a) (Œª r ‚Üí k (GuardedArg (a , r)))  ùïö r
  -- -- fromToCElF (CodeModule.CHGuard c D D‚ÇÅ) (com1 , com2) k ùïö (GRest r) = fromToCElF D‚ÇÅ com2 (Œª r ‚Üí k (GRest r))  ùïö r


  -- toFromCElF : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} (D : ‚ÑÇDesc cI) {X : ApproxEl cI ‚Üí Set} {i : ApproxEl cI}
  --   ‚Üí (x : ‚ÑÇDescEl  D X i)
  --   ‚Üí toCElF D (fromCElCommand D x) (fromCElF D x) ‚â° x
  -- toFromCElF .(CEnd j) (ElEnd j x) = refl
  -- toFromCElF (CArg c D) (ElArg a x) = cong (ElArg a) (toFromCElF (D (approx a)) x)
  -- toFromCElF (CRec j D) (ElRec x x‚ÇÅ) = cong (ElRec x) (toFromCElF D x‚ÇÅ)
  -- toFromCElF (CHRec c j D) (ElHRec x x‚ÇÅ) = cong (ElHRec x) (funExt Œª a ‚Üí toFromCElF (D (approx a)) (x‚ÇÅ a))
  -- -- toFromCElF (CHGuard c D1 D2) (ElHGuard x x‚ÇÅ) = cong‚ÇÇ ElHGuard (funExt Œª a ‚Üí toFromCElF D1 (x a)) (toFromCElF D2 x‚ÇÅ)

  CŒºWiso :
    ‚àÄ {‚Ñì} {cI  : ‚ÑÇ ‚Ñì}  {tyCtor : CName} {D : DCtors tyCtor cI} {i : ApproxEl cI}
    ‚Üí Iso (‚ÑÇŒº tyCtor D i) (WArg D i)
  CŒºWiso = (iso fromCŒº (toCŒº _) (fromToCŒº _) toFromCŒº)


---------
-- Data Germ Helpers
-- We use these to extract the strictly-positive parts out of data germ descriptions
-- And erase the negative parts of inhabitants of the described types,
-- which are easier to traverse recursively in a way Agda sees as terminating
---------

open import InductiveCodes

Œ£-swap-dist : ‚àÄ {A : Set} {B : A ‚Üí Set} {C : Set}
  ‚Üí Iso (Œ£ (Œ£ A B) (Œª _ ‚Üí C)) (Œ£ (A √ó C) (Œª (a , _) ‚Üí B a))
Iso.fun Œ£-swap-dist ((a , b) , c) = (a , c) , b
Iso.inv Œ£-swap-dist ((a , c) , b) = (a , b) , c
Iso.rightInv Œ£-swap-dist ((a , c) , b) = refl
Iso.leftInv Œ£-swap-dist ((a , b) , c) = refl

descSwapIso : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {sig : IndSig} {cB1 cB2 : ‚ÑÇ ‚Ñì} (bIso : Iso (ApproxEl cB1) (ApproxEl cB2))
  ‚Üí  ‚ÑÇDesc cI cB1 sig
  ‚Üí  ‚ÑÇDesc cI cB2 sig
descSwapIso bIso (CEnd i) = CEnd i
descSwapIso bIso (CArg c D cB' x) = CArg (Œª x ‚Üí c (Iso.inv bIso x)) (descSwapIso theIso D) _ reflp
  where
    theIso = Œ£-cong-iso bIso (Œª cb1 ‚Üí subst (Œª x ‚Üí Iso (ApproxEl (c cb1)) (ApproxEl (c x))) (sym (Iso.leftInv bIso cb1)) idIso)
descSwapIso bIso (CRec j D) = CRec j (descSwapIso bIso D)
descSwapIso bIso (CHRec c j D cB' x) = CHRec (Œª x ‚Üí c (Iso.inv bIso x)) ((Œª x ‚Üí j (Iso.inv bIso x))) (descSwapIso bIso D) _ reflp

descAddDeps : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {sig : IndSig} {cB : ‚ÑÇ ‚Ñì} (cUnused)
  ‚Üí  ‚ÑÇDesc cI cB sig
  ‚Üí  ‚ÑÇDesc cI (CŒ£ cB (Œª _ ‚Üí cUnused)) sig
descAddDeps cUnused (CEnd i) = CEnd i
descAddDeps cUnused (CArg c D cB' x) = CArg (Œª (cb , _) ‚Üí c cb) (descSwapIso theIso (descAddDeps cUnused D)) _ reflp
  where
    theIso = Œ£-swap-dist
descAddDeps cUnused (CRec j D) = CRec j (descAddDeps cUnused D)
descAddDeps cUnused (CHRec c j D cB' x) = CHRec (Œª (cb , _) ‚Üí c cb) (Œª (cb , _) ‚Üí j cb) (descAddDeps cUnused D) _ reflp

descAddFunDeps : ‚àÄ {‚Ñì} {cI : ‚ÑÇ ‚Ñì} {sig : IndSig} {cB1 : ‚ÑÇ ‚Ñì} (cB2 : ApproxEl cB1 ‚Üí ‚ÑÇ ‚Ñì) (cUnused)
  ‚Üí  ‚ÑÇDesc cI cB1 sig
  ‚Üí  ‚ÑÇDesc cI (CŒ£ cB1 (Œª x ‚Üí CŒ† (cB2 x) Œª _ ‚Üí cUnused)) sig
descAddFunDeps cB cUnused (CodeModule.CEnd i) = CEnd i
descAddFunDeps cB cUnused (CodeModule.CArg c D cB' x)
  = CArg (Œª (cb1 , f) ‚Üí c cb1) (descSwapIso theIso (descAddFunDeps (Œª (x , _) ‚Üí cB x) cUnused D)) _ reflp
    where
      theIso =
        iso
          (Œª ((cb1 , x) , f) ‚Üí (cb1 , f) , x)
          (Œª ((cb1 , f) , x) ‚Üí (cb1 , x) , f)
          (Œª ((cb1 , f) , x) ‚Üí refl)
          (Œª ((cb1 , x) , f) ‚Üí refl)
descAddFunDeps cB cUnused (CodeModule.CRec j D) = CRec j (descAddFunDeps cB cUnused D)
descAddFunDeps cB cUnused (CodeModule.CHRec c j D cB' x)
  = CHRec
    (Œª (cb1 , f) ‚Üí c cb1)
    (Œª (cb1 , f) ‚Üí j cb1)
    (descAddFunDeps cB cUnused D)
    _
    reflp

posDataGermCode :
  ‚àÄ {{√¶ : √Ü}} (‚Ñì : ‚Ñï)  {sig} {B+ : Set} (cB+ : ‚ÑÇ ‚Ñì) {B- : B+ ‚Üí Set}
  ‚Üí (Iso B+ (ApproxEl cB+))
  ‚Üí (D : GermCtor B+ B- sig)
  ‚Üí DataGermIsCode ‚Ñì D
  ‚Üí ‚ÑÇDesc Cùüò cB+ sig
posDataGermCode ‚Ñì cB+ bIso GEnd GEndCode = CEnd tt
posDataGermCode ‚Ñì cB+ bIso (GArg (A+ , A-) D) (GArgCode c+ c- iso+ iso- isCode)
  = CArg
    (Œª cb ‚Üí c+ (Iso.inv bIso cb))
    (posDataGermCode
      ‚Ñì
      (CŒ£ cB+ (Œª cb ‚Üí c+ (Iso.inv bIso cb)))
      (Œ£-cong-iso bIso Œª b+ ‚Üí subst (Œª x ‚Üí Iso (A+ b+ Approx) (ApproxEl (c+ x))) (sym (Iso.leftInv bIso _)) (iso+ b+ Approx))
      D
      isCode) _ reflp
posDataGermCode ‚Ñì cB+ bIso (GHRec A D) (GHRecCode c+ c- iso+ iso- isCode)
  = CHRec (Œª cb ‚Üí c+ (Iso.inv bIso cb)) (Œª _ _ ‚Üí tt) (posDataGermCode ‚Ñì cB+ bIso D isCode) _ reflp
posDataGermCode ‚Ñì cB+ bIso (GRec D) (GRecCode isCode)
  = CRec tt (posDataGermCode ‚Ñì cB+ bIso D isCode)
-- Unk is just an Arg with return type C‚Åá
posDataGermCode ‚Ñì cB+ bIso (GUnk A D) (GUnkCode c+ c- iso+ iso- isCode)
  -- Positive part isn't allowed to depend on values of ‚Åá
  = CArg (Œª cb ‚Üí CŒ† (c+ (Iso.inv bIso cb)) (Œª _ ‚Üí C‚Åá)) (descAddFunDeps (Œª z ‚Üí c+ (Iso.inv bIso z)) C‚Åá recDesc) _ reflp
    where
      recDesc = posDataGermCode ‚Ñì cB+ bIso D isCode



posDataGermFVal : ‚àÄ {{_ : InductiveCodes}} {‚Ñì} {{√¶ : √Ü}} (cB+ : ‚ÑÇ ‚Ñì)  {B+ B- sig} (tyCtor : CName)
    ‚Üí (bIso : Iso B+ (ApproxEl cB+))
    ‚Üí (D : GermCtor B+ B- sig)
    ‚Üí (isCode : DataGermIsCode ‚Ñì D)
    ‚Üí (b+ : B+)
    ‚Üí (b- : B- b+)
    ‚Üí (cs : DescFunctor {{√¶ = √¶}} ‚Ñì tyCtor D b+ b-)
    ‚Üí ‚ñ° _ (Œª (m , _) ‚Üí Maybe.rec Unit  (Œª x ‚Üí tyCtor ‚â°p x ‚Üí ‚ÑÇŒº tyCtor (Œª d ‚Üí posDataGermCode ‚Ñì Cùüò idIso (germForCtor ‚Ñì tyCtor d) (dataGermIsCode ‚Ñì tyCtor d)) tt) m) (just tyCtor , cs)
    ‚Üí ‚ÑÇDescEl {cB = cB+} (posDataGermCode ‚Ñì cB+ bIso D isCode) (Œª _ ‚Üí ‚ÑÇŒº tyCtor (Œª d ‚Üí posDataGermCode ‚Ñì Cùüò idIso (germForCtor ‚Ñì tyCtor d) (dataGermIsCode ‚Ñì tyCtor d)) tt ) tt (Iso.fun bIso b+)
posDataGermFVal cB+ tyCtor bIso GEnd GEndCode b+ b- cs œÜ = ElEnd tt (tt ‚ä¢ tt ‚âÖ tt)
posDataGermFVal {{√¶ = √¶}} cB+ tyCtor bIso (GArg (A+ , A-) D) (GArgCode c+ c- iso+ iso- isCode) b+ b- (FC ((a+ , a-) , com) resp) œÜ
  -- This is all just awful rewriting of equalities and such
  = ElArg (subst (Œª x ‚Üí ApproxedEl (c+ x)) (sym (Iso.leftInv bIso b+)) (Iso.fun (ApproxedIso (iso+ b+)) a+))
    (subst
      {x = Iso.fun theIso (b+ , approx a+)}
      {y = Iso.fun bIso b+ , approx (Iso.fun (ApproxedIso (iso+ _)) (subst (Œª x ‚Üí Approxed (A+ x)) (sym (Iso.leftInv bIso b+)) a+))}
      (Œª x ‚Üí ‚ÑÇDescEl' _ _ _ _ _ x) (Œ£PathP (refl , (toPathP (case√Ü (Œª {reflp ‚Üí {!!}}) (Œª {reflp ‚Üí {!!}}))))) recVal)
      where
        theIso = (Œ£-cong-iso bIso Œª b+ ‚Üí subst (Œª x ‚Üí Iso (A+ b+ Approx) (ApproxEl (c+ x))) (sym (Iso.leftInv bIso _)) (iso+ b+ Approx))
        recVal =
          posDataGermFVal
          (CŒ£ cB+ Œª ca+ ‚Üí c+ (Iso.inv bIso  ca+))
          tyCtor
          theIso
          D
          isCode
          (b+ , approx a+)
          (b- , approx a-)
          (FC com (Sum.elim (Œª r ‚Üí resp (inl r)) Œª r ‚Üí resp (inr r)))
          (Sum.elim (Œª r ‚Üí œÜ (inl r)) (Œª r ‚Üí œÜ (inr r)))
posDataGermFVal cB+ tyCtor bIso (GHRec A D) (GHRecCode c+ c- iso+ iso- isCode) b+ b- cs œÜ = {!!}
posDataGermFVal cB+ tyCtor bIso (GRec D) (GRecCode isCode) b+ b- cs œÜ = {!!}
posDataGermFVal cB+ tyCtor bIso (GUnk A D) (GUnkCode c+ c- iso+ iso- isCode) b+ b- cs œÜ = {!!}


posDataGermVal : {{_ : InductiveCodes}}
  ‚Üí ‚àÄ {{√¶ : √Ü}} (‚Ñì : ‚Ñï) (tyCtor : CName)
  ‚Üí DataGerm ‚Ñì tyCtor
  ‚Üí ‚ÑÇŒº tyCtor (Œª d ‚Üí posDataGermCode ‚Ñì Cùüò idIso (germForCtor ‚Ñì tyCtor d) (dataGermIsCode ‚Ñì tyCtor d)) tt
posDataGermVal ‚Ñì tyCtor x = recFun reflp
  where
    recFun =
      DataGermRec'
        (Maybe.rec Unit (Œª x ‚Üí tyCtor ‚â°p x ‚Üí ‚ÑÇŒº tyCtor (Œª d ‚Üí posDataGermCode ‚Ñì Cùüò idIso (germForCtor ‚Ñì tyCtor d) (dataGermIsCode ‚Ñì tyCtor d)) tt))
        (Œª _ _ ‚Üí tt)
        (Œª {d x œÜ reflp ‚Üí Cinit d (posDataGermFVal {‚Ñì = ‚Ñì} Cùüò tyCtor idIso _ _ tt tt x œÜ)})
        (Œª { nothing ‚Üí tt , tt ; (just x) ‚Üí (Œª _ ‚Üí CŒº‚Åá) , Œª _ ‚Üí CŒº‚Åá})
        x
    -- wRec {X = Œª { nothing ‚Üí Unit ; (just x) ‚Üí x ‚â°p tyCtor ‚Üí ‚ÑÇŒº tyCtor (Œª d ‚Üí posDataGermCode ‚Ñì idIso (germForCtor ‚Ñì tyCtor d) (dataGermIsCode ‚Ñì tyCtor d)) true}}
    --   (Œª { {nothing} x‚ÇÅ ‚Üí tt ; {just _} (FC (d , com) response) reflp ‚Üí Cinit d (posDataGermFVal tyCtor idIso _ _ {!!} tt {!FC com response!} {!!} )})
    --   (Œª { nothing ‚Üí tt , tt ; (just x) ‚Üí (Œª {reflp ‚Üí CŒº‚Åá}) , Œª {reflp ‚Üí CŒº‚Ñß}}) x
