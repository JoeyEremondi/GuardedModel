#+title: A Guarded Syntactic Model of Gradual Dependent Types
#+AUTHOR: Joey Eremondi
#+date: April 18, 2022
#+STARTUP: nolatexpreview


#+LATEX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [dvipsnames]
#+OPTIONS: toc:nil H:2 num:f
#+LATEX_COMPILER: xelatex

#+startup: beamer
#+COLUMNS: %45ITEM %10BEAMER_ENV(Env) %10BEAMER_ACT(Act) %4BEAMER_COL(Col)
#+beamer: \beamerdefaultoverlayspecification{<+->}

#+LaTeX_HEADER: \usefonttheme[onlymath]{serif}


#+LaTeX_HEADER: \usepackage{xcolor}
#+LaTeX_HEADER: \usetheme{metropolis}
#+LaTeX_HEADER: \definecolor{ubcBlue}{RGB}{12,35,68}
#+LaTeX_HEADER: \definecolor{ubcBlue1}{RGB}{0,85,183}
#+LaTeX_HEADER: \definecolor{ubcBlue2}{RGB}{0,167,225}
#+LaTeX_HEADER: \definecolor{ubcBlue3}{RGB}{64,180,229}
#+LaTeX_HEADER: \definecolor{ubcBlue4}{RGB}{110,196,232}
#+LaTeX_HEADER: \definecolor{ubcBlue5}{RGB}{151,212,223}

#+LaTeX_HEADER: \setbeamercolor{alerted text}{bg=ubcBlue1, fg = ubcBlue}
#+LaTeX_HEADER: \setbeamercolor{example text}{fg=ubcBlue1, bg=ubcBlue1}
#+LaTeX_HEADER: \setbeamercolor{title separator}{fg = ubcBlue, bg=ubcBlue}
#+LaTeX_HEADER: \setbeamercolor{progress bar}{bg=ubcBlue4, fg=ubcBlue1}
#+LaTeX_HEADER: \setbeamercolor{progress bar in head/foot}{bg=ubcBlue4, fg=ubcBlue1}
#+LaTeX_HEADER: \setbeamercolor{progress bar in section page}{bg=ubcBlue4, fg=ubcBlue1}
#+LaTeX_HEADER: \setbeamercolor{frametitle}{bg=ubcBlue}

#+LaTeX_HEADER: \input{sharedmacros}
#+LaTeX_HEADER: \input{macros}

* Overview

** Two Problems - One Solution

*** Two Problems
- Implementing Gradual Dependent Types

- Denotational Semantics + Metatheory

**** One Soution

- Approximate Normalization + Translation to Static Dependent Types


* Implementing Gradual Dependent Types

** Don't Reinvent the Wheel

*** Long-term goal: gradual types in a full-scale dependent language


*** Machinery
- Many parts to dependent type checking and compilation
  + Compile-time evaluation for comparisons
  + Unification/inference
  + Code generation/optimization
- Want to avoid re-implementing as much of this as possible

*** Efficiency
- Normalizing/comparing types is expensive
- Want to leverage existing techniques
  + E.g. Idris: experimental normalization by compilation to ChezScheme



** Proposed Implementation Strategy

*** Compile gradual dependent types to static dependent types /without changing the static core language/
- Can use existing normalization, unification, etc.

*** Challenge: Effects in gradual language
- Gradual languages: two effects
  + Failure - just model as special value in gradual language
  + Non-termination
- Dependent languages restricted in how non-termination is used
  + Ensures consistency and decidablity of type checking

** The Idris model of Non-termination

*** Definitions marked as "partial"
- Are not checked for termination/productivity
- Allows
  + General recursion
  + Non-positive datatypes


*** At compile-time
- Can hide implementations so partial functions never normalized
- Conservative: some equivalent partial-terms may rejected as non-equal
  + need to normalize to /see/ that are equal
- Ensures type-checking terminates

** Problem with the Idris model
*** Ad-hoc, hard to reason about
- e.g. it's hard to prove that every gradual program's translation is well-typed
  + Need to reason about internal details of normalizer
- Want formalism of Idris-style non-termination, so can prove translation proves
*** We will use Guarded Type Theory as a theoretical model of Idris
- Lets us formalize the notion of "this value not normalized at compile time"
- More on this later

** Translating with Approximate Normalization
*** How can we prevent non-termination during compile time normalization?
+ Separate semantics for compile-time and run-time normalization
+ Only difference: casts $\cast{(\gqm\to\gqm)}{\gqm} \g{f}$
  + Approx: reduces to $\g{\lambda x \ldotp f\ \gqm}$

*** Translation:

- Model approx. $\gqm$ as strictly-positive $Unk = (1 \to Unk) + (Unk \times Unk) \ldots$
- Full translation produces pairs of approximate and exact
- Type computations  only use approximate part

* The Other Side: Denotational Semantics

** Broad Motivation
*** Do gradual dependent types *mean* anything? Do they make sense?
*** What kind of reasoning principles hold for gradual dependent types?
*** What kind of guarantees can we give the programmer?

** Goals for Metatheory
*** Fire Triangle: Can't have all of:
- Conservatively extend CIC
- Strong normalization
- EP-pairs
*** But can get what we really /want/:
- Conservatively extend CIC
- Decidable type-checking
- Weak canonicity
- Gradual Guarantees + other properties
*** Need Approx. Normalization for decidable type-checking

** Why a syntactic model?

*** Want to prove that approximate normalization is terminating

- GDTL approach doesn't scale to inductives
*** Want to prove the GGs for Approx. Normalization
- GDTL Approach to errors was wrong
- GCIC approach simulation-based, complex
  + Even more complex when add approximation
** Prove richer metatheory
*** Theorems that show that gradual dependent types behave as expected
- EP-Pairs, or a version of them
  + Can either have terminating evidence computation OR EP-pairs
  + Not needlessly producing ?
  + Only relevant because ? is a value
  + TODO example of each semantics

- Weak canonicity
  + Nothing gets stuck from gradual types

- Preservation of static propositional equalities
  + i.e. equal static values are equal in the model
  + Weaker version of full-abstraction

*** Often need some sort of logical relation
*** If syntactic model is in consistent calculus, then can prove these things in the target theory itself (unlike $GCIC^{\mathcal{G}}$)

** The Model

*** Model Approximate Normalization in Type Theory (MLTT?)
- Proves that all terms halt
- Decidable type-checking

*** Model exact execution in Guarded Type Theory
- Consistent logic for describing (potentially) non-terminating terms
- Gives non-positive datatypes, can model $\gqm$ exactly

*** Then can prove things about the language using the model

** Guarded Type Theory

*** Introduces:
- A "later" modality $\guarded : Type \to Type$
- Operators $next : A -> \guarded A$
 and $app : \guarded (A \to B) \to \guarded A \to \guarded B$
- Arbitrary /guarded/ fixed-points:
    + $fix : (\guarded A \to A) \to A$
    + $lob : fix\ f = f\ (next\ (fix\ f))$ (but not definitionally)
- Type lifter $\tguarded : \guarded Type \to Type$ (to make recursive types)
- Can be used to make a "lifting monad" $L\ A = A + \guarded (L\ A)$

*** Gives us:
- Non-positive inductive datatypes
- General recursion, but only behind modality

*** Consistent: model in Topos of Trees

** A Model in Guarded Type Theory
*** Universe \ala Tarski
- Data-type of "codes" $\mathbb{C}_\ell : Type$
- "Elements-of" interpretations
  + $El_{approx} : \mathbb{C}_\ell -> Type$
  + $El_{exact }: \mathbb{C}_\ell -> Type$
*** Syntactic Model
- Type semantics $\T{T} : \mathbb{C}_\ell$
- Expression semantics: if $t : T$ then  $\E{t} : (El_{approx}\ \T{T}) \times (L\ (El_{exact}\ \T{T}))$
- Functions : ${El_{exact}\ \T{(x : T_1)\to T_2}} = {El_{exact}\ \T{T_1} \to L\ (El_{exact}\ \T{T_2})}$
  + Allows for non-termination


** Model of the unknown type

*** GTT allows for exact definition:
- $Unk = {fix\ (\lambda (x : \guarded Type) \ldotp} {(Unk \times Unk) + (\tguarded X \to L\  Unk)}  + \ldots)$
- Have $\theta : \guarded A \to L\ A$

- Then write $cast : (c_1 \ c_2 : \mathbb{C}_\ell)\to El_{exact}\ c_1 \to (El_{exact}\ c_2)$
- Have $f : Unk \to L\ Unk$ is cast to $\lambda (x : \guarded Unk) \to f >>= (\theta\ x)$


** Mapping GTT to Idris

*** Straightforward mapping of GTT to partial Idris
- $fix$ becomes general recursion
- Guarded non-positive types just turn into partial non-positive types

***  $fix\ f = f\ (next\  (fix\ f))$ is /not definitional/ in GTT:
- Know that type derivation never relies on normalizing non-terminating functions
- So neither does Idris typing

** Metatheory Strategy

*** Start with syntactic model

*** Show that each reduction produces an equal value in the model

*** Logical Relation for semantic precision in the model
- Related types have a Galois Connection
- Related equality witnesses are as precise as the endpoints
- Related functions produce related results

*** Soundness: Syntactic Precision implies Semantic Precision
- GGs as corollary
-

* TODO

** TODO GTT thread on zulip

** TODO examples of different semantics for non-term evidence
