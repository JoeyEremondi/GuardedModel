
-- Bound on the size of the meet on codes, assuming we have meet, cast, etc. for smaller types


open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary
open import DecPEq
open import Cubical.Data.Nat
open import Cubical.Data.Vec
open import Cubical.Data.Sum
open import Cubical.Data.Bool
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import Cubical.Data.Equality
open import Constructors
open import UnkGerm
open import GuardedAlgebra
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Prelude

open import ApproxExact
open import InductiveCodes
-- open import CodePair
open import Sizes

open import CastComp.Interface

module CastComp.CodeMeetSize {{dt : DataTypes}} {{dg : DataGerms}} {{ic : CodesForInductives}}
    (‚ÅáAllowed : Bool) {‚Ñì}  (csize vsize : Size) (scm : SmallerCastMeet ‚Ñì ‚ÅáAllowed csize vsize)

  where

open import Code
open import Head
open import Util


open import CastComp.DescMeet{{dt = dt}} {{dg}} {{ic}}  (‚ÅáAllowed) {‚Ñì} csize vsize scm
open import CastComp.CodeMeet {‚Ñì} (‚ÅáAllowed) csize vsize scm
open SmallerCastMeet scm

open import Assumption


descMeetSize : ‚àÄ {cB1 cB2 cBTarget skel oTop}
      ‚Üí (D1 : ‚ÑÇDesc cB1 skel)
      ‚Üí (D2 : ‚ÑÇDesc cB2 skel)
      ‚Üí (lto : oTop <‚Çõ csize )
      ‚Üí (ltB : (codeSize cBTarget ‚â§‚Çõ smax  (codeSize cB1)  (codeSize cB2)))
      ‚Üí (lt : smax ( (descSize D1) ) ( (descSize D2)) ‚â§‚Çõ oTop)
      ‚Üí descSize {cB = cBTarget} (descMeet D1 D2 lto ltB lt) ‚â§‚Çõ smax (descSize D1) (descSize D2)
descMeetSize (CodeModule.CEnd) (CodeModule.CEnd ) lto ltB lt = smax-‚â§L
descMeetSize (CodeModule.CArg c ar1 D1 cB' reflp) (CodeModule.CArg c‚ÇÅ ar2 D2 cB'' reflp) lto ltB lt
  = ‚â§‚Çõ-sucMono
    (smax*-mono
      (‚â§‚Çõ-limiting (Œª k ‚Üí _ ‚äìSize _ By _  ‚â§‚®ü smax-mono (‚â§‚Çõ-cocone _) (‚â§‚Çõ-cocone _) )
      , descMeetSize D1 D2 lto (DescMeetArg.ltcB c ar1 D1 c‚ÇÅ ar2 D2 lto ltB lt) (smax-mono (‚â§suc (smax*-‚â§-n (FLit 1))) (‚â§suc (smax*-‚â§-n (FLit 1)))
                                                                                  ‚â§‚®ü lt)
      , smax-sucMono (smax-mono ltB (‚â§‚Çõ-limiting (Œª k ‚Üí _ ‚äìSize _ By hide ‚â§‚®ü smax-mono (‚â§‚Çõ-cocone _) (‚â§‚Çõ-cocone _))) ‚â§‚®ü smax-swap4) , tt)
    ‚â§‚®ü smax*-swap)
    ‚â§‚®ü smax-sucMono ‚â§‚Çõ-refl
descMeetSize (CodeModule.CRec c j D1 cB' reflp) (CodeModule.CRec c‚ÇÅ j‚ÇÅ D2 cB'' reflp) lto ltB lt
  = ‚â§‚Çõ-sucMono
    (smax*-mono (
      ‚â§‚Çõ-limiting (Œª k ‚Üí _ ‚äìSize _ By hide ‚â§‚®ü  smax-mono (‚â§‚Çõ-cocone _) (‚â§‚Çõ-cocone _))
      , descMeetSize D1 D2 lto ltB (DescMeetHRec.ltcB c j D1 c‚ÇÅ j‚ÇÅ D2 lto ltB lt)
      , smax-sucMono (smax-mono ltB (‚â§‚Çõ-limiting (Œª k ‚Üí _ ‚äìSize _ By hide ‚â§‚®ü smax-mono (‚â§‚Çõ-cocone _) (‚â§‚Çõ-cocone _))) ‚â§‚®ü smax-swap4) , tt)
      ‚â§‚®ü smax*-swap)
    ‚â§‚®ü smax-sucMono ‚â§‚Çõ-refl


codeMeetSize : ‚àÄ {h1 h2}
  ‚Üí (c1 c2 : ‚ÑÇ ‚Ñì )
  ‚Üí (view : HeadMatchView h1 h2)
  ‚Üí (eq1 : h1 ‚â°p codeHead c1)
  ‚Üí (eq2 : h2 ‚â°p codeHead c2)
  ‚Üí (eq3 : smax (codeSize c1) ( codeSize c2) ‚â°p csize)
  ‚Üí codeSize (codeMeet c1 c2 view eq1 eq2 eq3) ‚â§‚Çõ smax (codeSize c1) (codeSize c2)

codeMeetSize c1 c2 (H‚ÑßL reflp) eq1 eq2 reflp = codeMaxSuc {c1 = c1} {c2 = c2}
codeMeetSize c1 c2 (H‚ÑßR reflp) eq1 eq2 reflp = codeMaxSuc {c1 = c1} {c2 = c2}
codeMeetSize c1 c2 (HNeq x) eq1 eq2 reflp = codeMaxSuc {c1 = c1} {c2 = c2}
codeMeetSize c1 c2 (H‚ÅáL reflp x‚ÇÅ) eq1 eq2 reflp = smax-‚â§R
codeMeetSize c1 c2 (H‚ÅáR reflp) eq1 eq2 reflp = smax-‚â§L
codeMeetSize CodeModule.Cùüô CodeModule.Cùüô (HEq {h1 = Hùüô} reflp) eq1 eq2 reflp = smax-‚â§L
codeMeetSize CodeModule.Cùüò CodeModule.Cùüò (HEq {h1 = Hùüò} reflp) eq1 eq2 reflp = smax-‚â§L
codeMeetSize CodeModule.C‚Ñï CodeModule.C‚Ñï (HEq {h1 = H‚Ñï} reflp) eq1 eq2 reflp = smax-‚â§L
codeMeetSize CodeModule.CType CodeModule.CType (HEq {h1 = HType} reflp) reflp reflp reflp = smax-‚â§L
codeMeetSize (CodeModule.CŒ† c1 cod) (CodeModule.CŒ† c2 cod‚ÇÅ) (HEq {h1 = HŒ†} reflp) eq1 eq2 reflp
  = ‚â§‚Çõ-sucMono
    (smax-mono
      ( (c1 ‚äìSize c2 By hide) )
      ((‚â§‚Çõ-limiting  Œª k ‚Üí _ ‚äìSize _ By hide ‚â§‚®ü ‚â§‚Çõ-cocone  _ ‚â§‚®ü ‚â§‚Çõ-cocone  _)
                 ‚â§‚®ü smax-lim2L _ _)
      ‚â§‚®ü smax-swap4)
  ‚â§‚®ü smax-sucMono (‚â§‚Çõ-refl)
codeMeetSize (CodeModule.CŒ£ c1 cod) (CodeModule.CŒ£ c2 cod‚ÇÅ) (HEq {h1 = HŒ£} reflp) eq1 eq2 reflp
  = ‚â§‚Çõ-sucMono
    (smax-mono
      ( (c1 ‚äìSize c2 By hide) )
      ((‚â§‚Çõ-limiting  Œª k ‚Üí _ ‚äìSize _ By hide ‚â§‚®ü ‚â§‚Çõ-cocone  _ ‚â§‚®ü ‚â§‚Çõ-cocone  _)
                 ‚â§‚®ü smax-lim2L _ _)
      ‚â§‚®ü smax-swap4)
  ‚â§‚®ü smax-sucMono (‚â§‚Çõ-refl)
codeMeetSize (CodeModule.C‚â° c1 x y) (CodeModule.C‚â° c2 x‚ÇÅ y‚ÇÅ) (HEq {h1 = H‚âÖ} reflp) eq1 eq2 reflp
  = ‚â§‚Çõ-sucMono ( (c1 ‚äìSize c2 By hide) ) ‚â§‚®ü smax-sucMono (‚â§‚Çõ-refl )
codeMeetSize (CodeModule.CŒº tyCtor c1 D x) (CodeModule.CŒº tyCtor‚ÇÅ c2 D‚ÇÅ x‚ÇÅ) (HEq {h1 = HCtor x‚ÇÇ} reflp) reflp reflp reflp
  = ‚â§‚Çõ-sucMono (smax-mono (_ ‚äìSize _ By hide) (extFinLim _ _ (Œª d ‚Üí descMeetSize (D d) (D‚ÇÅ d) (smax-sucMono (smax-mono (FinLim-cocone _ _ ‚â§‚®ü smax-‚â§R) (FinLim-cocone _ _ ‚â§‚®ü smax-‚â§R))) smax-‚â§L ‚â§‚Çõ-refl
    ‚â§‚®ü FinLim-cocone _ d) ‚â§‚®ü smax-FinLim2 _ _) ‚â§‚®ü smax-swap4) ‚â§‚®ü smax-sucMono ‚â§‚Çõ-refl
  -- ‚â§‚Çõ-sucMono (smax-mono ( (_ ‚äìSize _ By hide) ) ( (extFinLim _ _ (Œª d ‚Üí  {!!}) ‚â§‚®ü smax-FinLim2 _ _ ) ) ‚â§‚®ü smax-swap4)
  -- ‚â§‚®ü smax-sucMono (‚â§‚Çõ-refl )
codeMeetSize (CCumul ‚¶É suc< ‚¶Ñ c1) (CCumul {{suc<}} c2) (HEq {h1 = .HCumul} reflp) reflp reflp reflp
  = oCodeMeetSize (self-1 true) c1 c2 reflp reflp
  -- ‚â§‚Çõ-sucMono (oCodeMeetSize self-1 reflp c1 c2 reflp)
  -- ‚â§‚®ü smax-sucMono (‚â§‚Çõ-refl)
codeMeetSize C‚Åá (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
codeMeetSize C‚Ñß (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
codeMeetSize Cùüò (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
codeMeetSize Cùüô (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
codeMeetSize C‚Ñï (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
codeMeetSize CType (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
codeMeetSize (CŒ† c1 cod) (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
codeMeetSize (CŒ£ c1 cod) (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
codeMeetSize (C‚â° c1 x y) (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
codeMeetSize (CŒº tyCtor c1 D x) (CCumul ‚¶É suc< ‚¶Ñ c2) (HEq {h1 = .HCumul} reflp) () reflp reflp
-- codeMeetSize _ _ _ _ _ _ = {!!}
