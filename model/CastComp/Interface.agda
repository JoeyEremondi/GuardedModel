
open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary
open import DecPEq
open import Cubical.Data.Nat
open import Cubical.Data.Sum
import Cubical.Data.Empty as Empty
-- open import Cubical.Data.Bool
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
-- open import Cubical.Data.Equality
open import UnkGerm
open import GuardedAlgebra
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Prelude

open import ApproxExact
open import InductiveCodes
open import Sizes
-- open import CodePair

module CastComp.Interface {{_ : DataTypes}} {{_ : DataGerms}} {{_ : CodesForInductives}}   where

open import Code
open import Head
open import Util
-- open Ord ‚ÑÇ El ‚Ñß Cùüô refl
open import Cubical.Data.FinData.Properties as Fin
import Cubical.Data.Nat.Order as Nat

import GuardedModality as ‚ñπMod
open import Cubical.Data.Sum

open import Assumption



-- The tuple of things that are decreasing in our recursive calls
-- (A) Bool: flag for whether we're allowed to see ‚Åá as a type
--  this is there for strict positivity: we get an extra recursive call when computing meet or cast of terms in the germ of an inductive type
--  because we're guaranteed that, within an inductive type, we never see unguarded ‚Åá to the left of an arrow (because of strict positivity).
--  This lets us do induction on the size of the value for everything but functions, where we know we're not seeing ‚Åá
-- (B) ‚Ñï: the universe level we're currently in. We need this so that, when (c  = CType) and (v1 v2 : El c), for the meet of v1 and v2, we can call codeMeet
--    at the smalelr universe, letting us move the size of the value into the code value
-- (C) Code size: the size of the code, either being combined with code meet, or the code of the values being cast/composed
-- (D) Value size: the size of the value currently being operated on. Set to S0 for codeMeet.
CastCompMeasure : Set
CastCompMeasure = ‚Ñï √ó Size √ó Size

-- We can define the lexicographic-ordering on this measure
_<CastComp_ : (m1 m2 : CastCompMeasure) ‚Üí Set
_<CastComp_ = _<Lex_ {_<a_ = Nat._<_} {_<b_ = _<Lex_ {_<a_ = _<‚Çõ_}  {_<b_ = _<‚Çõ_}}

CastCompWellFounded : WellFounded (Œª x y ‚Üí ‚à• x <CastComp y ‚à•‚ÇÅ)
CastCompWellFounded = ‚à•LexWellFounded‚à• Nat.<-wellfounded (LexWellFounded sizeWF sizeWF)

open import Germ
record SizedCastMeet (‚Ñì : ‚Ñï) (csize vsize : Size) : Set where
  field

    o‚Åá : ‚àÄ {{√¶ : √Ü}}
      ‚Üí (c : ‚ÑÇ ‚Ñì)
      ‚Üí (pfc1 : codeSize c ‚â°p csize )
      ‚Üí (El c)

    oMeet : ‚àÄ {{√¶ : √Ü}}
      ‚Üí (c : ‚ÑÇ ‚Ñì)
      ‚Üí (x y : El c)
      ‚Üí ( pfc : (codeSize c)  ‚â°p csize)
      ‚Üí L√Ü (El c)

    -- oDataGermMeet : ‚àÄ {{√¶ : √Ü}} {tyCtor}
    --   ‚Üí (x y : ‚ÅáGermTy ‚Ñì tyCtor)
    --   ‚Üí smax (GermSize x) (GermSize y) ‚â°p size
    --   ‚Üí L√Ü (‚ÅáGermTy ‚Ñì tyCtor)


    oCodeMeet :
      (c1 c2 : ‚ÑÇ ‚Ñì)
      ‚Üí ( pfc1 : smax (codeSize c1) (codeSize c2)  ‚â°p csize )
      ‚Üí (‚ÑÇ ‚Ñì)

    oCodeMeetSize :
      (c1 c2 : ‚ÑÇ ‚Ñì)
      ‚Üí ( pfc1 : smax (codeSize c1) (codeSize c2)  ‚â°p csize )
      ‚Üí codeSize (oCodeMeet c1 c2 pfc1) ‚â§‚Çõ smax (codeSize c1) (codeSize c2)

    oCast : ‚àÄ {{√¶ : √Ü}}
      ‚Üí (csource cdest : ‚ÑÇ ‚Ñì)
      ‚Üí  (x : El csource)
      ‚Üí ( pfc1 : (smax (codeSize csource) (codeSize cdest)  ‚â°p csize))
      -> L√Ü ( Œ£[ xdest ‚àà El cdest ]( elSize cdest xdest ‚â§‚Çõ elSize csource x ) )


open SizedCastMeet public

data Hide (a : Set) : Set where
  hide : ‚àÄ {arg : a} ‚Üí Hide a

reveal : ‚àÄ {a} ‚Üí Hide a ‚Üí a
reveal (hide {arg = x}) = x


Decreasing_ : ‚àÄ {a : Set} ‚Üí a ‚Üí Hide a
Decreasing_ x = hide {arg = x}

infixr 99 Decreasing_

--If cSize is a codeSize, then cSize is not zero and we must not be in ‚Åápos mode
-- codeNotZero : ‚àÄ {‚Ñì} {c : ‚ÑÇ ‚Ñì} {‚ÅáAllowed} {A : Set}
--   ‚Üí {@(tactic assumption) posNoCode : ‚ÅáAllowed ‚â°p ‚Åápos ‚Üí SZ ‚â°p codeSize c}
--   ‚Üí Hide (‚ÅáAllowed ‚â°p ‚Åápos ‚Üí A)
-- codeNotZero {c = c} {posNoCode = posNoCode} = hide {arg = Œª pf ‚Üí Empty.elim (¬¨Z<‚Üë SZ (codeSuc c ‚â§‚®ü pSubst (Œª x ‚Üí x ‚â§‚Çõ SZ) (posNoCode pf) ‚â§‚Çõ-refl))}

-- maxNotZero : ‚àÄ {‚Ñì} {c1 c2 : ‚ÑÇ ‚Ñì} {‚ÅáAllowed} {A : Set}
--   ‚Üí {@(tactic assumption) posNoCode : ‚ÅáAllowed ‚â°p ‚Åápos ‚Üí SZ ‚â°p smax (codeSize c1) (codeSize c2)}
--   ‚Üí Hide (‚ÅáAllowed ‚â°p ‚Åápos ‚Üí A)
-- maxNotZero {c1 = c1} {c2 = c2} {posNoCode = posNoCode} = hide {arg = Œª pf ‚Üí Empty.elim (¬¨Z<‚Üë SZ (codeSuc c1 ‚â§‚®ü smax-‚â§L ‚â§‚®ü pSubst (Œª x ‚Üí x ‚â§‚Çõ SZ) (posNoCode pf) ‚â§‚Çõ-refl ))}


record SmallerCastMeet (‚Ñì : ‚Ñï) (csize vsize : Size) : Set where
  constructor smallerCastMeet
  field
    self : ‚àÄ {‚Ñì' cs vs} ‚Üí ‚à• ( ‚Ñì' , cs , vs) <CastComp ( ‚Ñì , csize , vsize) ‚à•‚ÇÅ ‚Üí SizedCastMeet ‚Ñì' cs vs
    ‚ñπself : ‚àÄ {‚Ñì' cs vs} ‚Üí ‚ñπMod.‚ñπ (SizedCastMeet ‚Ñì' cs vs)
  --useful helper
  <cSize : ‚àÄ {cs} ‚Üí (cs <‚Çõ csize) ‚Üí ‚à• ( ‚Ñì , cs , SZ ) <CastComp ( ‚Ñì , csize , vsize) ‚à•‚ÇÅ
  <cSize lt = ‚à£ <LexR reflc (<LexL lt) ‚à£‚ÇÅ
  <vSize : ‚àÄ {vs} ‚Üí (vs <‚Çõ vsize) ‚Üí ‚à• ( ‚Ñì , csize , vs ) <CastComp ( ‚Ñì , csize , vsize) ‚à•‚ÇÅ
  <vSize lt = ‚à£ <LexR reflc (<LexR reflc lt) ‚à£‚ÇÅ

  infix 20 ‚Åá_By_
  ‚Åá_By_ : ‚àÄ {{_ : √Ü}}
      ‚Üí (c : ‚ÑÇ ‚Ñì) ‚Üí (lt : Hide (codeSize c <‚Çõ csize)) ‚Üí (El c)
  ‚Åá_By_  c (hide {lt}) = o‚Åá (self (<cSize lt)) c reflp

  infix 20 [_]‚Åá_By_
  [_]‚Åá_By_ : ‚àÄ (√¶ : √Ü)
      ‚Üí (c : ‚ÑÇ ‚Ñì) ‚Üí (lt : Hide (codeSize c <‚Çõ csize)) ‚Üí (El {{√¶ = √¶}} c)
  [_]‚Åá_By_ √¶  = ‚Åá_By_ {{√¶}}

  infix 20 _‚àã_‚äì_By_
  _‚àã_‚äì_By_ : ‚àÄ {{_ : √Ü}}
      ‚Üí (c : ‚ÑÇ ‚Ñì)
      ‚Üí (x y : El c)
      ‚Üí (Hide (codeSize c <‚Çõ csize))
      ‚Üí L√Ü (El c)
  _‚àã_‚äì_By_  c x y (hide {ltc}) = oMeet (self (<cSize ltc)) c x y reflp
  -- with ‚Åámatch ‚ÅáAllowed
  -- ... | inl reflp = oMeet (self (<Size ltc)) c x y reflp
  -- ... | inr (inl reflp) = oMeet (self (<Size ltc)) c x y  reflp
  -- ... | inr (inr reflp) = oMeet (self (<Size ltc)) c x y reflp
  --     -- oMeet (self  (<Size lt)) c x y reflp

  infix 20 [_]_‚àã_‚äì_By_
  [_]_‚àã_‚äì_By_ : ‚àÄ (√¶ : √Ü)
      ‚Üí (c : ‚ÑÇ ‚Ñì)
      ‚Üí (x y : El {{√¶ = √¶}} c)
      ‚Üí  (Hide( codeSize c <‚Çõ csize))
      ‚Üí L√Ü {{√¶ = √¶}} (El {{√¶ = √¶}} c)
  [_]_‚àã_‚äì_By_ √¶ = _‚àã_‚äì_By_ {{√¶}}


  infix 20 _‚äì_By_
  _‚äì_By_ :
      (c1 c2 : ‚ÑÇ ‚Ñì)
      ‚Üí (lt : Hide (smax (codeSize c1) (codeSize c2) <‚Çõ csize))
      ‚Üí (‚ÑÇ ‚Ñì)
  _‚äì_By_  c1 c2 (hide {lt}) =
      oCodeMeet (self (<cSize lt)) c1 c2 reflp

  -- infix 20 _‚äì‚Åá_By_
  -- _‚äì‚Åá_By_ :
  --     {{_ : √Ü}}
  --     (x1 x2 : ‚ÅáTy ‚Ñì)
  --     ‚Üí (cpf : S1 ‚â°p cSize)
  --     ‚Üí (lt : Hide (smax (elSize C‚Åá x1) (elSize C‚Åá x2 ) <‚Çõ vSize))
  --     ‚Üí L√Ü (‚ÅáTy ‚Ñì)
  -- _‚äì‚Åá_By_  x1 x2 cpf (hide {lt}) = oMeet (self (<VSize (ptoc cpf) lt)) C‚Åá x1 x2 {!!} reflp

  codeMeetEq : ‚àÄ
      (c1 c2 : ‚ÑÇ ‚Ñì)
      ‚Üí {lt1 lt2 : Hide (smax (codeSize c1) (codeSize c2) <‚Çõ csize)}
      ‚Üí ApproxEl (c1 ‚äì c2 By lt1) ‚â° ApproxEl (c1 ‚äì c2 By lt2)
  codeMeetEq  c1 c2 {hide {arg = lt1}} {hide {arg = lt2}} = (cong (Œª lt ‚Üí ApproxEl (oCodeMeet (self lt) c1 c2 reflp))) (squash‚ÇÅ (<cSize lt1) (<cSize lt2))

  infix 20 _‚äìSize_By_
  _‚äìSize_By_ :
      (c1 c2 : ‚ÑÇ ‚Ñì)
      ‚Üí (lt : Hide (smax (codeSize c1) (codeSize c2) <‚Çõ csize))
      ‚Üí  codeSize (c1 ‚äì c2 By lt ) ‚â§‚Çõ smax (codeSize c1) (codeSize c2)
  _‚äìSize_By_ c1 c2 (hide {lt}) =
      oCodeMeetSize (self (<cSize lt)) c1 c2 reflp

  infix 20 ‚ü®_‚áê_‚ü©_By_
  ‚ü®_‚áê_‚ü©_By_ : ‚àÄ {{_ : √Ü}}
      ‚Üí (cdest csource : ‚ÑÇ ‚Ñì)
      ‚Üí (x : El csource)
       ‚Üí (Hide (smax (codeSize csource)  (codeSize cdest) <‚Çõ csize))
      ‚Üí L√Ü (El cdest)
  ‚ü®_‚áê_‚ü©_By_ cdest csource x (hide {clt})
    = fst <$> oCast (self (<cSize clt)) csource cdest x reflp


  infix 20 [_]‚ü®_‚áê_‚ü©_By_
  [_]‚ü®_‚áê_‚ü©_By_ : ‚àÄ (√¶ : √Ü)
      ‚Üí (cdest csource : ‚ÑÇ ‚Ñì)
      ‚Üí (x : El {{√¶ = √¶}} csource)
      ‚Üí     Hide  (smax (codeSize csource)  (codeSize cdest) <‚Çõ csize)
      ‚Üí L√Ü {{√¶ = √¶}} (El {{√¶ = √¶}} cdest)
  [_]‚ü®_‚áê_‚ü©_By_ √¶ = ‚ü®_‚áê_‚ü©_By_ {{√¶}}


  -- Helper to manage the common case of having two elements of different codes' types,
  -- casting them to the meet code, then taking the meet of those two elements
  infix 20 _,,_‚àã_‚äì_By_
  _,,_‚àã_‚äì_By_ :
    ‚àÄ {{√¶ : √Ü}} ‚Üí
    ‚àÄ c1 c2 ‚Üí
      (x : El c1) ‚Üí
      (y : El c2) ‚Üí
      (clt : Hide (smax (codeSize c1) (codeSize c2) <‚Çõ csize)) ‚Üí
      -- (vlt : Hide (‚ÅáAllowed ‚â°p ‚Åápos ‚Üí smax (elSize c1 x) (elSize c2 y) <‚Çõ vSize)) ‚Üí
      {lt : _} ‚Üí
      L√Ü (El (c1 ‚äì c2 By (hide {arg = lt }) ))
  _,,_‚àã_‚äì_By_  c1 c2 x1 x2 clt  {lt = lt} = do
   -- let lt = smax<-‚àû (reveal lt‚àû)
   let c12 = (c1 ‚äì c2 By hide {arg = lt})
   let
     lt1 =
       ‚â§‚Çõ-sucMono
         (smax-monoR (c1 ‚äìSize c2 By hide {arg = lt})
         ‚â§‚®ü smax-assocL (codeSize c1) (codeSize c1) (codeSize c2)
         ‚â§‚®ü smax-monoL smax-idem
         )
         ‚â§‚®ü reveal clt
   let
     lt2 =
       ‚â§‚Çõ-sucMono (
         smax-monoR (c1 ‚äìSize c2 By hide {arg = lt} ‚â§‚®ü smax-commut _ _)
         ‚â§‚®ü smax-assocL _ _ _
         ‚â§‚®ü smax-commut _ _
         ‚â§‚®ü smax-monoR smax-idem
         )
       ‚â§‚®ü reveal clt
   let
     lt12 =
       ‚â§‚Çõ-sucMono (
         (c1 ‚äìSize c2 By hide {arg = lt})
         -- ‚â§‚®ü smax-mono (smax‚àû-self _) (smax‚àû-self _)
         )
       ‚â§‚®ü reveal clt
   x1-12 ‚Üê  (‚ü® c12 ‚áê c1 ‚ü© x1
        By
          Decreasing lt1
          -- hide {arg = Œª pf ‚Üí ‚â§< smax-‚â§L (reveal vlt pf) }
          )
   x2-12 ‚Üê  (‚ü® c12 ‚áê c2 ‚ü© x2
     By Decreasing lt2
     )
   c12 ‚àã x1-12 ‚äì x2-12
     By Decreasing lt12


  [_]_,,_‚àã_‚äì_By_ :
    ‚àÄ (√¶ : √Ü)
      c1 c2 ‚Üí
      (x : El {{√¶ = √¶}} c1) ‚Üí
      (y : El {{√¶ = √¶}} c2) ‚Üí
      (clt : Hide (smax ( codeSize c1) ( codeSize c2) <‚Çõ csize)) ‚Üí
      {lt : _} ‚Üí
      L√Ü {{√¶ = √¶}} (El {{√¶ = √¶}} (c1 ‚äì c2 By (hide {arg = lt }) ))
  [_]_,,_‚àã_‚äì_By_ √¶ = _,,_‚àã_‚äì_By_ {{√¶ = √¶}}



  ‚ü®_,_‚áê‚äì‚ü©_By_ : ‚àÄ {{√¶ : √Ü}} c1 c2
      {lt : _}
    ‚Üí let c1‚äìc2 = (c1 ‚äì c2 By (hide {arg = lt }) )
    in (x12 : El c1‚äìc2)
    ‚Üí (clt : Hide ( smax (codeSize c1)  (codeSize c2) <‚Çõ csize))
    ‚Üí L√Ü (El c1 √ó El c2)
  ‚ü®_,_‚áê‚äì‚ü©_By_ c1 c2  {lt = lt} x clt  = do
    let c12 = c1 ‚äì c2 By hide {arg = lt}
    let
      lt1 =
        ‚â§‚Çõ-sucMono (
          smax-monoL (c1 ‚äìSize c2 By hide )
          ‚â§‚®ü smax-commut _ _
          ‚â§‚®ü smax-assocL _ _ _
          ‚â§‚®ü smax-monoL smax-idem
          )
        ‚â§‚®ü reveal clt
    let
      lt2 =
        ‚â§‚Çõ-sucMono (
          smax-monoL (c1 ‚äìSize c2 By hide )
          ‚â§‚®ü smax-assocR _ _ _
          ‚â§‚®ü smax-monoR smax-idem)
        ‚â§‚®ü reveal clt
    x1 ‚Üê ‚ü® c1 ‚áê c12 ‚ü© x
      By Decreasing lt1
    x2 ‚Üê  ‚ü® c2 ‚áê c12 ‚ü© x
      By Decreasing lt2
    pure (x1 , x2)

  [_]‚ü®_,_‚áê‚äì‚ü©_By_ : ‚àÄ (√¶ : √Ü) c1 c2
    ‚Üí {lt : _}
    ‚Üí let c1‚äìc2 = (c1 ‚äì c2 By (hide {arg = lt }) )
    in (x12 : El {{√¶ = √¶}} c1‚äìc2)
    ‚Üí (clt : Hide (smax (codeSize c1)  (codeSize c2) <‚Çõ csize))
    ‚Üí L√Ü {{√¶ = √¶}} (El {{√¶ = √¶}} c1 √ó El {{√¶ = √¶}} c2)
  [_]‚ü®_,_‚áê‚äì‚ü©_By_ √¶ =  ‚ü®_,_‚áê‚äì‚ü©_By_ {{√¶ = √¶}}

  infix 20 ‚ü®_‚áê_‚ü©‚Çõ_By_
  ‚ü®_‚áê_‚ü©‚Çõ_By_ : ‚àÄ {{_ : √Ü}}
      ‚Üí (cdest csource : ‚ÑÇ ‚Ñì)
      ‚Üí (x : El csource)
      ‚Üí  Hide (smax (codeSize csource)  (codeSize cdest) <‚Çõ csize)
      ‚Üí L√Ü ( Œ£[ xdest ‚àà El cdest ]( elSize cdest xdest ‚â§‚Çõ elSize csource x ) )
  ‚ü®_‚áê_‚ü©‚Çõ_By_ cdest csource x (hide {clt}) = oCast (self (<cSize clt)) csource cdest x reflp

  self-1 : ‚àÄ {cs vs} {{ inst : 0< ‚Ñì }} ‚Üí SizedCastMeet (pred‚Ñï ‚Ñì) cs vs
  self-1 ‚¶É suc< ‚¶Ñ = self ‚à£ <LexL Nat.‚â§-refl ‚à£‚ÇÅ
  Lself :  ‚àÄ  {√¶ ‚Ñì' cs vs} ‚Üí (√¶ ‚â°p Exact) ‚Üí L√Ü {{√¶ = √¶}} (SizedCastMeet ‚Ñì' cs vs)
  Lself reflp = Later {{Exact}} Œª tic ‚Üí pure ‚¶É Exact ‚¶Ñ (‚ñπself  tic)

FixCastMeet :
  (‚àÄ { ‚Ñì  csize vsize} ‚Üí SmallerCastMeet ‚Ñì csize vsize ‚Üí SizedCastMeet ‚Ñì csize vsize)
  ‚Üí ‚àÄ ‚Ñì csize vsize ‚Üí SizedCastMeet ‚Ñì csize vsize
FixCastMeet f  =
  ‚ñπMod.fix Œª ‚ñπself ‚Üí
    Œª _ _ _ ‚Üí
    WFI.induction CastCompWellFounded {P = Œª {(‚Ñì' , cs , vs) ‚Üí SizedCastMeet ‚Ñì' cs vs}}
      (Œª {(‚Ñì' , cs , vs) ‚Üí Œª self ‚Üí f (smallerCastMeet (self ( _ , _ , _)) Œª {‚Ñì'} {cs} {vs} ‚Üí Œª tic ‚Üí ‚ñπself tic ‚Ñì' cs vs)}) _
