


-- Bound on the size of the meet on codes, assuming we have meet, cast, etc. for smaller types


open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary
open import DecPEq
open import Cubical.Data.Nat
open import Cubical.Data.Sum
open import Cubical.Data.Bool
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import Constructors
open import UnkGerm
open import GuardedAlgebra
open import Cubical.Foundations.Transport
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism

open import ApproxExact
open import InductiveCodes
open import Sizes
-- open import CodePair

open import CastComp.Interface

module CastComp.ToFromDataGerm {{dt : DataTypes}} {{dg : DataGerms}} {{ic : CodesForInductives}}
    (‚ÅáAllowed : Bool) {‚Ñì} (cSize : Size)  (scm : SmallerCastMeet ‚Ñì ‚ÅáAllowed cSize )

  where

open import Head
open import Util
open import GTypes

open import W

open SmallerCastMeet scm
open import WMuConversion
open import Cubical.Foundations.Isomorphism


open import Code

open import CastComp.CastCommandResp ‚ÅáAllowed cSize scm

-- Helper function to take the field-by-field meet for a constructor
descElToGermAppr : ‚àÄ {{√¶ : √Ü}} {cB : ‚ÑÇ ‚Ñì} {tyCtor : CName} { skel}
      ‚Üí (D : ‚ÑÇDesc  cB skel)
      ‚Üí (DG : GermCtor skel)
      ‚Üí (isCode : GermCtorIsCode ‚Ñì DG)
      ‚Üí (E : DCtors ‚Ñì tyCtor)
      ‚Üí (b : ApproxEl cB)
      ‚Üí (x : ‚ü¶ interpDesc D b ‚üßF  (Œª √¶ ‚Üí WÃÉ {{√¶ = √¶}} (Œª √¶ ‚Üí Arg (Œª d ‚Üí interpDesc {{√¶ = √¶}} (E d) Gtt))) tt )
      ‚Üí (lto : descSize D <‚Çõ cSize)
      ‚Üí (ltB : codeSize cB <‚Çõ cSize)
      ‚Üí (œÜ : (r : ResponseD D b (toApproxCommandD D b (‚ü¶_‚üßF.command x)) ) ‚Üí ‚ÅáTy ‚Ñì )
      ‚Üí ((r : GermResponse DG) ‚Üí ‚ÅáTy ‚Ñì)
descElToGermAppr (CodeModule.CArg c x‚ÇÅ D cB' x‚ÇÇ) (GArg A DG) (GArgCode cr cIso rest) E b (FC (a , com) resp respEx) lto ltB œÜ (inl r) =
  let
    rCast = ‚ü® {!!} ‚áê cr ‚ü© approx (Iso.fun cIso r) approxBy {!!}
    respR = resp {!!}
  in {!!}
descElToGermAppr (CodeModule.CArg c x‚ÇÅ D cB' x‚ÇÇ) (GArg A DG) (GArgCode cr cIso rest) E b (FC (a , com) resp respEx) lto ltB œÜ (inr r) =
  descElToGermAppr D DG rest E (b , approx a) (FC com (Œª rr ‚Üí resp {!!}) {!!}) {!!} {!!} {!!} r
descElToGermAppr (CodeModule.CRec c x‚ÇÅ D cB' x‚ÇÇ) (GRec A DG) isCode E b x lto ltB œÜ r = {!!}

-- -- Meets for members of inductive types
-- descMuMeet : ‚àÄ {{√¶ : √Ü}} {tyCtor : CName}
--       ‚Üí (Ds : DCtors ‚Ñì tyCtor)
--       ‚Üí (x y : WÃÉ (Œª √¶ ‚Üí Arg (Œª d ‚Üí interpDesc {{√¶ = √¶}} (Ds d) Gtt)) tt  )
--       ‚Üí (lto : ‚àÄ {d} ‚Üí descSize (Ds d) <‚Çõ cSize)
--       ‚Üí (lto' : S1 <‚Çõ cSize)
--       ‚Üí L√Ü (WÃÉ (Œª √¶ ‚Üí Arg (Œª d ‚Üí interpDesc {{√¶ = √¶}} (Ds d) Gtt)) tt  )
-- descMuBindMeet : ‚àÄ {{√¶ : √Ü}} {tyCtor : CName}
--       ‚Üí (Ds : DCtors ‚Ñì tyCtor)
--       ‚Üí (x y : L√Ü (WÃÉ (Œª √¶ ‚Üí Arg (Œª d ‚Üí interpDesc {{√¶ = √¶}} (Ds d) Gtt)) tt)  )
--       ‚Üí (lto : ‚àÄ {d} ‚Üí descSize (Ds d) <‚Çõ cSize)
--       ‚Üí (lto' : S1 <‚Çõ cSize)
--       ‚Üí L√Ü (WÃÉ (Œª √¶ ‚Üí Arg (Œª d ‚Üí interpDesc {{√¶ = √¶}} (Ds d) Gtt)) tt  )

-- descMuMeet Ds W‚Ñß y lto lto' = pure W‚Ñß
-- descMuMeet Ds x W‚Ñß lto lto' = pure W‚Ñß
-- descMuMeet Ds W‚Åá y lto lto' = pure y
-- descMuMeet Ds x W‚Åá lto lto' = pure x
-- descMuMeet {{√¶ = √¶}} Ds (Wsup (FC (d , com1) resp1 exact1)) (Wsup (FC (d2 , com2) resp2 exact2)) lto lto' with decFin d d2
-- ... | no neq = pure W‚Ñß
-- ... | yes reflp = do
--   -- We need to convince Agda that unit meet with itself is itself
--   let ùüôeq = oMeetùüô (self (<cSize lto'))
--   -- Compute the helper function that lets us call ourselves recursively in descElMeet
--   let œÜ = Œª r1 r2 ‚Üí fromL (descMuMeet ‚¶É √¶ = Approx ‚¶Ñ Ds (resp1 r1) (resp2 r2) lto lto')
--   let œÜEx = Œª pf r1 r2 ‚Üí descMuBindMeet Ds (exact1 pf r1) (exact2 pf r2) lto lto'

--   -- Œª r1 r2 ‚Üí descMuMeet Ds (resp1 r1) (resp2 r2) lto lto'
--   (FC comùüôùüô respùüôùüô exactùüôùüô) ‚Üê descElMeet (Ds d) Ds Gtt Gtt (FC com1 resp1 exact1) (FC com2 resp2 exact2)
--     lto
--     lto'
--     œÜ
--     œÜEx
--   let comRet = substPath (CommandD (Ds d)) ùüôeq comùüôùüô
--   let respRet = Œª r ‚Üí respùüôùüô (transport (cong‚ÇÇ (ResponseD (Ds d)) (sym ùüôeq) (congP‚ÇÇ (Œª i x y ‚Üí toApproxCommandD (Ds d) x y) _ (symP (subst-filler _ _ comùüôùüô))) ) r)
--   let exactRet = Œª pf r ‚Üí exactùüôùüô pf (transport (cong‚ÇÇ (ResponseD (Ds d)) (sym ùüôeq) (congP‚ÇÇ (Œª i x y ‚Üí toApproxCommandD (Ds d) x y) _ (symP (subst-filler _ _ comùüôùüô))) ) r)
--   pure (Wsup (FC (d , comRet) respRet exactRet ))

-- descMuBindMeet Ds (Later x) y lto lto' = Later Œª tic ‚Üí descMuBindMeet Ds (x tic) y lto lto'
-- descMuBindMeet Ds x (Later y)  lto lto' = Later Œª tic ‚Üí descMuBindMeet Ds x (y tic) lto lto'
-- descMuBindMeet Ds (Now x) (Now y)  lto lto' = descMuMeet Ds x y lto lto'
