

{-# OPTIONS --cubical --guarded -v term:50 #-}

-- open import Guarded
open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary
-- open import Cubical.Data.Equality using (_‚â°p_ ; reflp ; cong)
open import DecPEq
open import Cubical.Data.Nat as Nat
import Cubical.Data.Nat.Order as Nat
import Cubical.Induction.WellFounded as Nat
open import Cubical.Data.Vec
open import Cubical.Data.Sum as Sum
open import Cubical.Data.Bool
-- open import Cubical.Data.Equality
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import UnkGerm
open import GuardedAlgebra
import GuardedModality as G
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import InductiveCodes
open import W
-- open import Cubical.Data.Equality using (ptoc)

open import ApproxExact
open import GNat


-- open import InductiveCodes
open import Cubical.Foundations.Transport


-- Brouwer Tree ordinals
-- Based on the presentation by Kraus, Forsburg and Xu
-- https://arxiv.org/abs/2104.02549

-- The main difference is that we allow the limit over the elements of any code type, not just natural numbers

open import InductiveCodes
module CodeSize {{_ : DataTypes}} {{_ : DataGerms}} {{_ : CodesForInductives }} where


open import SizeOrdMultiMax public





open import Code
open import Head
open import Util

open import SizeOrd -- ‚ÑÇ El ‚Ñß Cùüô refl

record CodeSizeF (‚Ñì : ‚Ñï) : Set  where
  constructor codeSizeF
  field
    smallerCodeSize : {{inst : 0< ‚Ñì}} ‚Üí ‚ÑÇ-1 (SmallerCodeAt ‚Ñì ) ‚Üí Size
    smallerElSize : {{√¶ : √Ü }} ‚Üí {{inst : 0< ‚Ñì}} ‚Üí (c : ‚ÑÇ-1 (SmallerCodeAt ‚Ñì)) ‚Üí El-1 (SmallerCodeAt ‚Ñì) c ‚Üí Size

  -- germSize {‚Ñì} tyCtor = wInd (Œª _ ‚Üí LargeSize) (germDescFSize tyCtor (GArg (DName tyCtor) (dataGerm ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)))) LO1 LO1




  codeSize : ‚ÑÇ ‚Ñì ‚Üí Size


  codeSize C‚Åá = S1
  codeSize C‚Ñß = S1
  codeSize Cùüò = S1
  codeSize Cùüô = S1
  codeSize C‚Ñï = S1
  codeSize CType = S1
  codeSize (CŒ† dom cod) =
    S‚Üë (smax
      ( (codeSize dom))
      ( (SLim dom Œª x ‚Üí  (codeSize (cod x)))))
  codeSize (CŒ£ dom cod) =
    S‚Üë (smax
      ( (codeSize dom))
      (  (SLim dom Œª x ‚Üí  (codeSize (cod x)))))
  codeSize  (C‚â° c x y) = S‚Üë ( (codeSize c))
  codeSize (CŒº tyCtor c D x) = S‚Üë (DLim tyCtor Œª d ‚Üí smax (codeSize (‚ÑÇCommand (D d))) (SLim (‚ÑÇCommand (D d)) (Œª com ‚Üí codeSize (‚ÑÇHOResponse (D d) com))))
  codeSize (CCumul {{inst = inst}} c) = S‚Üë (smallerCodeSize c)


  GNatSize : GNat ‚Üí Size
  GNatSize (GSuc x) = S‚Üë (GNatSize x)
  GNatSize x = S1


  record ElSizeFuel : Type1 where
    field
      elSizeConsumeFuel : ‚àÄ {{√¶ : √Ü}} ‚Üí (c : ‚ÑÇ ‚Ñì) ‚Üí El c ‚Üí Size

    -- germUnkSize' : (x : WUnk {{√¶ = Approx}} ‚Ñì) ‚Üí Size
    ‚ÅáSize' : ‚àÄ {{ √¶ : √Ü}} ‚Üí ‚ÅáTy ‚Ñì ‚Üí Size
    GermSize' : ‚àÄ {{ √¶ : √Ü}} {tyCtor : CName} ‚Üí ‚ÅáGermTy ‚Ñì tyCtor ‚Üí Size
    elSize' : ‚àÄ {{√¶ : √Ü}} (c : ‚ÑÇ ‚Ñì) ‚Üí El c ‚Üí Size
    -- ‚ñπelSize' : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí ‚ñπEl c ‚Üí Size
    CŒºSize' : ‚àÄ  {{√¶ : √Ü}}  {tyCtor : CName} (D : DCtors ‚Ñì tyCtor) ‚Üí  ‚ÑÇŒº ‚Ñì tyCtor D ‚Üí Size
    CElSize' : ‚àÄ {{√¶ : √Ü}} {tyCtor : CName} (D : DCtors ‚Ñì tyCtor )  ‚Üí (E : DCtors ‚Ñì tyCtor)
      ‚Üí  (cf : ‚ÑÇFunctor ‚Ñì tyCtor D (‚ÑÇŒº ‚Ñì tyCtor E))
      ‚Üí Size


    ‚ÅáSize' ‚Åá‚Ñß = S1
    ‚ÅáSize' ‚Åá‚Åá = S1
    ‚ÅáSize' ‚Åáùüô = S1
    ‚ÅáSize' (‚Åá‚Ñï n) = GNatSize n
    ‚ÅáSize' (‚ÅáType x) = S1
    ‚ÅáSize' (‚ÅáCumul c x) = S1
    ‚ÅáSize' (‚ÅáŒ† x) = S1
    ‚ÅáSize' (‚ÅáŒ£ x) = S1
    ‚ÅáSize' (‚Åá‚â° x) = S1
    ‚ÅáSize' (‚ÅáŒº tyCtor x) = S‚Üë (GermSize' x)

    GermSize' DataGerms.‚Åá‚Ñß = S1
    GermSize' DataGerms.‚Åá‚Åá = S1
    GermSize' {tyCtor = tyCtor} (DataGerms.Wsup d com germFO germHO germHOUnk)
      = S‚Üë (smax* (elSizeConsumeFuel (germCommandCode (dataGermIsCode ‚Ñì tyCtor d )) (Iso.fun (germCommandIso (dataGermIsCode ‚Ñì tyCtor d) ) com)
                  ‚à∑ FinLim (Œª n ‚Üí GermSize' (germFO n))
                  ‚à∑ SLim (germHOCode (dataGermIsCode ‚Ñì tyCtor d) (approx (Iso.fun (germCommandIso (dataGermIsCode ‚Ñì tyCtor d)) com))) (Œª r ‚Üí GermSize' (germHO (Iso.inv (germHOIso (dataGermIsCode ‚Ñì tyCtor d) _) (exact r))))
                  ‚à∑ SLim (germHOUnkCode (dataGermIsCode ‚Ñì tyCtor d) (approx (Iso.fun (germCommandIso (dataGermIsCode ‚Ñì tyCtor d)) com))) (Œª r ‚Üí ‚ÅáSize' (germHOUnk (Iso.inv (germHOUnkIso (dataGermIsCode ‚Ñì tyCtor d) _) (exact r)))) ‚à∑ []))

    elSize' {{√¶ = √¶}} C‚Åá x = ‚ÅáSize' {{√¶ = √¶}} x --germUnkSize' (‚ÅáToW {{√¶ = Approx}} (approx {c = C‚Åá {‚Ñì = ‚Ñì}} x))
    elSize' C‚Ñß x = S1
    elSize' Cùüò x = S1
    elSize' Cùüô x = S1
    elSize' C‚Ñï x = GNatSize x
    elSize' (CType {{inst = inst}}) x = S‚Üë (smallerCodeSize x)
    elSize' {{√¶ = √¶}}  (CŒ† dom cod) f = S‚Üë (SLim dom Œª x ‚Üí elSize' (cod _) (f (exact x))) -- S‚Üë (SLim dom (Œª x ‚Üí elSize' {{√¶ = √¶}} (substPath (Œª x ‚Üí El (cod x)) (approxExact‚â° x) (f (exact x))) ))
    elSize' {{√¶ = √¶}} (CŒ£ dom cod) (x , y) = S‚Üë (smax (elSize' {{√¶ = √¶}} dom x) (elSize' {{√¶ = √¶}} (cod (approx x)) y)) -- S‚Üë (smax (elSize' dom (exact x)) (elSize' (cod (approx x)) y))
    elSize' (C‚â° c x y ) (w ‚ä¢ _ ‚âÖ _) = S‚Üë (elSize' {{Approx}} c w)
    elSize' (CŒº tyCtor cI D i) x = CŒºSize' D (to‚ÑÇŒº ‚Ñì tyCtor D x)
    -- S‚Üë (smax* (elSize' (coms d) com ‚à∑ (FinLim Œª n ‚Üí elSize' {!!} (res (inl n))) ‚à∑ (SLim (‚ÑÇCommand (D d)) Œª com ‚Üí SLim (‚ÑÇHOResponse (D d) com) Œª x ‚Üí elSize' (CŒº coms ress) (res (inr (exact _ x)))) ‚à∑ [])) -- S‚Üë (CŒºSize' D ( Iso.inv CŒºWiso (approx {‚Ñì = ‚Ñì} {c = CŒº tyCtor cI D i} x) ))
    elSize' (CCumul {{inst = inst}} c) x = smallerElSize _ x --elSize' c x

    CŒºSize' D  (‚ÑÇinit x) = S‚Üë (CElSize' D D x) -- S‚Üë (CElSize' (D (‚ÑÇFunctor.d x)) D x)
    CŒºSize' D Œº‚Åá = S1
    CŒºSize' D Œº‚Ñß = S1

    CElSize' D E (‚ÑÇEl d com rFO rHO) = S‚Üë (smax* (elSize' _ com ‚à∑ (FinLim Œª n ‚Üí CŒºSize' E (rFO n)) ‚à∑ (SLim (‚ÑÇHOResponse (D d) (approx com)) Œª r ‚Üí CŒºSize' E (rHO (exact r))) ‚à∑ []))

  open ElSizeFuel public

  elSizeFuel : (n : ‚Ñï) ‚Üí ElSizeFuel
  elSizeFuel ‚Ñï.zero = record { elSizeConsumeFuel = Œª _ _ ‚Üí SZ }
  elSizeFuel (‚Ñï.suc n) = record { elSizeConsumeFuel = elSize' (elSizeFuel n)  }

  -- elSizeMonotone : ‚àÄ {{√¶ : √Ü}} {n} (c : ‚ÑÇ ‚Ñì) (x : El c)  ‚Üí elSize' (elSizeFuel n) c x ‚â§‚Çõ elSize' (elSizeFuel (‚Ñï.suc n)) c x
  -- elSizeMonotone CodeModule.C‚Åá x = {!!}
  -- elSizeMonotone CodeModule.C‚Ñß x = ‚â§‚Çõ-refl
  -- elSizeMonotone CodeModule.Cùüò x = ‚â§‚Çõ-refl
  -- elSizeMonotone CodeModule.Cùüô x = ‚â§‚Çõ-refl
  -- elSizeMonotone CodeModule.C‚Ñï x = {!!}
  -- elSizeMonotone CodeModule.CType x = ‚â§‚Çõ-refl
  -- elSizeMonotone (CodeModule.CCumul x‚ÇÅ) x = ‚â§‚Çõ-refl
  -- elSizeMonotone (CodeModule.CŒ† c cod) x = ‚â§‚Çõ-sucMono (‚â§‚Çõ-extLim {!!})
  -- elSizeMonotone (CodeModule.CŒ£ c cod) x = {!!}
  -- elSizeMonotone (CodeModule.C‚â° c x‚ÇÅ y) x = {!!}
  -- elSizeMonotone (CodeModule.CŒº tyCtor c D x‚ÇÅ) x = {!!}

  -- Finally, we take the limit of the fueled sizes to get the full size
  elSize : {{√¶ : √Ü}} ‚Üí (c : ‚ÑÇ ‚Ñì) ‚Üí El c ‚Üí Size
  elSize c x = ‚ÑïLim (Œª n ‚Üí elSize' (elSizeFuel n) c x)


  -- CElSize  .CEnd E  (ElEnd) = S1
  -- CElSize (CArg c D _ _) E {b = b} (ElArg a x) = S‚Üë (smax (elSize {{√¶ = Approx}} (c b) a) (CElSize D E x))
  -- CElSize (CRec D) E (ElRec x x‚ÇÅ) = S‚Üë (smax (CŒºSize E x) (CElSize D E x‚ÇÅ))
  -- CElSize (CHRec c D _ _) E {b = b} (ElHRec f x) = S‚Üë (SLim (c b) Œª a ‚Üí smax (CŒºSize E (f a)) (CElSize D E x))


--TODO uncomment after here

-- SizeMod : ‚àÄ {‚Ñì} ‚Üí CodeSizeF ‚Ñì
-- SizeMod {‚Ñï.zero} = codeSizeF (Œª { {{inst = ()}} }) (Œª { {{inst = ()}} })
-- SizeMod {‚Ñï.suc ‚Ñì} = codeSizeF
--       (Œª {{inst = suc<}} ‚Üí CodeSizeF.codeSize (SizeMod {‚Ñì}))
--       (Œª { {{inst = suc<}}  ‚Üí CodeSizeF.elSize (SizeMod {‚Ñì})})

-- module SM {‚Ñì} where
--   open CodeSizeF (SizeMod {‚Ñì}) public

-- open SM public

-- codeSuc : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí SZ <‚Çõ codeSize c
-- codeSuc C‚Åá = ‚â§‚Çõ-refl
-- codeSuc C‚Ñß = ‚â§‚Çõ-refl
-- codeSuc Cùüò = ‚â§‚Çõ-refl
-- codeSuc Cùüô = ‚â§‚Çõ-refl
-- codeSuc CType = ‚â§‚Çõ-refl
-- codeSuc (CŒ† c cod) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- codeSuc (CŒ£ c cod) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- codeSuc (C‚â° c x y) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- codeSuc (CŒº tyCtor c D x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- codeSuc {‚Ñì = suc ‚Ñì} (CCumul c) = (codeSuc c) ‚â§‚®ü (‚â§‚Üë (codeSize c))

-- codeMaxL : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí smax S1 (codeSize c) ‚â§‚Çõ codeSize c
-- codeMaxL C‚Åá = smax-oneL
-- codeMaxL C‚Ñß = smax-oneL
-- codeMaxL Cùüò = smax-oneL
-- codeMaxL Cùüô = smax-oneL
-- codeMaxL CType = smax-oneL
-- codeMaxL (CŒ† c cod) = smax-oneL
-- codeMaxL (CŒ£ c cod) = smax-oneL
-- codeMaxL (C‚â° c x y) = smax-oneL
-- codeMaxL (CŒº tyCtor c D x) = smax-oneL
-- codeMaxL {‚Ñì = suc ‚Ñì} (CCumul c) = smax-oneL


-- codeMaxR : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí smax (codeSize c) S1 ‚â§‚Çõ codeSize c
-- codeMaxR C‚Åá = smax-oneR
-- codeMaxR C‚Ñß = smax-oneR
-- codeMaxR Cùüò = smax-oneR
-- codeMaxR Cùüô = smax-oneR
-- codeMaxR CType = smax-oneR
-- codeMaxR (CŒ† c cod) = smax-oneR
-- codeMaxR (CŒ£ c cod) = smax-oneR
-- codeMaxR (C‚â° c x y) = smax-oneR
-- codeMaxR (CŒº tyCtor c D x) = smax-oneR
-- codeMaxR {‚Ñì = suc ‚Ñì} (CCumul c) = smax-oneR

-- codeMaxSuc : ‚àÄ {‚Ñì1 ‚Ñì2} {c1 : ‚ÑÇ ‚Ñì1 } {c2 : ‚ÑÇ ‚Ñì2} ‚Üí S1 ‚â§‚Çõ smax (codeSize c1) (codeSize c2)
-- codeMaxSuc {c1 = c1} {c2 = c2} = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z ‚â§‚®ü smax-strictMono (codeSuc c1) (codeSuc c2)


-- ‚Åásuc : ‚àÄ {{_ : √Ü}} {‚Ñì} (x : ‚ÅáTy ‚Ñì) ‚Üí S1 ‚â§‚Çõ ‚ÅáSize x
-- ‚Åásuc ‚Åá‚Åá = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc ‚Åá‚Ñß = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc ‚Åáùüô = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc {suc ‚Ñì} (‚ÅáType x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc (‚ÅáŒ† x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc (‚ÅáŒ£ x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc (‚Åá‚â° (x ‚ä¢ .‚Åá‚Åá ‚âÖ .‚Åá‚Åá)) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc (‚ÅáŒº tyCtor x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
-- ‚Åásuc {‚Ñì = suc ‚Ñì} (‚ÅáCumul c x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z

-- open import Cubical.Data.Maybe


-- -- dataGermDescSize : {{_ : √Ü}} ‚Üí ‚Ñï ‚Üí CName ‚Üí Size
-- -- dataGermDescSize ‚Ñì tyCtor with numCtors tyCtor in deq
-- -- ... | ‚Ñï.zero = S1
-- -- ... | ‚Ñï.suc n = SLim (CFin n) Œª x ‚Üí
-- --     let
-- --       d : DName tyCtor
-- --       d = pSubst Fin (pSym deq) (fromCFin x)
-- --     in germDescSize (germForCtor ‚Ñì tyCtor d) (dataGermIsCode ‚Ñì tyCtor d) tt tt

-- -- germFCize :  ‚àÄ {{√¶ : √Ü}} {‚Ñì} {B+ B- sig} {tyCtor : CName}
-- --       ‚Üí {D : GermCtor B+ B- sig}
-- --       ‚Üí {b+ : B+}
-- --       ‚Üí {b- : B- b+}
-- --       ‚Üí (isCode : DataGermIsCode ‚Ñì D)
-- --       ‚Üí FCGerm ‚Ñì tyCtor D b+ b-
-- --       ‚Üí Size
-- -- germFCize {tyCtor = tyCtor} {D} {b+} {b- } isCode x = germFIndSize tyCtor D isCode b+ b- x Œª r ‚Üí germIndSize tyCtor (FContainer.responseNow x r)


--   -- Match on the constructor of an element of the data germ
--   -- and get back a proof that the match gives something smaller
-- -- germMatch : {{ _ : √Ü }} ‚Üí {‚Ñì : ‚Ñï} ‚Üí {tyCtor : CName}
-- --       ‚Üí (dg : FContainer (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì))
-- --         (W (germContainer ‚Ñì tyCtor (‚ñπ‚Åá ‚Ñì)) (‚ÅáTy ‚Ñì)) (‚ÅáTy ‚Ñì) tt)
-- --       ‚Üí Œ£[ d ‚àà DName tyCtor ]
-- --         Œ£[ x ‚àà FCGerm ‚Ñì tyCtor (germForCtor ‚Ñì tyCtor d) tt tt ]
-- --         germFCize (dataGermIsCode ‚Ñì tyCtor d) x <‚Çõ germIndSize {‚Ñì = ‚Ñì} tyCtor (Wsup dg)
-- -- germMatch (FC (d , com) rn ru) =
-- --     d
-- --     , FC com rn ru
-- --     , ‚â§‚Çõ-refl

-- -- dataGermInj : {{ _ : √Ü }} ‚Üí {‚Ñì : ‚Ñï} ‚Üí {tyCtor : CName} {d : DName tyCtor}
-- --       ‚Üí FCGerm ‚Ñì tyCtor (germForCtor ‚Ñì tyCtor d) tt tt
-- --       ‚Üí DataGerm ‚Ñì tyCtor
-- -- dataGermInj {d = d} (FC com now unk) = Wsup (FC (d , com) now unk)


--   -- Used for well-founded 2-argument induction
--   -- descPairSize : ‚àÄ {{_ : √Ü}} {‚Ñì sig} ‚Üí  {cI cB cI' cB' : ‚ÑÇ ‚Ñì} ‚Üí (D1 : ‚ÑÇDesc cI cB sig) (D2 : ‚ÑÇDesc cI' cB' sig) ‚Üí Size

--   -- codePairSize c1 c2 with codeHead c1 in eq1 | codeHead c2 in eq2 | headMatchView (codeHead c1) (codeHead c2)
--   -- ... | h1 |  h2 |  H‚ÑßL x = codeSize c2
--   -- ... | h1 |  h2 |  H‚ÑßR x = codeSize c1
--   -- ... | h1 |  h2 |  H‚ÅáL x x‚ÇÅ = codeSize c2
--   -- ... | .(HStatic _) |  h2 |  H‚ÅáR x = codeSize c1
--   -- ... | .(HStatic _) |  .(HStatic _) |  HNeq x = smax (codeSize c1) (codeSize c2)
--   -- codePairSize (CŒ† dom1 cod1) (CŒ† dom2 cod2) | HStatic HŒ† |  HStatic _ |  HEq reflp
--   --   = S‚Üë (smax (codePairSize dom1 dom2) (SLim dom1 Œª x1 ‚Üí SLim dom2 Œª x2 ‚Üí codePairSize (cod1 (approx x1)) (cod2 (approx x2))))
--   -- codePairSize (CŒ£ dom1 cod1) (CŒ£ dom2 cod2) | HStatic HŒ£ |  HStatic _ |  HEq reflp
--   --    = S‚Üë (smax (codePairSize dom1 dom2) (SLim dom1 Œª x1 ‚Üí SLim dom2 Œª x2 ‚Üí codePairSize (cod1 (approx x1)) (cod2 (approx x2))))
--   -- codePairSize (C‚â° c1 x y) (C‚â° c2 x‚ÇÅ y‚ÇÅ) | HStatic H‚âÖ |  HStatic _ |  HEq reflp
--   --   = S‚Üë (codePairSize c1 c2)
--   -- codePairSize Cùüô Cùüô | HStatic Hùüô |  HStatic _ |  HEq reflp = S1
--   -- codePairSize Cùüò Cùüò | HStatic Hùüò |  HStatic _ |  HEq reflp = S1
--   -- codePairSize CType CType | HStatic HType |  HStatic _ |  HEq reflp = S1
--   -- codePairSize (CŒº tyCtor c1 D x) (CŒº tyCtor‚ÇÅ c2 D‚ÇÅ x‚ÇÅ) | HStatic (HCtor x‚ÇÇ) |  HStatic _ |  HEq reflp with reflp ‚Üê eq1 with reflp ‚Üê eq2
--   --   = S‚Üë (DLim tyCtor Œª d ‚Üí descPairSize (D d) (D‚ÇÅ d))


--   -- descPairSize (CEnd i) (CEnd i‚ÇÅ) = S1
--   -- descPairSize {cB = cB} {cB' = cB'} (CArg c D1) (CArg c' D2)
--   --   = S‚Üë (smax (SLim cB Œª x1 ‚Üí SLim cB' Œª x2 ‚Üí codePairSize (c (approx x1)) (c' (approx x2)) ) (descPairSize D1 D2))
--   -- descPairSize (CRec j D1) (CRec j' D2)
--   --   = S‚Üë (descPairSize  D1 D2)
--   -- descPairSize {cB = cB} {cB' = cB'} (CHRec c j D1) (CHRec c' j' D2)
--   --   = S‚Üë (smax (SLim cB Œª x1 ‚Üí SLim cB' Œª x2 ‚Üí codePairSize (c (approx x1)) (c' (approx x2)) ) (descPairSize D1 D2))


--   -- Sizes for well-formed codes
--   -- wfSize : ‚àÄ {‚Ñì} ‚Üí ‚ÑÇwf ‚Ñì ‚Üí Size
--   -- wfSize c = codeSize (code c)

--   -- wfElSize : ‚àÄ {{_ : √Ü}} {‚Ñì} ‚Üí (c : ‚ÑÇwf ‚Ñì) ‚Üí wfEl c ‚Üí Size
--   -- wfElSize c x = elSize (code c) x




--   -- wfPairSize : ‚àÄ {‚Ñì} (c1 c2 : ‚ÑÇwf ‚Ñì) ‚Üí Size
--   -- wfPairSize c1 c2 = csize (codePairSize (code c1) (code c2))



--   -- -- elSizeLowerBound : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí (x : El c) ‚Üí S1 ‚â§‚Çõ elSize c x
--   -- -- ‚ÅáSizeLowerBound : ‚àÄ {‚Ñì} (x : ‚ÅáTy ‚Ñì) ‚Üí S1 ‚â§‚Çõ ‚ÅáSize x
--   -- -- codeSizeLowerBound : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí S1 ‚â§‚Çõ codeSize c

--   -- -- codeSizeLowerBound C‚Åá = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound C‚Ñß = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound Cùüò = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound Cùüô = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound CType = ‚â§‚Çõ-refl
--   -- -- codeSizeLowerBound (CŒ† c cod) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- codeSizeLowerBound (CŒ£ c cod) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- codeSizeLowerBound (C‚â° c x y) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- codeSizeLowerBound (CŒº tyCtor c D x) with numCtors tyCtor
--   -- -- ... | ‚Ñï.zero = ‚â§‚Çõ-refl
--   -- -- ... | ‚Ñï.suc n = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z

--   -- -- elSizeLowerBound C‚Åá x = ‚ÅáSizeLowerBound x
--   -- -- elSizeLowerBound C‚Ñß x = ‚â§‚Çõ-refl
--   -- -- elSizeLowerBound Cùüò x = ‚â§‚Çõ-refl
--   -- -- elSizeLowerBound Cùüô x = ‚â§‚Çõ-refl
--   -- -- elSizeLowerBound {suc ‚Ñì} CType x = codeSizeLowerBound x
--   -- -- elSizeLowerBound (CŒ† dom cod) f = underLim S1 (Œª x ‚Üí elSize (cod (approx x)) (f x)) (Œª k ‚Üí elSizeLowerBound (cod k) (f k))
--   -- -- elSizeLowerBound (CŒ£ c cod) (x , y) = ‚â§‚Çõ-trans (elSizeLowerBound c x) smax-‚â§L
--   -- -- elSizeLowerBound (C‚â° c x‚ÇÅ y) (x ‚ä¢ _ ‚âÖ _) = elSizeLowerBound c x
--   -- -- elSizeLowerBound (CŒº tyCtor c D x‚ÇÅ) (Wsup x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- elSizeLowerBound (CŒº tyCtor c D x‚ÇÅ) W‚Åá = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z

--   -- -- ‚ÅáSizeLowerBound ‚Åá‚Åá = ‚â§‚Çõ-refl
--   -- -- ‚ÅáSizeLowerBound ‚Åá‚Ñß = ‚â§‚Çõ-refl
--   -- -- ‚ÅáSizeLowerBound ‚Åáùüô = ‚â§‚Çõ-refl
--   -- -- ‚ÅáSizeLowerBound {suc ‚Ñì} (‚ÅáType x) = codeSizeLowerBound x
--   -- -- ‚ÅáSizeLowerBound (‚ÅáŒ† x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- ‚ÅáSizeLowerBound (‚ÅáŒ£ x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- ‚ÅáSizeLowerBound (‚Åá‚â° (x ‚ä¢ _ ‚âÖ _)) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z
--   -- -- ‚ÅáSizeLowerBound (‚ÅáŒº tyCtor x) = ‚â§‚Çõ-sucMono ‚â§‚Çõ-Z

--   -- -- onePlusCode-L : ‚àÄ {‚Ñì} {c1 c2 : ‚ÑÇ ‚Ñì} ‚Üí codeSize c1 <o ((codeSize c1) +o (codeSize c2))
--   -- -- onePlusCode-L {c1 = c1} {c2} with (o1 , pf1) ‚Üê codeSuc c1 | (o2 , pf2) ‚Üê codeSuc c2 rewrite pf1 rewrite pf2 = ‚â§‚Çõ-sucMono (‚â§‚Çõ-trans (‚â§‚Çõ-sucMono (+o-‚â§-L o1 o2)) (oplus-suc-swap o1 o2))

--   -- -- onePlusCode-R : ‚àÄ {‚Ñì} {c1 c2 : ‚ÑÇ ‚Ñì} ‚Üí codeSize c2 <o ((codeSize c1) +o (codeSize c2))
--   -- -- onePlusCode-R {c1 = c1} {c2} with (o1 , pf1) ‚Üê codeSuc c1 | (o2 , pf2) ‚Üê codeSuc c2 rewrite pf1 rewrite pf2 = ‚â§‚Çõ-sucMono (‚â§‚Çõ-trans (‚â§‚Çõ-sucMono (+o-‚â§-R o1 o2)) (oplus-suc-swap o1 o2))
