{-# OPTIONS --cubical --guarded #-}



-- open import Guarded
open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary

open import DecPEq
open import Cubical.Data.Nat
open import Cubical.Data.Bool
open import Cubical.Data.Empty renaming (‚ä• to ùüò)
open import Cubical.Data.Unit renaming (Unit to ùüô)
-- open import Cubical.Data.Prod
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import UnkGerm
open import GuardedAlgebra
import GuardedModality as G
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Transport
open import Cubical.Data.Sum
open import GuardedModality using (later-ext)

open import ApproxExact
open import W

--TODO: don't make ‚Ñì module param
module InductiveCodes {{_ : DataTypes}} {{_ : DataGerms}} where

open import Code
-- open import Head
open import Util

open import Ord -- ‚ÑÇ El ‚Ñß Cùüô refl

-- Predicate for a Germ Constructor whose types are all given by codes in our universe
record GermCtorIsCode {{√¶ : √Ü}} (‚Ñì : ‚Ñï) (ctor : GermCtor) : Type1 where
  inductive
  field
    germCommandCode : ‚ÑÇ ‚Ñì
    germCommandIso : Iso (GermCommand ctor) (El germCommandCode)
    germHOCode : El germCommandCode ‚Üí ‚ÑÇ ‚Ñì
    germHOIso : ‚àÄ com ‚Üí Iso (GermHOResponse ctor com) (El (germHOCode (Iso.fun germCommandIso com)))
    germHOUnkCode : El germCommandCode ‚Üí ‚ÑÇ ‚Ñì
    germHOUnkIso : ‚àÄ com ‚Üí Iso (GermHOUnkResponse ctor com) (El (germHOCode (Iso.fun germCommandIso com)))

-- Inductive representation of W-types, again useful for convincing Agda things terminate
record ‚ÑÇFunctor {{√¶  : √Ü}} ‚Ñì (tyCtor : CName) (ctors : DCtors ‚Ñì tyCtor) (X : Type) :  Type where
  inductive
  constructor ‚ÑÇEl
  field
    d : DName tyCtor
    com : El (‚ÑÇCommand (ctors d))
    foResp : Fin (#FO tyCtor d) ‚Üí X
    hoResp : (r : El (‚ÑÇHOResponse (ctors d) (approx com))) ‚Üí X

data ‚ÑÇŒº {{√¶  : √Ü}} ‚Ñì (tyCtor : CName) (ctors : DCtors ‚Ñì tyCtor) : Type where
  ‚ÑÇinit : ‚ÑÇFunctor ‚Ñì tyCtor ctors (‚ÑÇŒº ‚Ñì tyCtor ctors) ‚Üí ‚ÑÇŒº ‚Ñì tyCtor ctors
  Œº‚Åá Œº‚Ñß : ‚ÑÇŒº ‚Ñì tyCtor ctors

-- The things we need declared for our inductive types to have them
-- fit into our Universe ala Tarski
record CodesForInductives : Set2 where
  field
    ‚Ñì‚Çö : (‚Ñì : ‚Ñï) ‚Üí CName ‚Üí ‚Ñï
    Params : (‚Ñì : ‚Ñï) ‚Üí (tyCtor : CName) ‚Üí ‚ÑÇ (‚Ñì‚Çö ‚Ñì tyCtor)
    Indices : (‚Ñì : ‚Ñï) ‚Üí (tyCtor : CName) ‚Üí ApproxEl (Params ‚Ñì tyCtor) ‚Üí ‚ÑÇ ‚Ñì
    descFor : (‚Ñì : ‚Ñï) ‚Üí (tyCtor : CName)
      ‚Üí (pars : ApproxEl (Params ‚Ñì tyCtor))
      ‚Üí (indices : ApproxEl (Indices ‚Ñì tyCtor pars))
      ‚Üí (DCtors ‚Ñì tyCtor )
  DataGermIsCode : Type1
  DataGermIsCode =  ‚àÄ {{_ : √Ü}} (‚Ñì : ‚Ñï) (tyCtor : CName) (d : DName tyCtor)
      ‚Üí GermCtorIsCode ‚Ñì (germCtor ‚Ñì tyCtor d)

  field
    --Every data germ can be described by a code, with some parts hidden behind the guarded modality
    dataGermIsCode : DataGermIsCode

  -- Inductive type for codes that includes the codes for germs as fields
  -- This is awkward, but needed to convince Agda that our size calculation halts
  data CodeSizer {‚Ñì} : ‚ÑÇ ‚Ñì ‚Üí Type1
  data CtorSizer {‚Ñì} : (‚ÑÇCtor {‚Ñì = ‚Ñì}) ‚Üí Type1
  data CodeSizer {‚Ñì} where
    -- We need to
    CS‚Åá : (dgIsCode : ‚àÄ {{√¶ : √Ü}} ‚Üí _) ‚Üí (‚àÄ {{√¶ : √Ü}} ‚Üí dgIsCode ‚â°c dataGermIsCode) ‚Üí CodeSizer C‚Åá
    CS‚Ñß : CodeSizer C‚Ñß
    CSùüò : CodeSizer Cùüò
    CSùüô : CodeSizer Cùüô
    CSType : ‚àÄ {{inst : 0< ‚Ñì}} ‚Üí CodeSizer CType
    CSCumul : ‚àÄ {{inst : 0< ‚Ñì}} {c} ‚Üí CodeSizer (CCumul c)
    CSŒ† : ‚àÄ {dom cod} ‚Üí CodeSizer dom ‚Üí (‚àÄ x ‚Üí CodeSizer (cod x)) ‚Üí CodeSizer (CŒ† dom cod)
    CSŒ£ : ‚àÄ {dom cod} ‚Üí CodeSizer dom ‚Üí (‚àÄ x ‚Üí CodeSizer (cod x)) ‚Üí CodeSizer (CŒ£ dom cod)
    CS‚â° : ‚àÄ {c x y} ‚Üí CodeSizer c ‚Üí CodeSizer (C‚â° c x y)
    CSŒº : ‚àÄ {tyCtor cI D i}
      ‚Üí (‚àÄ d ‚Üí CtorSizer (D d))
      ‚Üí CodeSizer (CŒº tyCtor cI D i)
  data CtorSizer {‚Ñì} where
    CElS :
      ‚àÄ {c r}
      ‚Üí CodeSizer c
      ‚Üí (‚àÄ x ‚Üí CodeSizer (r x))
      ‚Üí CtorSizer (record { ‚ÑÇCommand = c ; ‚ÑÇHOResponse = r })

  codeSizer : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì ) ‚Üí CodeSizer c
  ctorSizer : ‚àÄ {‚Ñì} (c : ‚ÑÇCtor {‚Ñì = ‚Ñì}) ‚Üí CtorSizer c
  codeSizer C‚Åá = CS‚Åá _ reflc
  codeSizer C‚Ñß = CS‚Ñß
  codeSizer Cùüò = CSùüò
  codeSizer Cùüô = CSùüô
  codeSizer CType = CSType
  codeSizer (CCumul x) = CSCumul
  codeSizer (CŒ† c cod) = CSŒ† (codeSizer c) (Œª x ‚Üí codeSizer _)
  codeSizer (CŒ£ c cod) = CSŒ£ (codeSizer c) (Œª x ‚Üí codeSizer _)
  codeSizer (C‚â° c x y) = CS‚â° (codeSizer _) 
  codeSizer (CŒº tyCtor c D x) = CSŒº (Œª d ‚Üí ctorSizer _)
  ctorSizer D = CElS (codeSizer _) (Œª x ‚Üí codeSizer _)

  -- Every Inductive type can be converted to a ‚ÑÇŒº
  to‚ÑÇŒº : ‚àÄ {{√¶  : √Ü}} ‚Ñì (tyCtor : CName) (ctors : DCtors ‚Ñì tyCtor) ‚Üí
    WÃÉ (Arg (Œª d ‚Üí interpCtor tyCtor d (ctors d))) tt ‚Üí ‚ÑÇŒº ‚Ñì tyCtor ctors
  to‚ÑÇŒº ‚Ñì tyCtor ctors W‚Ñß = Œº‚Ñß
  to‚ÑÇŒº ‚Ñì tyCtor ctors W‚Åá = Œº‚Åá
  to‚ÑÇŒº ‚Ñì tyCtor ctors (Wsup (FC (d , com) resp)) = ‚ÑÇinit (to‚ÑÇFunctor d (‚ÑÇŒº ‚Ñì tyCtor ctors) (FC com Œª r ‚Üí to‚ÑÇŒº ‚Ñì tyCtor ctors (resp r)))
    where
        to‚ÑÇFunctor : ‚àÄ (d : DName tyCtor) (X : Type) ‚Üí
            ‚ü¶ interpCtor tyCtor d  (ctors d) ‚üßF (Œª _ ‚Üí X) tt ‚Üí ‚ÑÇFunctor ‚Ñì tyCtor ctors X
        to‚ÑÇFunctor d X (FC com resp) = ‚ÑÇEl d com (Œª r ‚Üí resp (inl r)) Œª r ‚Üí resp (inr r)

open CodesForInductives {{...}} public
