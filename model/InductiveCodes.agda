{-# OPTIONS --cubical --guarded #-}



-- open import Guarded
open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary

open import DecPEq
open import Cubical.Data.Nat
open import Cubical.Data.Bool
open import Cubical.Data.Empty renaming (‚ä• to ùüò)
open import Cubical.Data.Unit renaming (Unit to ùüô)
-- open import Cubical.Data.Prod
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import UnkGerm
open import GuardedAlgebra
import GuardedModality as G
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import Cubical.Foundations.Transport
open import Cubical.Data.Sum
open import GuardedModality using (later-ext)

open import Constructors

open import ApproxExact
open import W

--TODO: don't make ‚Ñì module param
module InductiveCodes {{_ : DataTypes}} {{_ : DataGerms}} where

open import Code
-- open import Head
open import Util
open import WMuConversion

data GermCtorIsCode (‚Ñì : ‚Ñï) {{√¶ : √Ü}}  : ‚àÄ {sig} ‚Üí GermCtor sig ‚Üí Type1  where
 GEndCode : GermCtorIsCode ‚Ñì  GEnd
 GArgCode : ‚àÄ { sig n} {A : GermTele n} {ixFor} {D : GermCtor sig}
   ‚Üí (c+ : ‚ÑÇ ‚Ñì)
   ‚Üí (iso+ : Iso (GermTeleEnv A) (El c+))
   ‚Üí GermCtorIsCode ‚Ñì D
   ‚Üí GermCtorIsCode ‚Ñì (GArg A ixFor D )
 GRecCode : ‚àÄ {sig n} {A : GermTele n} {D : GermCtor sig}
   ‚Üí (c+ :  ‚ÑÇ ‚Ñì)
   ‚Üí (iso+ : Iso (GermTeleEnv A) (El c+))
   ‚Üí GermCtorIsCode ‚Ñì D
   ‚Üí GermCtorIsCode ‚Ñì (GRec A D)



-- open GermCtorIsCode public


-- The things we need declared for our inductive types to have them
-- fit into our Universe ala Tarski
record CodesForInductives : Type2 where
  field
    ‚Ñì‚Çö : (‚Ñì : ‚Ñï) ‚Üí CName ‚Üí ‚Ñï
    Params : (‚Ñì : ‚Ñï) ‚Üí (tyCtor : CName) ‚Üí ‚ÑÇ (‚Ñì‚Çö ‚Ñì tyCtor)
    Indices : (‚Ñì : ‚Ñï) ‚Üí (tyCtor : CName) ‚Üí ApproxEl (Params ‚Ñì tyCtor) ‚Üí ‚ÑÇ ‚Ñì
    descFor : (‚Ñì : ‚Ñï) ‚Üí (tyCtor : CName)
      ‚Üí (pars : ApproxEl (Params ‚Ñì tyCtor))
      ‚Üí (indices : ApproxEl (Indices ‚Ñì tyCtor pars))
      ‚Üí (DCtors ‚Ñì tyCtor )
  DataGermIsCode : Type1
  DataGermIsCode =  ‚àÄ {{_ : √Ü}} (‚Ñì : ‚Ñï) (tyCtor : CName) (d : DName tyCtor)
      ‚Üí GermCtorIsCode ‚Ñì (germCtor ‚Ñì tyCtor d)

  field
    --Every data germ can be described by a code, with some parts hidden behind the guarded modality
    dataGermIsCode : DataGermIsCode



open CodesForInductives {{...}} public
