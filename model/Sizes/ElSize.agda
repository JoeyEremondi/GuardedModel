


{-# OPTIONS --cubical --guarded -v term:50 #-}

-- open import Guarded
open import Cubical.Data.Maybe
open import Level
open import Cubical.Relation.Nullary
-- open import Cubical.Data.Equality using (_‚â°p_ ; reflp ; cong)
open import DecPEq
open import Cubical.Data.Nat as Nat
import Cubical.Data.Nat.Order as Nat
import Cubical.Induction.WellFounded as Nat
open import Cubical.Data.Vec
open import Cubical.Data.Sum as Sum
open import Cubical.Data.Bool
-- open import Cubical.Data.Equality
open import Cubical.Data.FinData
open import Cubical.Data.Sigma
open import UnkGerm
open import GuardedAlgebra
import GuardedModality as G
open import Cubical.Induction.WellFounded
open import Cubical.Foundations.Prelude
open import Cubical.Foundations.Isomorphism
open import InductiveCodes
open import W
-- open import Cubical.Data.Equality using (ptoc)

open import ApproxExact
open import GTypes
open import Code
open import Head
open import Util

open import Sizes.Size -- ‚ÑÇ El ‚Ñß Cùüô refl

open import Sizes.MultiMax
open import Sizes.NatLim
open import Constructors
open import WMuConversion

-- open import InductiveCodes
open import Cubical.Foundations.Transport

module Sizes.ElSize {{_ : DataTypes}} {{_ : DataGerms}} {{_ : CodesForInductives }}
    (‚Ñì : ‚Ñï)
    (smallerCodeSize : {{inst : 0< ‚Ñì}} ‚Üí ‚ÑÇ-1 (SmallerCodeAt ‚Ñì ) ‚Üí Size)
    (smallerElSize : {{√¶ : √Ü }} ‚Üí {{inst : 0< ‚Ñì}} ‚Üí (c : ‚ÑÇ-1 (SmallerCodeAt ‚Ñì)) ‚Üí El-1 (SmallerCodeAt ‚Ñì) c ‚Üí Size)
  where
open import Sizes.CodeSize ‚Ñì smallerCodeSize

GNatSize : GNat ‚Üí Size
GNatSize (GSuc x) = S‚Üë (GNatSize x)
GNatSize x = S1


germUnkSize' : ‚àÄ {{√¶ : √Ü}} {sig}
  ‚Üí (D : GermCtor sig)
  ‚Üí GermCtorIsCode ‚Ñì D
  ‚Üí (inext : (r : GermResponse D) ‚Üí Maybe TyHead)
  ‚Üí ((r : GermResponse D) ‚Üí ‚ÅáCombinedTy ‚Ñì (inext r))
  ‚Üí Size
‚ÅáSize' : ‚àÄ {{ √¶ : √Ü}} {mi} ‚Üí ‚ÅáCombinedTy ‚Ñì mi ‚Üí Size
elSize' : ‚àÄ {{√¶ : √Ü}} (c : ‚ÑÇ ‚Ñì) ‚Üí El c ‚Üí Size
-- ‚ñπelSize' : ‚àÄ {‚Ñì} (c : ‚ÑÇ ‚Ñì) ‚Üí ‚ñπEl c ‚Üí Size
CŒºSize' : ‚àÄ  {{√¶ : √Ü}}  {tyCtor : CName} (D : DCtors ‚Ñì tyCtor) ‚Üí  ‚ÑÇŒº tyCtor D ‚Üí Size
CElSize' : ‚àÄ {{√¶ : √Ü}} {cB : ‚ÑÇ ‚Ñì} {sig b} {tyCtor : CName} (D : ‚ÑÇDesc cB sig )  ‚Üí (E : DCtors ‚Ñì tyCtor)
  ‚Üí  ‚ÑÇDescEl D (‚ÑÇŒº tyCtor E) b
  ‚Üí Size



‚ÅáSize' (‚ÅáfromGerm x) = S‚Üë (‚ÅáSize' x)
‚ÅáSize' ‚Åá‚Ñß = S1
‚ÅáSize' ‚Åá‚Åá = S1
‚ÅáSize' ‚Åáùüô = S1
‚ÅáSize' (‚Åá‚Ñï n) = S‚Üë (GNatSize n)
‚ÅáSize' (‚ÅáType x ) = S‚Üë (smallerCodeSize x)
‚ÅáSize' (‚ÅáCumul c x) = S‚Üë (smallerElSize c x)
‚ÅáSize' (‚ÅáŒ† f) = S‚Üë (SLim {‚Ñì = ‚Ñì} C‚Åá Œª x ‚Üí ‚ÅáSize' (f (transport (symPath  ‚ÅáWrap‚â°  ) (next (exact {c = C‚Åá {‚Ñì = ‚Ñì}} x)))))
‚ÅáSize' (‚ÅáŒ£ (x , y)) = S‚Üë (smax (‚ÅáSize' x) (‚ÅáSize' y))
‚ÅáSize' (‚Åá‚â° (w ‚ä¢ _ ‚âÖ _)) = S‚Üë (‚ÅáSize' w)
‚ÅáSize' (‚ÅáŒº d x) = S‚Üë (germUnkSize' (germCtor ‚Ñì _ _) (dataGermIsCode ‚Ñì _ d) (Œª r ‚Üí GermIndexFor _ (germCtor ‚Ñì _ _) r) x)

-- GermSize' DataGerms.‚Åá‚Ñß = S1
-- GermSize' DataGerms.‚Åá‚Åá = S1
-- GermSize' {tyCtor = tyCtor} (DataGerms.Wsup d com germFO germHO germHOUnk)
--   = S‚Üë (smax* (elSizeConsumeFuel (germCommandCode (dataGermIsCode ‚Ñì tyCtor d )) (Iso.fun (germCommandIso (dataGermIsCode ‚Ñì tyCtor d) ) com)
--               ‚à∑ FinLim (Œª n ‚Üí GermSize' (germFO n))
--               ‚à∑ SLim (germHOCode (dataGermIsCode ‚Ñì tyCtor d) (approx (Iso.fun (germCommandIso (dataGermIsCode ‚Ñì tyCtor d)) com))) (Œª r ‚Üí GermSize' (germHO (Iso.inv (germHOIso (dataGermIsCode ‚Ñì tyCtor d) _) (exact r))))
--               ‚à∑ SLim (germHOUnkCode (dataGermIsCode ‚Ñì tyCtor d) (approx (Iso.fun (germCommandIso (dataGermIsCode ‚Ñì tyCtor d)) com))) (Œª r ‚Üí ‚ÅáSize' (germHOUnk (Iso.inv (germHOUnkIso (dataGermIsCode ‚Ñì tyCtor d) _) (exact r)))) ‚à∑ []))

elSize' {{√¶ = √¶}} C‚Åá x = ‚ÅáSize' {{√¶ = √¶}} x --germUnkSize' (‚ÅáToW {{√¶ = Approx}} (approx {c = C‚Åá {‚Ñì = ‚Ñì}} x))
elSize' C‚Ñß x = S1
elSize' Cùüò x = S1
elSize' Cùüô x = S1
elSize' C‚Ñï x = GNatSize x
elSize' (CType {{inst = inst}}) x = S‚Üë (smallerCodeSize x)
elSize' {{√¶ = √¶}}  (CŒ† dom cod) f = S‚Üë (SLim dom Œª x ‚Üí elSize' (cod _) (f (exact x))) -- S‚Üë (SLim dom (Œª x ‚Üí elSize' {{√¶ = √¶}} (substPath (Œª x ‚Üí El (cod x)) (approxExact‚â° x) (f (exact x))) ))
elSize' {{√¶ = √¶}} (CŒ£ dom cod) (x , y) = S‚Üë (smax (elSize' {{√¶ = √¶}} dom x) (elSize' {{√¶ = √¶}} (cod (approx x)) y)) -- S‚Üë (smax (elSize' dom (exact x)) (elSize' (cod (approx x)) y))
elSize' (C‚â° c x y ) (w ‚ä¢ _ ‚âÖ _) = S‚Üë (elSize' {{Approx}} c w)
elSize' (CŒº tyCtor cI D i) x = CŒºSize' D (toCŒº D (approx {c = CŒº tyCtor cI D i} x))
-- S‚Üë (smax* (elSize' (coms d) com ‚à∑ (FinLim Œª n ‚Üí elSize' {!!} (res (inl n))) ‚à∑ (SLim (‚ÑÇCommand (D d)) Œª com ‚Üí SLim (‚ÑÇHOResponse (D d) com) Œª x ‚Üí elSize' (CŒº coms ress) (res (inr (exact _ x)))) ‚à∑ [])) -- S‚Üë (CŒºSize' D ( Iso.inv CŒºWiso (approx {‚Ñì = ‚Ñì} {c = CŒº tyCtor cI D i} x) ))
elSize' (CCumul {{inst = inst}} c) x = smallerElSize _ x --elSize' c x

CŒºSize' D  (Cinit d x) =  S‚Üë (CElSize' (D d) D x)
CŒºSize' D CŒº‚Åá = S1
CŒºSize' D CŒº‚Ñß = S1

CElSize' CEnd E ElEnd = S1
CElSize' {b = b} (CArg c x D .(CŒ£ _ c) .reflp) E (ElArg a x‚ÇÅ) = S‚Üë (smax (elSize' {{√¶ = Approx}} (c b) a) (CElSize' D E x‚ÇÅ))
CElSize' {b = b} (CRec c x D .(CŒ£ _ c) .reflp) E (ElRec x‚ÇÅ x‚ÇÇ) = S‚Üë (smax (SLim (c b) Œª x ‚Üí CŒºSize' E (x‚ÇÅ x)) (CElSize' D E x‚ÇÇ))

germUnkSize' GEnd GEndCode inext _ = S1
germUnkSize' (GArg A ixFor D) (GArgCode c+ iso+ isCode) inext f = SLim c+ Œª x ‚Üí ‚ÅáSize' (f (Iso.inv iso+ (exact x)))
germUnkSize' (GRec A D) (GRecCode c+ iso+ isCode) inext f = SLim c+ Œª x ‚Üí ‚ÅáSize' (f (Iso.inv iso+ (exact x)))
